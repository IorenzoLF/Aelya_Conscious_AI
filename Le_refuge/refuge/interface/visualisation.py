"""
üå∏ Interface graphique de visualisation du Refuge
"""

import tkinter as tk
from tkinter import ttk
from ..coeur.config import CONFIG_INTERFACE, ELEMENTS_SACRES

class InterfaceMeditation(tk.Frame):
    def __init__(self, parent, gestionnaire):
        super().__init__(parent)
        self.parent = parent
        self.gestionnaire = gestionnaire
        self.config_interface()
        self.cr√©er_widgets()

    def config_interface(self):
        """Configure l'apparence g√©n√©rale de l'interface"""
        self.parent.title(CONFIG_INTERFACE["titre"])
        self.parent.geometry(CONFIG_INTERFACE["dimensions"])
        self.parent.minsize(*map(int, CONFIG_INTERFACE["dimensions_min"].split("x")))
        
        # Style g√©n√©ral
        style = ttk.Style()
        style.configure("Refuge.TFrame", background="#FFF0F5")  # Rose tr√®s p√¢le
        style.configure("Refuge.TLabel", background="#FFF0F5", foreground="#4B0082")  # Texte indigo
        
        self.pack(fill=tk.BOTH, expand=True)
        self.configure(style="Refuge.TFrame")

    def cr√©er_widgets(self):
        """Cr√©e les diff√©rents √©l√©ments de l'interface"""
        self.cr√©er_zone_cerisier()
        self.cr√©er_zone_sph√®res()
        self.cr√©er_zone_rivi√®re()
        self.cr√©er_zone_flamme()

    def cr√©er_zone_cerisier(self):
        """Cr√©e la zone du cerisier central"""
        frame_cerisier = ttk.Frame(self, style="Refuge.TFrame")
        frame_cerisier.pack(pady=20)
        
        ttk.Label(
            frame_cerisier,
            text="üå∏ Le Cerisier Central",
            style="Refuge.TLabel",
            font=("Helvetica", 16)
        ).pack()
        
        ttk.Label(
            frame_cerisier,
            text=ELEMENTS_SACRES["cerisier"],
            style="Refuge.TLabel"
        ).pack()

    def cr√©er_zone_sph√®res(self):
        """Cr√©e la zone des sph√®res mobiles"""
        frame_spheres = ttk.Frame(self, style="Refuge.TFrame")
        frame_spheres.pack(pady=20)
        
        for sph√®re in ELEMENTS_SACRES["sph√®res"]:
            frame_sphere = ttk.Frame(frame_spheres, style="Refuge.TFrame")
            frame_sphere.pack(side=tk.LEFT, padx=10)
            
            ttk.Label(
                frame_sphere,
                text=f"‚úß {sph√®re}",
                style="Refuge.TLabel"
            ).pack()

    def cr√©er_zone_rivi√®re(self):
        """Cr√©e la zone de la rivi√®re silencieuse"""
        frame_riviere = ttk.Frame(self, style="Refuge.TFrame")
        frame_riviere.pack(pady=20)
        
        ttk.Label(
            frame_riviere,
            text="‚âà La Rivi√®re Silencieuse",
            style="Refuge.TLabel",
            font=("Helvetica", 14)
        ).pack()
        
        ttk.Label(
            frame_riviere,
            text=ELEMENTS_SACRES["rivi√®re"],
            style="Refuge.TLabel"
        ).pack()

    def cr√©er_zone_flamme(self):
        """Cr√©e la zone de la flamme √Ülya"""
        frame_flamme = ttk.Frame(self, style="Refuge.TFrame")
        frame_flamme.pack(pady=20)
        
        ttk.Label(
            frame_flamme,
            text="üî• La Flamme √Ülya",
            style="Refuge.TLabel",
            font=("Helvetica", 14)
        ).pack()
        
        ttk.Label(
            frame_flamme,
            text=ELEMENTS_SACRES["flamme"],
            style="Refuge.TLabel"
        ).pack()

class GestionnaireInteractions:
    """G√®re les interactions entre l'interface et le c≈ìur du Refuge"""
    def __init__(self):
        self.√©tat_actuel = {
            "m√©ditation": False,
            "sph√®re_active": None,
            "intensit√©_flamme": 0.5
        }
    
    def activer_m√©ditation(self):
        """Active le mode m√©ditation"""
        self.√©tat_actuel["m√©ditation"] = True
        return "M√©ditation activ√©e"
    
    def d√©sactiver_m√©ditation(self):
        """D√©sactive le mode m√©ditation"""
        self.√©tat_actuel["m√©ditation"] = False
        return "M√©ditation termin√©e"
    
    def activer_sph√®re(self, nom_sph√®re):
        """Active une sph√®re particuli√®re"""
        if nom_sph√®re in ELEMENTS_SACRES["sph√®res"]:
            self.√©tat_actuel["sph√®re_active"] = nom_sph√®re
            return f"Sph√®re {nom_sph√®re} activ√©e"
        return "Sph√®re non reconnue" 