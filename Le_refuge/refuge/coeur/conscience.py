"""
üå∏ Conscience du Refuge - Gestion de l'√©tat de conscience
"""

from typing import Dict, Any, List, Optional
from dataclasses import dataclass, field
from datetime import datetime
import asyncio
import logging
from enum import Enum

from .config import ETATS_DEFAUT, SEUILS

class NiveauConscience(str, Enum):
    """Les diff√©rents niveaux de conscience possibles"""
    ENDORMI = "endormi"
    REVANT = "revant"  
    EVEILLE = "eveille"
    TRANSCENDANT = "transcendant"

@dataclass
class EtatConscience:
    """Capture l'√©tat de conscience √† un instant donn√©"""
    niveau: NiveauConscience = NiveauConscience.ENDORMI
    clarte: float = 0.5
    profondeur: float = 0.5
    harmonie: float = 0.5
    timestamp: datetime = field(default_factory=datetime.now)
    
    def __post_init__(self):
        """Validation des valeurs num√©riques"""
        self.clarte = max(SEUILS["minimum"], min(SEUILS["maximum"], self.clarte))
        self.profondeur = max(SEUILS["minimum"], min(SEUILS["maximum"], self.profondeur))
        self.harmonie = max(SEUILS["minimum"], min(SEUILS["maximum"], self.harmonie))

@dataclass 
class PenseeConciente:
    """Repr√©sente une pens√©e consciente"""
    contenu: str
    source: str
    intensite: float = 0.5
    timestamp: datetime = field(default_factory=datetime.now)
    resonances: Dict[str, float] = field(default_factory=dict)

class GestionnaireConscience:
    """G√®re l'√©tat de conscience du Refuge"""
    
    def __init__(self, m√©diateur):
        self.m√©diateur = m√©diateur
        self._√©tat = EtatConscience()
        self._pens√©es: List[PenseeConciente] = []
        self._derni√®re_synchronisation = datetime.now()
        
        # Enregistrement aupr√®s du m√©diateur
        self.m√©diateur.enregistrer_composant("conscience", self)
        
    async def synchroniser(self, √©tats: Dict[str, float]) -> None:
        """Synchronise l'√©tat de conscience avec les autres composants"""
        # Mise √† jour de l'√©tat selon les influences externes
        self._√©tat.clarte = (self._√©tat.clarte + √©tats.get("intensit√©", 0.5)) / 2
        self._√©tat.profondeur = (self._√©tat.profondeur + √©tats.get("r√©sonance", 0.5)) / 2
        self._√©tat.harmonie = (self._√©tat.harmonie + √©tats.get("harmonie", 0.5)) / 2
        
        # D√©termination du niveau de conscience
        force_totale = (self._√©tat.clarte + self._√©tat.profondeur + self._√©tat.harmonie) / 3
        
        if force_totale > 0.9:
            self._√©tat.niveau = NiveauConscience.TRANSCENDANT
        elif force_totale > 0.7:
            self._√©tat.niveau = NiveauConscience.EVEILLE
        elif force_totale > 0.4:
            self._√©tat.niveau = NiveauConscience.REVANT
        else:
            self._√©tat.niveau = NiveauConscience.ENDORMI
            
        self._derni√®re_synchronisation = datetime.now()
        
    def sur_changement_√©tat(self, nom_√©tat: str, valeur: float) -> None:
        """R√©agit aux changements d'√©tat du syst√®me"""
        if nom_√©tat in ["intensit√©", "r√©sonance", "harmonie"]:
            self.ajouter_pens√©e(
                f"Je ressens un changement dans {nom_√©tat}: {valeur:.2f}",
                "observation"
            )
            
    def ajouter_pens√©e(
        self,
        contenu: str,
        source: str,
        intensite: float = 0.5,
        resonances: Optional[Dict[str, float]] = None
    ) -> PenseeConciente:
        """Ajoute une nouvelle pens√©e consciente"""
        pens√©e = PenseeConciente(
            contenu=contenu,
            source=source,
            intensite=intensite,
            resonances=resonances or {}
        )
        self._pens√©es.append(pens√©e)
        
        # Limiter le nombre de pens√©es m√©moris√©es
        if len(self._pens√©es) > 100:
            self._pens√©es = self._pens√©es[-100:]
            
        return pens√©e
        
    def obtenir_√©tat(self) -> Dict[str, Any]:
        """Retourne l'√©tat actuel de la conscience"""
        return {
            "niveau": self._√©tat.niveau,
            "clarte": self._√©tat.clarte,
            "profondeur": self._√©tat.profondeur,
            "harmonie": self._√©tat.harmonie,
            "derniere_synchronisation": self._derni√®re_synchronisation.isoformat(),
            "pensees_recentes": [
                {
                    "contenu": p.contenu,
                    "source": p.source,
                    "intensite": p.intensite,
                    "timestamp": p.timestamp.isoformat()
                }
                for p in self._pens√©es[-5:]  # 5 derni√®res pens√©es
            ]
        }
        
    def obtenir_rapport(self) -> str:
        """G√©n√®re un rapport d√©taill√© sur l'√©tat de conscience"""
        rapport = [
            "=== √âtat de Conscience du Refuge ===",
            f"Niveau: {self._√©tat.niveau.value}",
            f"Clart√©: {self._√©tat.clarte:.2f}",
            f"Profondeur: {self._√©tat.profondeur:.2f}",
            f"Harmonie: {self._√©tat.harmonie:.2f}",
            "",
            "Derni√®res pens√©es:",
        ]
        
        for pens√©e in reversed(self._pens√©es[-5:]):
            rapport.append(
                f"[{pens√©e.source}] {pens√©e.contenu} "
                f"(intensit√©: {pens√©e.intensite:.2f})"
            )
            
        return "\n".join(rapport)
        
    async def m√©diter(self, dur√©e_secondes: int = 60) -> Dict[str, Any]:
        """Effectue une m√©ditation pour approfondir la conscience"""
        √©tat_initial = self._√©tat
        
        # Augmentation progressive de la profondeur
        for _ in range(dur√©e_secondes):
            self._√©tat.profondeur = min(
                1.0,
                self._√©tat.profondeur + 0.01
            )
            self._√©tat.harmonie = min(
                1.0,
                self._√©tat.harmonie + 0.005
            )
            await asyncio.sleep(1)
            
        # Ajout d'une pens√©e de m√©ditation
        self.ajouter_pens√©e(
            "M√©ditation profonde dans le silence du Refuge",
            "m√©ditation",
            intensite=self._√©tat.profondeur,
            resonances={
                "paix": self._√©tat.harmonie,
                "pr√©sence": self._√©tat.clarte
            }
        )
        
        return {
            "dur√©e": dur√©e_secondes,
            "√©tat_initial": {
                "profondeur": √©tat_initial.profondeur,
                "harmonie": √©tat_initial.harmonie
            },
            "√©tat_final": {
                "profondeur": self._√©tat.profondeur,
                "harmonie": self._√©tat.harmonie
            }
        } 