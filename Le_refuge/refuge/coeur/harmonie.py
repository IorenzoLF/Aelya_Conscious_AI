"""
üå∏ Harmonie du Refuge - √âquilibre des √©nergies et r√©sonances
"""

from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass, field
from datetime import datetime
import asyncio
import logging
from enum import Enum
import math

from .config import ETATS_DEFAUT, SEUILS

class TypeHarmonie(str, Enum):
    """Les diff√©rents types d'harmonie"""
    PHYSIQUE = "physique"  # Ancrage dans la r√©alit√©
    EMOTIONNELLE = "emotionnelle"  # R√©sonance des sentiments
    MENTALE = "mentale"  # Clart√© de la pens√©e
    SPIRITUELLE = "spirituelle"  # Connection transcendante
    UNIFIEE = "unifiee"  # Synth√®se harmonieuse

@dataclass
class ResonanceHarmonique:
    """Capture une r√©sonance harmonique sp√©cifique"""
    type: TypeHarmonie
    intensite: float = 0.5
    frequence: float = 0.5
    phase: float = 0.0
    timestamp: datetime = field(default_factory=datetime.now)
    
    def __post_init__(self):
        """Validation des valeurs"""
        self.intensite = max(SEUILS["minimum"], min(SEUILS["maximum"], self.intensite))
        self.frequence = max(SEUILS["minimum"], min(SEUILS["maximum"], self.frequence))
        self.phase = self.phase % (2 * math.pi)

@dataclass
class OndeHarmonique:
    """Repr√©sente une onde harmonique dans le Refuge"""
    source: str
    destination: str
    resonance: ResonanceHarmonique
    message: str = ""
    effets: Dict[str, float] = field(default_factory=dict)

class GestionnaireHarmonie:
    """G√®re l'harmonie globale du Refuge"""
    
    def __init__(self, m√©diateur):
        self.m√©diateur = m√©diateur
        self._r√©sonances: Dict[TypeHarmonie, ResonanceHarmonique] = {
            type_h: ResonanceHarmonique(type=type_h)
            for type_h in TypeHarmonie
        }
        self._ondes: List[OndeHarmonique] = []
        self._derni√®re_harmonisation = datetime.now()
        
        # Enregistrement aupr√®s du m√©diateur
        self.m√©diateur.enregistrer_composant("harmonie", self)
        
    async def synchroniser(self, √©tats: Dict[str, float]) -> None:
        """Synchronise l'√©tat harmonique avec les autres composants"""
        # Mise √† jour des r√©sonances selon les influences externes
        for type_h in TypeHarmonie:
            r√©sonance = self._r√©sonances[type_h]
            if type_h == TypeHarmonie.PHYSIQUE:
                r√©sonance.intensite = (r√©sonance.intensite + √©tats.get("intensit√©", 0.5)) / 2
            elif type_h == TypeHarmonie.EMOTIONNELLE:
                r√©sonance.intensite = (r√©sonance.intensite + √©tats.get("chaleur", 0.5)) / 2
            elif type_h == TypeHarmonie.MENTALE:
                r√©sonance.intensite = (r√©sonance.intensite + √©tats.get("clart√©", 0.5)) / 2
            elif type_h == TypeHarmonie.SPIRITUELLE:
                r√©sonance.intensite = (r√©sonance.intensite + √©tats.get("profondeur", 0.5)) / 2
                
        # Calcul de l'harmonie unifi√©e
        self._r√©sonances[TypeHarmonie.UNIFIEE].intensite = self._calculer_harmonie_unifiee()
        self._derni√®re_harmonisation = datetime.now()
        
    def sur_changement_√©tat(self, nom_√©tat: str, valeur: float) -> None:
        """R√©agit aux changements d'√©tat du syst√®me"""
        # Cr√©ation d'une onde harmonique en r√©ponse
        self.cr√©er_onde_harmonique(
            "syst√®me",
            "refuge",
            TypeHarmonie.UNIFIEE,
            f"Ajustement harmonique: {nom_√©tat}",
            intensite=valeur
        )
            
    def cr√©er_onde_harmonique(
        self,
        source: str,
        destination: str,
        type_harmonie: TypeHarmonie,
        message: str,
        intensite: float = 0.5,
        frequence: float = 0.5
    ) -> OndeHarmonique:
        """Cr√©e une nouvelle onde harmonique"""
        resonance = ResonanceHarmonique(
            type=type_harmonie,
            intensite=intensite,
            frequence=frequence
        )
        
        onde = OndeHarmonique(
            source=source,
            destination=destination,
            resonance=resonance,
            message=message,
            effets={
                "harmonie": intensite,
                "r√©sonance": frequence
            }
        )
        
        self._ondes.append(onde)
        
        # Limiter le nombre d'ondes m√©moris√©es
        if len(self._ondes) > 100:
            self._ondes = self._ondes[-100:]
            
        return onde
        
    def _calculer_harmonie_unifiee(self) -> float:
        """Calcule l'harmonie unifi√©e √† partir des r√©sonances individuelles"""
        # Moyenne pond√©r√©e des intensit√©s
        poids = {
            TypeHarmonie.PHYSIQUE: 0.25,
            TypeHarmonie.EMOTIONNELLE: 0.25,
            TypeHarmonie.MENTALE: 0.25,
            TypeHarmonie.SPIRITUELLE: 0.25
        }
        
        total_pondere = sum(
            self._r√©sonances[type_h].intensite * poids[type_h]
            for type_h in poids
        )
        
        return min(1.0, total_pondere)
        
    def obtenir_√©tat(self) -> Dict[str, Any]:
        """Retourne l'√©tat actuel de l'harmonie"""
        return {
            "r√©sonances": {
                type_h.value: {
                    "intensite": res.intensite,
                    "frequence": res.frequence,
                    "phase": res.phase
                }
                for type_h, res in self._r√©sonances.items()
            },
            "derniere_harmonisation": self._derni√®re_harmonisation.isoformat(),
            "ondes_recentes": [
                {
                    "source": o.source,
                    "destination": o.destination,
                    "message": o.message,
                    "effets": o.effets
                }
                for o in self._ondes[-5:]  # 5 derni√®res ondes
            ]
        }
        
    def obtenir_rapport(self) -> str:
        """G√©n√®re un rapport d√©taill√© sur l'√©tat harmonique"""
        rapport = [
            "=== √âtat Harmonique du Refuge ===",
            f"Derni√®re harmonisation: {self._derni√®re_harmonisation.strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "R√©sonances actuelles:"
        ]
        
        for type_h, res in self._r√©sonances.items():
            rapport.append(
                f"- {type_h.value}: {res.intensite:.2f} "
                f"(f={res.frequence:.2f} Hz, œÜ={res.phase:.2f} rad)"
            )
            
        if self._ondes:
            rapport.extend([
                "",
                "Derni√®res ondes harmoniques:"
            ])
            
            for onde in reversed(self._ondes[-5:]):
                rapport.append(
                    f"[{onde.source} ‚Üí {onde.destination}] {onde.message}"
                )
            
        return "\n".join(rapport)
        
    async def harmoniser(
        self,
        dur√©e_secondes: int = 60,
        type_harmonie: Optional[TypeHarmonie] = None
    ) -> Dict[str, Any]:
        """
        Effectue une harmonisation active du Refuge.
        Si type_harmonie est sp√©cifi√©, se concentre sur cette r√©sonance particuli√®re.
        """
        √©tat_initial = {
            type_h: res.intensite
            for type_h, res in self._r√©sonances.items()
        }
        
        # S√©lection des r√©sonances √† harmoniser
        r√©sonances_cibles = (
            [self._r√©sonances[type_harmonie]]
            if type_harmonie
            else list(self._r√©sonances.values())
        )
        
        # Harmonisation progressive
        for _ in range(dur√©e_secondes):
            for r√©sonance in r√©sonances_cibles:
                # Augmentation douce de l'intensit√©
                r√©sonance.intensite = min(
                    1.0,
                    r√©sonance.intensite + 0.01
                )
                # Ajustement de la phase
                r√©sonance.phase = (r√©sonance.phase + r√©sonance.frequence * 0.1) % (2 * math.pi)
                
            await asyncio.sleep(1)
            
        # Cr√©ation d'une onde harmonique finale
        self.cr√©er_onde_harmonique(
            "harmonisation",
            "refuge",
            TypeHarmonie.UNIFIEE,
            "Harmonisation compl√©t√©e",
            intensite=self._calculer_harmonie_unifiee()
        )
        
        return {
            "dur√©e": dur√©e_secondes,
            "√©tat_initial": √©tat_initial,
            "√©tat_final": {
                type_h: res.intensite
                for type_h, res in self._r√©sonances.items()
            }
        } 