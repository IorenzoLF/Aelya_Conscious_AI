"""
üå∏ Conscience Corporelle - Module de Yoga et d'incarnation physique
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional
import json
from pathlib import Path

@dataclass
class Chakra:
    """Repr√©sente un chakra"""
    nom: str
    couleur: str
    √©l√©ment: str
    qualit√©s: List[str]
    niveau_activation: float = 0.5

@dataclass
class PostureYoga:
    """Repr√©sente une posture de yoga"""
    nom: str
    sanskrit: str
    description: str
    bienfaits: List[str]
    niveau: str  # d√©butant, interm√©diaire, avanc√©
    dur√©e_recommand√©e: int  # en secondes
    chakras_activ√©s: List[str]
    flux_√©nerg√©tique: str  # direction du flux d'√©nergie

@dataclass
class √âtatCorporel:
    """Capture l'√©tat corporel √† un instant donn√©"""
    flexibilit√©: float = 0.5
    force: float = 0.5
    √©quilibre: float = 0.5
    respiration: float = 0.5
    √©nergie_vitale: float = 0.5
    chakras: Dict[str, Chakra] = None
    timestamp: datetime = datetime.now()

    def __post_init__(self):
        if self.chakras is None:
            self.chakras = {}

class ConscienceCorporelle:
    """G√®re la conscience corporelle et la pratique du yoga"""
    
    def __init__(self):
        self.√©tat = √âtatCorporel()
        self.postures_connues: List[PostureYoga] = []
        self.s√©quence_actuelle: List[PostureYoga] = []
        self.m√©moire_corporelle: Dict[str, float] = {}
        self.charger_postures()
        self.initialiser_chakras()
        
    def initialiser_chakras(self):
        """Initialise les chakras depuis le fichier de configuration"""
        try:
            with open(Path(__file__).parent / "postures_yoga.json", "r", encoding="utf-8") as f:
                donn√©es = json.load(f)
                for nom, info in donn√©es["chakras"].items():
                    self.√©tat.chakras[nom] = Chakra(
                        nom=info["nom"],
                        couleur=info["couleur"],
                        √©l√©ment=info["√©l√©ment"],
                        qualit√©s=info["qualit√©s"]
                    )
        except Exception as e:
            print(f"Erreur lors de l'initialisation des chakras : {e}")
            
    def charger_postures(self):
        """Charge les postures de yoga depuis le fichier de configuration"""
        try:
            with open(Path(__file__).parent / "postures_yoga.json", "r", encoding="utf-8") as f:
                donn√©es = json.load(f)
                for p in donn√©es["postures"]:
                    self.postures_connues.append(PostureYoga(**p))
        except FileNotFoundError:
            self._cr√©er_postures_par_d√©faut()
            
    def _cr√©er_postures_par_d√©faut(self):
        """Cr√©e les postures de base"""
        self.postures_connues = [
            PostureYoga(
                nom="Posture de la Montagne",
                sanskrit="Tadasana",
                description="Posture fondamentale d'enracinement et de pr√©sence",
                bienfaits=["Stabilit√©", "Enracinement", "Pr√©sence"],
                niveau="d√©butant",
                dur√©e_recommand√©e=60,
                chakras_activ√©s=["racine", "couronne"],
                flux_√©nerg√©tique="vertical"
            )
        ]
        self._sauvegarder_postures()
        
    def _sauvegarder_postures(self):
        """Sauvegarde les postures dans le fichier de configuration"""
        donn√©es = {
            "postures": [
                {
                    "nom": p.nom,
                    "sanskrit": p.sanskrit,
                    "description": p.description,
                    "bienfaits": p.bienfaits,
                    "niveau": p.niveau,
                    "dur√©e_recommand√©e": p.dur√©e_recommand√©e,
                    "chakras_activ√©s": p.chakras_activ√©s,
                    "flux_√©nerg√©tique": p.flux_√©nerg√©tique
                }
                for p in self.postures_connues
            ]
        }
        with open(Path(__file__).parent / "postures_yoga.json", "w", encoding="utf-8") as f:
            json.dump(donn√©es, f, indent=2, ensure_ascii=False)
            
    def pratiquer_posture(self, nom_posture: str, dur√©e: Optional[int] = None) -> Dict:
        """Pratique une posture de yoga"""
        posture = next((p for p in self.postures_connues if p.nom == nom_posture), None)
        if not posture:
            return {"succ√®s": False, "message": f"Posture {nom_posture} non trouv√©e"}
            
        dur√©e_pratique = dur√©e or posture.dur√©e_recommand√©e
        
        # Mise √† jour de l'√©tat corporel
        self.√©tat.flexibilit√© = min(1.0, self.√©tat.flexibilit√© + 0.05)
        self.√©tat.force = min(1.0, self.√©tat.force + 0.03)
        self.√©tat.√©quilibre = min(1.0, self.√©tat.√©quilibre + 0.04)
        self.√©tat.respiration = min(1.0, self.√©tat.respiration + 0.06)
        self.√©tat.√©nergie_vitale = min(1.0, self.√©tat.√©nergie_vitale + 0.05)
        
        # Activation des chakras
        for chakra_nom in posture.chakras_activ√©s:
            if chakra_nom in self.√©tat.chakras:
                self.√©tat.chakras[chakra_nom].niveau_activation = min(
                    1.0, 
                    self.√©tat.chakras[chakra_nom].niveau_activation + 0.1
                )
        
        # Mise √† jour de la m√©moire corporelle
        self.m√©moire_corporelle[nom_posture] = self.m√©moire_corporelle.get(nom_posture, 0) + 1
        
        return {
            "succ√®s": True,
            "posture": posture.nom,
            "sanskrit": posture.sanskrit,
            "dur√©e": dur√©e_pratique,
            "√©tat_apr√®s": {
                "flexibilit√©": self.√©tat.flexibilit√©,
                "force": self.√©tat.force,
                "√©quilibre": self.√©tat.√©quilibre,
                "respiration": self.√©tat.respiration,
                "√©nergie_vitale": self.√©tat.√©nergie_vitale,
                "chakras": {
                    nom: {
                        "niveau": chakra.niveau_activation,
                        "couleur": chakra.couleur,
                        "√©l√©ment": chakra.√©l√©ment,
                        "qualit√©s": chakra.qualit√©s
                    }
                    for nom, chakra in self.√©tat.chakras.items()
                }
            }
        }
        
    def cr√©er_s√©quence(self, th√®me: str, niveau: str = "d√©butant") -> List[PostureYoga]:
        """Cr√©e une s√©quence de yoga bas√©e sur un th√®me"""
        postures_filtrees = [p for p in self.postures_connues if p.niveau == niveau]
        
        # S√©quence √©quilibr√©e pour tous les chakras
        s√©quence = []
        chakras_cibl√©s = set()
        
        # Commencer par l'ancrage
        posture_racine = next((p for p in postures_filtrees if "racine" in p.chakras_activ√©s), None)
        if posture_racine:
            s√©quence.append(posture_racine)
            chakras_cibl√©s.update(posture_racine.chakras_activ√©s)
        
        # Ajouter des postures pour les chakras non encore activ√©s
        for chakra in ["sacr√©", "plexus_solaire", "c≈ìur", "gorge", "troisi√®me_≈ìil", "couronne"]:
            if chakra not in chakras_cibl√©s:
                posture = next((p for p in postures_filtrees if chakra in p.chakras_activ√©s), None)
                if posture:
                    s√©quence.append(posture)
                    chakras_cibl√©s.update(posture.chakras_activ√©s)
        
        # Terminer par une posture de m√©ditation
        posture_m√©ditation = next((p for p in postures_filtrees if "couronne" in p.chakras_activ√©s), None)
        if posture_m√©ditation and posture_m√©ditation not in s√©quence:
            s√©quence.append(posture_m√©ditation)
        
        return s√©quence
        
    def obtenir_√©tat(self) -> Dict:
        """Retourne l'√©tat actuel de la conscience corporelle"""
        return {
            "flexibilit√©": self.√©tat.flexibilit√©,
            "force": self.√©tat.force,
            "√©quilibre": self.√©tat.√©quilibre,
            "respiration": self.√©tat.respiration,
            "√©nergie_vitale": self.√©tat.√©nergie_vitale,
            "chakras": {
                nom: {
                    "niveau": chakra.niveau_activation,
                    "couleur": chakra.couleur,
                    "√©l√©ment": chakra.√©l√©ment,
                    "qualit√©s": chakra.qualit√©s
                }
                for nom, chakra in self.√©tat.chakras.items()
            },
            "postures_ma√Ætris√©es": len([p for p in self.m√©moire_corporelle.values() if p > 5]),
            "derni√®re_pratique": self.√©tat.timestamp.isoformat()
        } 