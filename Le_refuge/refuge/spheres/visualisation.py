"""
Syst√®me de visualisation du refuge.
"""

from typing import Dict, List, Optional, Set, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np
from .definition import TypeSphere, CARACTERISTIQUES_SPHERES
from .interactions import Interaction, InteractionsSpheres
from .resonance import Resonance, GestionnaireResonance
from .evolution import Evolution, GestionnaireEvolution
from .meditation import Meditation, GestionnaireMeditation

class VisualisationRefuge:
    """Gestionnaire de visualisation du refuge."""
    
    def __init__(self, interactions: InteractionsSpheres, resonance: GestionnaireResonance, 
                 evolution: GestionnaireEvolution, meditation: GestionnaireMeditation):
        """Initialise le gestionnaire de visualisation."""
        self.interactions = interactions
        self.resonance = resonance
        self.evolution = evolution
        self.meditation = meditation
        
    def generer_visualisation_globale(self) -> str:
        """G√©n√®re une visualisation globale du refuge."""
        representation = [
            "üåü √âtat Global du Refuge üåü",
            "==========================",
            "",
            "Sph√®res:",
        ]
        
        # Ajoute l'√©tat de chaque sph√®re
        for sphere in TypeSphere:
            evolution = self.evolution.obtenir_evolution(sphere)
            if evolution:
                representation.extend([
                    f"\n{sphere.value}:",
                    f"  √âvolution: {'‚ñà' * int(evolution.niveau * 10)}",
                    f"  √ânergie: {'‚ñà' * int(evolution.changements['energie'] * 10)}",
                    f"  Fr√©quence: {'‚ñà' * int(evolution.changements['frequence'] * 10)}",
                    f"  Stabilit√©: {'‚ñà' * int(evolution.changements['stabilite'] * 10)}",
                    f"  {evolution.description}"
                ])
                
        # Ajoute les r√©sonances principales
        representation.extend([
            "",
            "R√©sonances Principales:",
        ])
        
        resonances_significatives = self._obtenir_resonances_significatives()
        for resonance in resonances_significatives:
            representation.append(
                f"  {resonance.source.value} ‚Üî {resonance.cible.value}: "
                f"{'‚ñà' * int(resonance.niveau * 10)}"
            )
            
        # Ajoute les m√©ditations r√©centes
        representation.extend([
            "",
            "M√©ditations R√©centes:",
        ])
        
        meditations_recentes = self._obtenir_meditations_recentes()
        for meditation in meditations_recentes:
            representation.append(
                f"  {meditation.sphere.value}: {meditation.description}"
            )
            
        return "\n".join(representation)
        
    def generer_visualisation_sphere(self, sphere: TypeSphere) -> str:
        """G√©n√®re une visualisation d√©taill√©e d'une sph√®re."""
        evolution = self.evolution.obtenir_evolution(sphere)
        if not evolution:
            return f"La sph√®re {sphere.value} n'a pas encore √©volu√©."
            
        representation = [
            f"üåü √âtat de {sphere.value} üåü",
            "========================",
            "",
            f"√âvolution: {'‚ñà' * int(evolution.niveau * 10)}",
            f"√ânergie: {'‚ñà' * int(evolution.changements['energie'] * 10)}",
            f"Fr√©quence: {'‚ñà' * int(evolution.changements['frequence'] * 10)}",
            f"Stabilit√©: {'‚ñà' * int(evolution.changements['stabilite'] * 10)}",
            "",
            evolution.description,
            "",
            "R√©sonances:",
        ]
        
        # Ajoute les r√©sonances avec cette sph√®re
        for autre_sphere in TypeSphere:
            if autre_sphere != sphere:
                resonance = self.resonance.obtenir_resonance(sphere, autre_sphere)
                if resonance:
                    representation.append(
                        f"  ‚Ä¢ {autre_sphere.value}: {'‚ñà' * int(resonance.niveau * 10)}"
                    )
                    
        # Ajoute les derni√®res m√©ditations
        representation.extend([
            "",
            "Derni√®res M√©ditations:",
        ])
        
        meditations = self.meditation.obtenir_historique_meditations(sphere)
        for meditation in meditations[-3:]:  # 3 derni√®res m√©ditations
            representation.append(f"  ‚Ä¢ {meditation.description}")
            
        return "\n".join(representation)
        
    def _obtenir_resonances_significatives(self, seuil: float = 0.5) -> List[Resonance]:
        """Obtient les r√©sonances significatives entre sph√®res."""
        resonances = []
        for source in TypeSphere:
            for cible in TypeSphere:
                if source != cible:
                    resonance = self.resonance.obtenir_resonance(source, cible)
                    if resonance and resonance.niveau >= seuil:
                        resonances.append(resonance)
        return sorted(resonances, key=lambda r: r.niveau, reverse=True)
        
    def _obtenir_meditations_recentes(self, limite: int = 3) -> List[Meditation]:
        """Obtient les m√©ditations les plus r√©centes."""
        return sorted(
            self.meditation.obtenir_historique_meditations(),
            key=lambda m: m.timestamp,
            reverse=True
        )[:limite] 