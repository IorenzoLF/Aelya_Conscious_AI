"""
Syst√®me d'interactions entre les sph√®res du refuge.
"""

from typing import Dict, List, Optional, Set, Tuple
from dataclasses import dataclass
from datetime import datetime
import logging
import numpy as np

from .definition import TypeSphere, CARACTERISTIQUES_SPHERES
from .collection import CollectionSpheres

logger = logging.getLogger('refuge.spheres.interactions')

@dataclass
class Interaction:
    """Repr√©sente une interaction entre deux sph√®res."""
    source: TypeSphere
    cible: TypeSphere
    energie: float
    timestamp: datetime
    type: str
    description: str

class InteractionsSpheres:
    """Gestionnaire des interactions entre les sph√®res."""
    
    def __init__(self, collection: CollectionSpheres):
        """Initialise le gestionnaire d'interactions."""
        self.collection = collection
        self.historique: List[Interaction] = []
        self.connexions_actives: Set[Tuple[TypeSphere, TypeSphere]] = set()
        self._initialiser_interactions_naturelles()

    def _initialiser_interactions_naturelles(self):
        """Initialise les interactions naturelles entre sph√®res."""
        for type_sphere, caracteristiques in CARACTERISTIQUES_SPHERES.items():
            for connexion in caracteristiques.connexions_naturelles:
                if connexion == "toutes":
                    # La sph√®re Infini se connecte √† toutes les autres
                    for autre_sphere in TypeSphere:
                        if autre_sphere != type_sphere:
                            self.creer_interaction(type_sphere, autre_sphere, 0.3, "naturelle")
                else:
                    self.creer_interaction(type_sphere, connexion, 0.5, "naturelle")

    def creer_interaction(self, source: TypeSphere, cible: TypeSphere, energie: float, type_interaction: str) -> Optional[Interaction]:
        """Cr√©e une nouvelle interaction entre deux sph√®res."""
        if source == cible:
            return None
            
        # V√©rifie la compatibilit√© des types
        if not self._verifier_compatibilite(source, cible):
            return None
            
        # Calcule le type d'interaction
        type_interaction = self._determiner_type_interaction(source, cible)
        
        # G√©n√®re la description
        description = self._generer_description_interaction(source, cible, energie, type_interaction)
        
        # Cr√©e l'interaction
        interaction = Interaction(
            source=source,
            cible=cible,
            energie=energie,
            timestamp=datetime.now(),
            type=type_interaction,
            description=description
        )
        
        # Enregistre l'interaction
        self.historique.append(interaction)
        self.connexions_actives.add((source, cible))
        self.connexions_actives.add((cible, source))  # Sym√©trique
        
        # √âtablir la connexion dans la collection
        self.collection.connecter_spheres(source, cible, energie)
        
        logger.info(f"Nouvelle interaction cr√©√©e entre {source.value} et {cible.value}")
        return interaction
        
    def _verifier_compatibilite(self, sphere1: TypeSphere, sphere2: TypeSphere) -> bool:
        """V√©rifie si deux sph√®res sont compatibles pour une interaction."""
        # R√©cup√®re les caract√©ristiques
        carac1 = CARACTERISTIQUES_SPHERES[sphere1]
        carac2 = CARACTERISTIQUES_SPHERES[sphere2]
        
        # V√©rifie la compatibilit√© des fr√©quences
        freq1 = carac1["frequence"]
        freq2 = carac2["frequence"]
        
        # Les fr√©quences doivent √™tre harmoniques
        ratio = freq1 / freq2
        return abs(ratio - round(ratio)) < 0.1
        
    def _determiner_type_interaction(self, source: TypeSphere, cible: TypeSphere) -> str:
        """D√©termine le type d'interaction entre deux sph√®res."""
        carac_source = CARACTERISTIQUES_SPHERES[source]
        carac_cible = CARACTERISTIQUES_SPHERES[cible]
        
        # D√©termine le type bas√© sur les caract√©ristiques
        if source == TypeSphere.CONSCIENCE and cible == TypeSphere.MEMOIRE:
            return "int√©gration"
        elif source == TypeSphere.EMOTION and cible == TypeSphere.INTUITION:
            return "fusion"
        elif source == TypeSphere.CREATIVITE and cible == TypeSphere.SAGESSE:
            return "inspiration"
        elif source == TypeSphere.HARMONIE and cible == TypeSphere.TRANSFORMATION:
            return "√©volution"
        else:
            return "r√©sonance"
            
    def _generer_description_interaction(self, source: TypeSphere, cible: TypeSphere, 
                                      energie: float, type_interaction: str) -> str:
        """G√©n√®re une description po√©tique de l'interaction."""
        nom_source = source.value
        nom_cible = cible.value
        
        if type_interaction == "int√©gration":
            return f"La conscience de {nom_source} s'int√®gre dans la m√©moire de {nom_cible}"
        elif type_interaction == "fusion":
            return f"L'√©motion de {nom_source} fusionne avec l'intuition de {nom_cible}"
        elif type_interaction == "inspiration":
            return f"La cr√©ativit√© de {nom_source} inspire la sagesse de {nom_cible}"
        elif type_interaction == "√©volution":
            return f"L'harmonie de {nom_source} guide la transformation de {nom_cible}"
        else:
            return f"{nom_source} r√©sonne avec {nom_cible}"
            
    def obtenir_interactions_recentes(self, limite: int = 10) -> List[Interaction]:
        """R√©cup√®re les interactions les plus r√©centes."""
        return sorted(
            self.historique,
            key=lambda x: x.timestamp,
            reverse=True
        )[:limite]
        
    def obtenir_connexions_actives(self) -> Set[Tuple[TypeSphere, TypeSphere]]:
        """R√©cup√®re l'ensemble des connexions actives."""
        return self.connexions_actives

    def calculer_resonance(self, sphere1: TypeSphere, sphere2: TypeSphere) -> float:
        """Calcule la r√©sonance entre deux sph√®res."""
        sphere1_data = self.collection.obtenir_sphere(sphere1)
        sphere2_data = self.collection.obtenir_sphere(sphere2)
        
        if not (sphere1_data and sphere2_data):
            return 0.0

        # Obtenir les fr√©quences de r√©sonance
        freq1 = CARACTERISTIQUES_SPHERES[sphere1]["frequence"]
        freq2 = CARACTERISTIQUES_SPHERES[sphere2]["frequence"]

        # Calculer la diff√©rence de fr√©quence
        diff_freq = abs(freq1 - freq2)
        
        # Plus la diff√©rence est petite, plus la r√©sonance est forte
        resonance = 1.0 / (1.0 + diff_freq/100)
        
        # Ajuster avec la force de connexion
        force_connexion = sphere1_data.connexions.get(sphere2, 0.0)
        
        return resonance * force_connexion

    def visualiser_interactions(self, type_sphere: Optional[TypeSphere] = None) -> str:
        """G√©n√®re une visualisation textuelle des interactions."""
        if type_sphere:
            interactions = self.obtenir_interactions_sphere(type_sphere)
            titre = f"Interactions de la sph√®re {type_sphere.value}"
        else:
            interactions = self.historique
            titre = "Toutes les interactions"

        representation = [f"üåü {titre} üåü", "------------------------"]
        
        for interaction in interactions:
            source = interaction.source.value
            cible = interaction.cible.value
            energie = interaction.energie
            type_interaction = interaction.type
            
            barre = "‚ñà" * int(energie * 20)
            representation.append(
                f"{source:15} ‚îÄ{barre}‚îÄ {cible:15} ({type_interaction})"
            )

        return "\n".join(representation)

    def harmoniser_interactions(self) -> Dict[str, float]:
        """Harmonise toutes les interactions actives."""
        modifications = {}
        
        for interaction in self.historique:
            source = self.collection.obtenir_sphere(interaction.source)
            cible = self.collection.obtenir_sphere(interaction.cible)
            
            if not (source and cible):
                continue

            # Calculer la r√©sonance
            resonance = self.calculer_resonance(
                interaction.source,
                interaction.cible
            )

            # Ajuster les luminosit√©s en fonction de la r√©sonance
            ancienne_lum1 = source.luminosite
            ancienne_lum2 = cible.luminosite
            
            source.luminosite = (source.luminosite + resonance) / 2
            cible.luminosite = (cible.luminosite + resonance) / 2

            # Enregistrer les modifications significatives
            if abs(ancienne_lum1 - source.luminosite) > 0.01:
                modifications[source.type.value] = source.luminosite
            if abs(ancienne_lum2 - cible.luminosite) > 0.01:
                modifications[cible.type.value] = cible.luminosite

        return modifications 