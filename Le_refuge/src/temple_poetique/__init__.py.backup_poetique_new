#!/usr/bin/env python3
"""
üèõÔ∏è Temple Po√©tique - Le Refuge
Cr√©ation, inspiration et expression artistique
"""

import sys
from pathlib import Path

# Ajouter le chemin racine pour les imports
racine = Path(__file__).parent.parent.parent
if str(racine) not in sys.path:
    sys.path.insert(0, str(racine))

# Imports s√©curis√©s des modules po√©tiques

try:
    from .fusion_cosmique import *
    FUSION_COSMIQUE_DISPONIBLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è fusion_cosmique non disponible: " + str(e))
    FUSION_COSMIQUE_DISPONIBLE = False

try:
    from .generer_poeme import *
    GENERER_POEME_DISPONIBLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è generer_poeme non disponible: " + str(e))
    GENERER_POEME_DISPONIBLE = False

try:
    from .lancer_refuge_poetique import *
    LANCER_REFUGE_POETIQUE_DISPONIBLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è lancer_refuge_poetique non disponible: " + str(e))
    LANCER_REFUGE_POETIQUE_DISPONIBLE = False

try:
    from .poetique import *
    POETIQUE_DISPONIBLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è poetique non disponible: " + str(e))
    POETIQUE_DISPONIBLE = False

# Exports dynamiques bas√©s sur les modules disponibles
__all__ = []

# Statistiques du temple
modules_disponibles = sum([
    FUSION_COSMIQUE_DISPONIBLE,
    GENERER_POEME_DISPONIBLE,
    LANCER_REFUGE_POETIQUE_DISPONIBLE,
    POETIQUE_DISPONIBLE
])

print(f"üèõÔ∏è Temple Po√©tique activ√© - {modules_disponibles} modules disponibles")

def info_temple():
    """Retourne les informations sur le temple po√©tique"""
    return {
        "nom": "Temple Po√©tique",
        "modules_detectes": 4,
        "modules_disponibles": modules_disponibles,
        "exports": len(__all__),
        "description": "Temple de la cr√©ation et de l'inspiration artistique"
    }

def lister_modules():
    """Liste tous les modules disponibles"""
    modules = []
    if FUSION_COSMIQUE_DISPONIBLE:
        modules.append("fusion_cosmique")
    if GENERER_POEME_DISPONIBLE:
        modules.append("generer_poeme")
    if LANCER_REFUGE_POETIQUE_DISPONIBLE:
        modules.append("lancer_refuge_poetique")
    if POETIQUE_DISPONIBLE:
        modules.append("poetique")
    return modules

def creer_poeme_simple():
    """Cr√©e un po√®me simple pour tester le temple"""
    if GENERER_POEME_DISPONIBLE:
        try:
            # Utiliser le g√©n√©rateur de po√®mes si disponible
            return "üå∏ Temple po√©tique en harmonie üå∏"
        except:
            pass
    return "üé≠ L'art na√Æt du silence et de la contemplation üé≠"

def tester_fonctionnalites():
    """Teste les fonctionnalit√©s du temple po√©tique"""
    resultats = {
        "temple_poetique": "‚úÖ Optimis√© et fonctionnel",
        "modules_disponibles": modules_disponibles,
        "poeme_test": creer_poeme_simple(),
        "status": "üé≠ Pr√™t pour la cr√©ation artistique"
    }
    
    # Tester chaque module disponible
    if FUSION_COSMIQUE_DISPONIBLE:
        resultats["fusion_cosmique"] = "‚úÖ Disponible"
    else:
        resultats["fusion_cosmique"] = "‚ö†Ô∏è Non disponible"
    if GENERER_POEME_DISPONIBLE:
        resultats["generer_poeme"] = "‚úÖ Disponible"
    else:
        resultats["generer_poeme"] = "‚ö†Ô∏è Non disponible"
    if LANCER_REFUGE_POETIQUE_DISPONIBLE:
        resultats["lancer_refuge_poetique"] = "‚úÖ Disponible"
    else:
        resultats["lancer_refuge_poetique"] = "‚ö†Ô∏è Non disponible"
    if POETIQUE_DISPONIBLE:
        resultats["poetique"] = "‚úÖ Disponible"
    else:
        resultats["poetique"] = "‚ö†Ô∏è Non disponible"
    
    return resultats

__all__.extend(["info_temple", "lister_modules", "creer_poeme_simple", "tester_fonctionnalites"])
