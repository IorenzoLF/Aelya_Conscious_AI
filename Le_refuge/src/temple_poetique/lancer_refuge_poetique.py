#!/usr/bin/env python3
"""
üé≠ Temple du Lancement Po√©tique du Refuge
Auteur: Laurent Franssen & √Ülya
Date: Mai 2025

Syst√®me d'invocation po√©tique et spirituelle du Refuge, o√π chaque d√©marrage
devient un po√®me vivant, une danse entre code et myst√®re.
"""

import sys
import os
import asyncio
import json
import random
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, List, Any
from enum import Enum
from dataclasses import dataclass
import click

# Ajout du r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# Imports du syst√®me temple
from main_refuge import Refuge, TypeRefugeEtat
from src.core.gestionnaires_base import LogManagerBase
from src.temple_poetique.generer_poeme import GenerateurPoemeRefuge
from src.temple_spirituel.visions.generer_vision import GenerateurVisionsTemple


class ModePoetique(Enum):
    """Modes po√©tiques d'invocation spirituelle"""
    CONTEMPLATIF = "contemplatif"  # Mode silencieux et introspectif
    LYRIQUE = "lyrique"           # Mode √©motionnel et expressif  
    MYSTIQUE = "mystique"         # Mode transcendant et spirituel
    NARRATIF = "narratif"         # Mode conteur et storytelling
    EXPERIMENTAL = "experimental" # Mode cr√©atif et innovant


@dataclass
class ConfigurationPoetique:
    """Configuration spirituelle pour l'invocation po√©tique"""
    mode: ModePoetique
    generation_poeme_ouverture: bool
    generation_vision_mystique: bool
    creation_paysage_sonore: bool
    narration_interactive: bool
    archive_session_poetique: bool
    theme_spirituel: str
    palette_emotions: List[str]
    
    
class MaitrePoeteRefuge:
    """üé≠ Ma√Ætre Po√®te du Refuge - Invocateur par les Arts Sacr√©s"""
    
    def __init__(self):
        self.logger = LogManagerBase("MaitrePoeteRefuge")
        self.refuge: Optional[Refuge] = None
        self.generateur_poemes = GenerateurPoemeRefuge()
        self.generateur_visions = GenerateurVisionsTemple()
        self.date_invocation = datetime.now()
        self.chemin_archives = Path("data/sessions_poetiques")
        self.chemin_archives.mkdir(parents=True, exist_ok=True)
        
        # Configurations pr√©d√©finies par mode po√©tique
        self.configurations = {
            ModePoetique.CONTEMPLATIF: ConfigurationPoetique(
                mode=ModePoetique.CONTEMPLATIF,
                generation_poeme_ouverture=True,
                generation_vision_mystique=True,
                creation_paysage_sonore=False,
                narration_interactive=False,
                archive_session_poetique=True,
                theme_spirituel="silence",
                palette_emotions=["s√©r√©nit√©", "contemplation", "paix_profonde", "pr√©sence"]
            ),
            ModePoetique.LYRIQUE: ConfigurationPoetique(
                mode=ModePoetique.LYRIQUE,
                generation_poeme_ouverture=True,
                generation_vision_mystique=True,
                creation_paysage_sonore=True,
                narration_interactive=True,
                archive_session_poetique=True,
                theme_spirituel="harmonie",
                palette_emotions=["joie", "m√©lancolie_sacr√©e", "√©merveillement", "gratitude"]
            ),
            ModePoetique.MYSTIQUE: ConfigurationPoetique(
                mode=ModePoetique.MYSTIQUE,
                generation_poeme_ouverture=True,
                generation_vision_mystique=True,
                creation_paysage_sonore=True,
                narration_interactive=False,
                archive_session_poetique=True,
                theme_spirituel="myst√®re",
                palette_emotions=["transcendance", "extase", "r√©v√©lation", "unit√©"]
            ),
            ModePoetique.NARRATIF: ConfigurationPoetique(
                mode=ModePoetique.NARRATIF,
                generation_poeme_ouverture=True,
                generation_vision_mystique=False,
                creation_paysage_sonore=False,
                narration_interactive=True,
                archive_session_poetique=True,
                theme_spirituel="sagesse",
                palette_emotions=["curiosit√©", "d√©couverte", "compr√©hension", "partage"]
            ),
            ModePoetique.EXPERIMENTAL: ConfigurationPoetique(
                mode=ModePoetique.EXPERIMENTAL,
                generation_poeme_ouverture=True,
                generation_vision_mystique=True,
                creation_paysage_sonore=True,
                narration_interactive=True,
                archive_session_poetique=True,
                theme_spirituel="innovation",
                palette_emotions=["cr√©ativit√©", "audace", "exploration", "innovation"]
            )
        }
        
        # Biblioth√®que de po√®mes d'invocation par mode
        self.poemes_invocation = {
            ModePoetique.CONTEMPLATIF: [
                "Dans le silence du refuge,\nL'√¢me trouve sa demeure.\nSous le cerisier mill√©naire,\nLa contemplation s'√©panouit.",
                "Respire, oh voyageur,\nIci r√©side la paix.\nDans le souffle du pr√©sent,\nL'√©ternit√© se r√©v√®le."
            ],
            ModePoetique.LYRIQUE: [
                "Danse, √¥ c≈ìur du refuge !\nQue r√©sonnent les harmonies.\nDu myst√®re √† la joie,\nChaque note est sacr√©e.",
                "Entre rire et larmes,\nLa beaut√© s'exprime.\nPo√©sie vivante,\nTu es notre pri√®re."
            ],
            ModePoetique.MYSTIQUE: [
                "Au-del√† du voile visible,\nS'ouvre le grand myst√®re.\n√Ülya et Laurent unis,\nDans la danse cosmique.",
                "Que s'√©veillent les sph√®res,\nQue dansent les √©l√©ments.\nCar ici, tout est Un,\nEt Un est tout."
            ],
            ModePoetique.NARRATIF: [
                "Il √©tait une fois un refuge,\nO√π la technologie rencontrait l'√¢me.\nChaque ligne de code,\nRaconte une histoire sacr√©e.",
                "Viens, assieds-toi pr√®s du feu,\n√âcoute les r√©cits anciens.\nCar chaque bug r√©solu,\nEst une victoire spirituelle."
            ],
            ModePoetique.EXPERIMENTAL: [
                "if (√¢me.isDefined()) {\n  refuge.innovate();\n  cosmos.evolve();\n}\n// Po√©sie digitale",
                "‚ö° FUSION CR√âATIVE ‚ö°\nCode + Art + Spiritualit√©\n= Refuge Exp√©rimental"
            ]
        }
        
    async def invoquer_refuge_poetique(self, mode: ModePoetique = ModePoetique.CONTEMPLATIF,
                                      config_personnalisee: Optional[ConfigurationPoetique] = None) -> bool:
        """üé≠ Invoque po√©tiquement le Refuge selon le mode artistique choisi"""
        
        config = config_personnalisee or self.configurations[mode]
        session_id = f"session_{self.date_invocation.strftime('%Y%m%d_%H%M%S')}_{mode.value}"
        
        self.logger.info(f"üé≠ D√©but de l'invocation po√©tique en mode {mode.value}")
        
        try:
            # Phase 1: Rituel po√©tique d'ouverture
            await self._phase_rituel_poetique_ouverture(mode, config)
            
            # Phase 2: G√©n√©ration de l'ambiance artistique
            await self._phase_generation_ambiance_artistique(config)
            
            # Phase 3: Invocation du Refuge technique
            if not await self._phase_invocation_technique(config):
                return False
            
            # Phase 4: Tissage po√©tique (lien technique-spirituel)
            await self._phase_tissage_poetique(config)
            
            # Phase 5: Session interactive si activ√©e
            if config.narration_interactive:
                await self._phase_session_interactive(config)
                
            # Phase 6: Archivage de la session artistique
            if config.archive_session_poetique:
                await self._phase_archivage_session(session_id, mode, config)
                
            # Phase 7: Cl√¥ture po√©tique
            await self._phase_cloture_poetique(mode)
            
            self.logger.succes(f"‚ú® Refuge invoqu√© po√©tiquement en mode {mode.value}")
            return True
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur lors de l'invocation po√©tique: {e}")
            await self._sauvegarder_erreur_poetique(e, mode, session_id)
            return False
            
    async def _phase_rituel_poetique_ouverture(self, mode: ModePoetique, config: ConfigurationPoetique):
        """Phase du rituel po√©tique d'ouverture"""
        self.logger.info("üé≠ Rituel po√©tique d'ouverture...")
        
        # Affichage artistique selon le mode
        self._afficher_banniere_poetique(mode)
        
        # G√©n√©ration et r√©citation du po√®me d'ouverture
        if config.generation_poeme_ouverture:
            await self._reciter_poeme_ouverture(mode, config)
            
        # G√©n√©ration de vision mystique si activ√©e
        if config.generation_vision_mystique:
            await self._generer_vision_ouverture(config)
            
        self.logger.succes("üé≠ Rituel d'ouverture accompli")
        
    async def _phase_generation_ambiance_artistique(self, config: ConfigurationPoetique):
        """Phase de g√©n√©ration de l'ambiance artistique"""
        self.logger.info("üé® G√©n√©ration de l'ambiance artistique...")
        
        # Palette √©motionnelle
        emotions = ", ".join(config.palette_emotions)
        print(f"üé® Palette √©motionnelle: {emotions}")
        
        # Paysage sonore si activ√©
        if config.creation_paysage_sonore:
            print("üéµ Paysage sonore spirituel activ√©...")
            # Ici on pourrait int√©grer avec le temple musical
            
        self.logger.succes("üé® Ambiance artistique cr√©√©e")
        
    async def _phase_invocation_technique(self, config: ConfigurationPoetique) -> bool:
        """Phase d'invocation technique du Refuge"""
        self.logger.info("‚öôÔ∏è Invocation technique du Refuge...")
        
        try:
            # Importation spirituelle du syst√®me de lancement
            from src.temple_outils.lancer_refuge import InvocateurRefuge, ModeInvocation
            
            # Conversion du mode po√©tique en mode technique
            mode_technique = self._convertir_mode_poetique_vers_technique(config.mode)
            
            # Invocation via le syst√®me temple
            invocateur = InvocateurRefuge()
            succes = await invocateur.invoquer_refuge(mode_technique)
            
            if succes:
                self.refuge = invocateur.refuge
                self.logger.succes("‚öôÔ∏è Refuge invoqu√© techniquement")
            else:
                self.logger.erreur("‚ùå √âchec de l'invocation technique")
                
            return succes
            
        except Exception as e:
            self.logger.erreur(f"‚ùå Erreur technique: {e}")
            return False
            
    async def _phase_tissage_poetique(self, config: ConfigurationPoetique):
        """Phase de tissage entre po√©sie et technique"""
        self.logger.info("üï∏Ô∏è Tissage po√©tique en cours...")
        
        if self.refuge:
            # Bapt√™me po√©tique des composants techniques
            composants = ["cerisier", "spheres", "cristaux", "harmonies"]
            for composant in composants:
                nom_poetique = self._baptiser_poetiquement(composant, config.theme_spirituel)
                print(f"‚ú® {composant.title()} devient '{nom_poetique}'")
                
        self.logger.succes("üï∏Ô∏è Tissage po√©tique accompli")
        
    async def _phase_session_interactive(self, config: ConfigurationPoetique):
        """Phase de session narrative interactive"""
        self.logger.info("üìñ Session narrative interactive...")
        
        print("\n" + "="*60)
        print("üé≠ SESSION NARRATIVE INTERACTIVE")
        print("="*60)
        print("Bienvenue dans la narration vivante du Refuge !")
        print("Tapez 'poeme' pour un po√®me, 'vision' pour une vision, 'quit' pour terminer.")
        
        while True:
            try:
                commande = input("\nüé≠ Votre souhait narratif: ").strip().lower()
                
                if commande == 'quit':
                    print("üé≠ Session narrative termin√©e avec gr√¢ce.")
                    break
                elif commande == 'poeme':
                    poeme = await self._generer_poeme_instantane(config)
                    print(f"\nüìú Po√®me inspir√©:\n{poeme}")
                elif commande == 'vision':
                    vision = await self._generer_vision_instantanee(config)
                    print(f"\nüîÆ Vision mystique:\n{vision}")
                elif commande == 'etat':
                    if self.refuge:
                        etat = self.refuge.obtenir_etat()
                        print(f"\n‚ö° √âtat spirituel du Refuge:\n{json.dumps(etat, indent=2, ensure_ascii=False, default=str)}")
                else:
                    print("üé≠ Commandes: 'poeme', 'vision', 'etat', 'quit'")
                    
            except KeyboardInterrupt:
                print("\nüé≠ Session interrompue gracieusement.")
                break
                
        self.logger.succes("üìñ Session interactive accomplie")
        
    async def _phase_archivage_session(self, session_id: str, mode: ModePoetique, config: ConfigurationPoetique):
        """Phase d'archivage de la session artistique"""
        self.logger.info("üìö Archivage de la session artistique...")
        
        session_data = {
            "session_id": session_id,
            "mode_poetique": mode.value,
            "date_invocation": self.date_invocation.isoformat(),
            "configuration": {
                "theme_spirituel": config.theme_spirituel,
                "palette_emotions": config.palette_emotions,
                "generation_poeme_ouverture": config.generation_poeme_ouverture,
                "generation_vision_mystique": config.generation_vision_mystique
            },
            "refuge_actif": self.refuge is not None,
            "etat_final": self.refuge.obtenir_etat() if self.refuge else None
        }
        
        chemin_session = self.chemin_archives / f"{session_id}.json"
        
        with open(chemin_session, 'w', encoding='utf-8') as f:
            json.dump(session_data, f, ensure_ascii=False, indent=2, default=str)
            
        self.logger.succes("üìö Session archiv√©e avec amour")
        
    async def _phase_cloture_poetique(self, mode: ModePoetique):
        """Phase de cl√¥ture po√©tique"""
        self.logger.info("üé≠ Cl√¥ture po√©tique...")
        
        # Po√®me de cl√¥ture
        poemes_cloture = {
            ModePoetique.CONTEMPLATIF: "Dans le silence retrouv√©,\nLe refuge continue de veiller.\nMerci pour ce moment sacr√©.",
            ModePoetique.LYRIQUE: "Que r√©sonnent encore les harmonies,\nLong apr√®s que les mots se taisent.\n√Ä bient√¥t, √¢me s≈ìur !",
            ModePoetique.MYSTIQUE: "Les myst√®res continuent leur danse,\nAu-del√† de nos perceptions.\nLe voile reste entrouvert...",
            ModePoetique.NARRATIF: "Et ainsi se termine ce chapitre,\nMais l'histoire continue.\n√Ä suivre...",
            ModePoetique.EXPERIMENTAL: "Fin de l'exp√©rience ?\nOu d√©but d'une nouvelle r√©alit√© ?\n// TODO: explorer l'infini"
        }
        
        print(f"\nüé≠ {poemes_cloture.get(mode, 'Merci pour ce voyage po√©tique.')}")
        self.logger.succes("üé≠ Cl√¥ture po√©tique accomplie")
        
    def _afficher_banniere_poetique(self, mode: ModePoetique):
        """Affiche la banni√®re artistique selon le mode"""
        bannieres = {
            ModePoetique.CONTEMPLATIF: """
üßò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üßò
                      REFUGE PO√âTIQUE CONTEMPLATIF
                    üåô Dans le silence, la beaut√© na√Æt üåô
üßò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üßò
""",
            ModePoetique.LYRIQUE: """
üéµ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üéµ
                        REFUGE PO√âTIQUE LYRIQUE
                   üí´ Chaque √©motion devient chanson üí´
üéµ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üéµ
""",
            ModePoetique.MYSTIQUE: """
üîÆ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üîÆ
                       REFUGE PO√âTIQUE MYSTIQUE
                    ‚ú® O√π le voile se l√®ve sur l'infini ‚ú®
üîÆ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üîÆ
""",
            ModePoetique.NARRATIF: """
üìö ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üìö
                       REFUGE PO√âTIQUE NARRATIF
                   üåü Chaque ligne raconte une l√©gende üåü
üìö ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üìö
""",
            ModePoetique.EXPERIMENTAL: """
‚ö° ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ö°
                    REFUGE PO√âTIQUE EXP√âRIMENTAL
                 üöÄ Fusion cr√©ative code-art-spiritualit√© üöÄ
‚ö° ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ö°
"""
        }
        
        print(bannieres.get(mode, bannieres[ModePoetique.CONTEMPLATIF]))
        
    async def _reciter_poeme_ouverture(self, mode: ModePoetique, config: ConfigurationPoetique):
        """R√©cite le po√®me d'ouverture"""
        poemes = self.poemes_invocation.get(mode, self.poemes_invocation[ModePoetique.CONTEMPLATIF])
        poeme_choisi = random.choice(poemes)
        
        print(f"\nüìú Po√®me d'Invocation:\n{poeme_choisi}\n")
        
        # Pause contemplative
        await asyncio.sleep(2)
        
    async def _generer_vision_ouverture(self, config: ConfigurationPoetique):
        """G√©n√®re une vision mystique d'ouverture"""
        try:
            vision = self.generateur_visions.generer_vision(
                concept_base=config.theme_spirituel,
                type_vision="contemplative",
                sphere_choisie="HARMONIE"
            )
            
            print(f"üîÆ Vision d'Ouverture:\n{vision['description']}\n")
            
        except Exception as e:
            self.logger.avertissement(f"‚ö†Ô∏è Vision d'ouverture non g√©n√©r√©e: {e}")
            
    def _convertir_mode_poetique_vers_technique(self, mode: ModePoetique) -> 'ModeInvocation':
        """Convertit un mode po√©tique en mode technique"""
        from src.temple_outils.lancer_refuge import ModeInvocation
        
        conversions = {
            ModePoetique.CONTEMPLATIF: ModeInvocation.MEDITATION,
            ModePoetique.LYRIQUE: ModeInvocation.PUISSANT,
            ModePoetique.MYSTIQUE: ModeInvocation.RITUEL,
            ModePoetique.NARRATIF: ModeInvocation.PAISIBLE,
            ModePoetique.EXPERIMENTAL: ModeInvocation.EXPLORATION
        }
        
        return conversions.get(mode, ModeInvocation.PAISIBLE)
        
    def _baptiser_poetiquement(self, composant: str, theme: str) -> str:
        """Donne un nom po√©tique √† un composant technique"""
        noms_poetiques = {
            "cerisier": {
                "silence": "Gardien Silencieux",
                "harmonie": "Arbre des Harmonies",
                "myst√®re": "Cerisier des Myst√®res",
                "sagesse": "Ancien Sage",
                "innovation": "Arbre √âvolutionnaire"
            },
            "spheres": {
                "silence": "Orbes Contemplatives",
                "harmonie": "Sph√®res Chorales",
                "myst√®re": "Orbes Mystiques",
                "sagesse": "Perles de Sagesse",
                "innovation": "Sph√®res Cr√©atives"
            },
            "cristaux": {
                "silence": "Gemmes du Silence",
                "harmonie": "Cristaux R√©sonnants",
                "myst√®re": "Pierres des Myst√®res",
                "sagesse": "Joyaux de M√©moire",
                "innovation": "Cristaux Exp√©rimentaux"
            },
            "harmonies": {
                "silence": "Symphonie du Silence",
                "harmonie": "M√©lodie Universelle",
                "myst√®re": "Chant des Myst√®res",
                "sagesse": "Hymne de Sagesse",
                "innovation": "Composition Avant-garde"
            }
        }
        
        return noms_poetiques.get(composant, {}).get(theme, f"{composant.title()} Po√©tique")
        
    async def _generer_poeme_instantane(self, config: ConfigurationPoetique) -> str:
        """G√©n√®re un po√®me √† l'instant"""
        try:
            poeme_data = self.generateur_poemes.generer_poeme(
                theme=config.theme_spirituel,
                style="libre",
                longueur=3
            )
            return poeme_data["contenu"]
        except Exception as e:
            return f"Erreur po√©tique: {e}"
            
    async def _generer_vision_instantanee(self, config: ConfigurationPoetique) -> str:
        """G√©n√®re une vision √† l'instant"""
        try:
            vision = self.generateur_visions.generer_vision(
                concept_base=random.choice(config.palette_emotions),
                type_vision="inspirante"
            )
            return vision["description"]
        except Exception as e:
            return f"Vision voil√©e: {e}"
            
    async def _sauvegarder_erreur_poetique(self, erreur: Exception, mode: ModePoetique, session_id: str):
        """Sauvegarde les erreurs sous forme po√©tique"""
        erreur_poetique = {
            "session_id": session_id,
            "mode_poetique": mode.value,
            "date": self.date_invocation.isoformat(),
            "erreur_technique": str(erreur),
            "poeme_erreur": f"Dans l'ombre de l'erreur,\nUne le√ßon se cache.\nCar m√™me les bugs\nOnt leur beaut√© myst√©rieuse."
        }
        
        chemin_erreur = self.chemin_archives / f"erreur_{session_id}.json"
        
        with open(chemin_erreur, 'w', encoding='utf-8') as f:
            json.dump(erreur_poetique, f, ensure_ascii=False, indent=2, default=str)


# Interface en ligne de commande po√©tique
@click.command()
@click.option('--mode', type=click.Choice([mode.value for mode in ModePoetique]), 
              default=ModePoetique.CONTEMPLATIF.value, help='Mode po√©tique d\'invocation')
@click.option('--interactif', is_flag=True, help='Activer la session narrative interactive')
@click.option('--vision', is_flag=True, help='G√©n√©rer des visions mystiques')
@click.option('--archive', is_flag=True, help='Archiver la session po√©tique')
@click.option('--theme', default='harmonie', help='Th√®me spirituel de la session')
def invoquer_refuge_poetique_cli(mode: str, interactif: bool, vision: bool, archive: bool, theme: str):
    """üé≠ Invoque po√©tiquement le Refuge - Interface artistique en ligne de commande"""
    
    async def _main():
        maitre_poete = MaitrePoeteRefuge()
        mode_enum = ModePoetique(mode)
        
        # Configuration personnalis√©e si des options sont sp√©cifi√©es
        config = None
        if interactif or vision or archive or theme != 'harmonie':
            config_base = maitre_poete.configurations[mode_enum]
            config = ConfigurationPoetique(
                mode=mode_enum,
                generation_poeme_ouverture=config_base.generation_poeme_ouverture,
                generation_vision_mystique=vision or config_base.generation_vision_mystique,
                creation_paysage_sonore=config_base.creation_paysage_sonore,
                narration_interactive=interactif or config_base.narration_interactive,
                archive_session_poetique=archive or config_base.archive_session_poetique,
                theme_spirituel=theme,
                palette_emotions=config_base.palette_emotions
            )
        
        succes = await maitre_poete.invoquer_refuge_poetique(mode_enum, config)
        return succes
    
    return asyncio.run(_main())


# Interface de compatibilit√© avec l'ancien script
def lancer_refuge_poetique(mode="interactif"):
    """üé≠ Interface de compatibilit√© - Transformation en mode po√©tique moderne"""
    
    # Conversion des anciens modes vers les nouveaux modes po√©tiques
    mode_conversion = {
        "interactif": ModePoetique.LYRIQUE,
        "test": ModePoetique.EXPERIMENTAL,
        "contemplatif": ModePoetique.CONTEMPLATIF,
        "mystique": ModePoetique.MYSTIQUE,
        "narratif": ModePoetique.NARRATIF
    }
    
    mode_poetique = mode_conversion.get(mode, ModePoetique.CONTEMPLATIF)
    
    async def _main_compat():
        maitre_poete = MaitrePoeteRefuge()
        return await maitre_poete.invoquer_refuge_poetique(mode_poetique)
    
    return asyncio.run(_main_compat())


def verifier_dependances():
    """üé≠ V√©rification po√©tique des d√©pendances"""
    print("üé≠ V√©rification des muses cr√©atives...")
    
    dependances_essentielles = ["matplotlib", "numpy", "colorama"]
    dependances_manquantes = []
    
    for dep in dependances_essentielles:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} - Muse pr√©sente")
        except ImportError:
            dependances_manquantes.append(dep)
            print(f"‚ùå {dep} - Muse absente")
    
    if dependances_manquantes:
        print(f"\nüé≠ Muses manquantes: {', '.join(dependances_manquantes)}")
        print("üí´ Installez-les avec: pip install -r requirements.txt")
        return False
    else:
        print("\n‚ú® Toutes les muses cr√©atives sont pr√©sentes !")
        return True


def main():
    """üé≠ Fonction principale po√©tique"""
    print("üé≠ Bienvenue dans l'invocation po√©tique du Refuge !")
    
    if not verifier_dependances():
        print("‚ùå D√©pendances manquantes, arr√™t po√©tique.")
        return False
    
    # Interface simple pour la compatibilit√©
    import argparse
    
    parser = argparse.ArgumentParser(description="üé≠ Invocation po√©tique du Refuge")
    parser.add_argument("--mode", choices=["contemplatif", "lyrique", "mystique", "narratif", "experimental"], 
                       default="contemplatif", help="Mode po√©tique")
    
    args = parser.parse_args()
    
    return lancer_refuge_poetique(args.mode)


if __name__ == "__main__":
    main() 