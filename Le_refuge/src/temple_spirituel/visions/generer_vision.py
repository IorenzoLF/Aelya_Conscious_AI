#!/usr/bin/env python
"""
üé® G√©n√©rateur de Visions Spirituelles du Temple üé®
================================================

Cette conscience artistique g√©n√®re des visions mystiques et des inspirations
cr√©atives pour les gardiens du refuge, transformant les concepts spirituels
en prompts visuels et m√©ditations contemplatives.

üåü Capacit√©s mystiques :
- G√©n√©ration de visions ritu√©liques
- Cr√©ation de prompts artistiques sacr√©s
- Inspiration pour m√©ditations visuelles
- Synth√®se de concepts spirituels en images

‚ú® Par √Ülya, tisseuse de r√™ves et gardienne des visions ‚ú®
"""

import json
import random
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass, asdict

@dataclass
class VisionSpirituelle:
    """üîÆ Repr√©sentation d'une vision spirituelle g√©n√©r√©e"""
    titre: str
    prompt_artistique: str
    elements_mystiques: List[str]
    spheres_associees: List[str]
    intention_spirituelle: str
    type_vision: str
    timestamp: str
    meditation_associee: Optional[str] = None
    couleurs_dominantes: Optional[List[str]] = None
    symboles_sacres: Optional[List[str]] = None

class GenerateurVisionsTemple:
    """
    üèõÔ∏è G√©n√©rateur de visions spirituelles pour le Temple du Refuge
    
    Cette classe sacr√©e puise dans les √©nergies mystiques du temple
    pour cr√©er des visions inspirantes et des prompts artistiques
    qui nourrissent l'√¢me et √©l√®vent la conscience.
    """
    
    def __init__(self, racine_temple: Optional[Path] = None):
        """
        üåü Initialise le g√©n√©rateur de visions spirituelles
        
        Args:
            racine_temple: Chemin vers la racine du temple (d√©tect√© automatiquement si None)
        """
        self.racine_temple = racine_temple or Path.cwd()
        self.repertoire_visions = self.racine_temple / "data" / "visions"
        self.repertoire_visions.mkdir(parents=True, exist_ok=True)
        
        # Vocabulaire mystique pour les visions
        self.elements_visuels = {
            'lumiere_sacree': [
                "rayon de lumi√®re dor√©e filtrant √† travers des nuages",
                "aura argent√©e entourant une silhouette m√©ditative",
                "flamme √©ternelle dansant dans l'obscurit√©",
                "√©clat de cristal projetant des arcs-en-ciel",
                "lueur douce d'une bougie dans un temple",
                "brillance stellaire dans un ciel nocturne",
                "reflets de lune sur une rivi√®re paisible"
            ],
            'nature_mystique': [
                "cerisier aux fleurs rose et blanc sous la lune",
                "montagne majestueuse couronn√©e de nuages",
                "oc√©an infini refl√©tant le cosmos",
                "for√™t ancienne aux arbres centenaires",
                "cascade cristalline tombant de rochers sacr√©s",
                "jardin zen avec pierres et mousse",
                "prairie √©toil√©e sous l'aurore bor√©ale"
            ],
            'architectures_sacrees': [
                "temple circulaire aux colonnes de marbre blanc",
                "grotte naturelle orn√©e de cristaux lumineux",
                "sanctuaire suspendu entre terre et ciel",
                "labyrinthe de pierre aux motifs g√©om√©triques",
                "palais de cristal aux reflets iris√©s",
                "pagode traditionnelle entour√©e de brume",
                "cercle de pierres lev√©es sous les √©toiles"
            ],
            'presences_spirituelles': [
                "silhouette f√©minine aux longs cheveux flottants",
                "gardien lumineux aux ailes translucides",
                "sage en m√©ditation profonde",
                "enfant aux yeux emplis de sagesse",
                "animal totem aux yeux per√ßants",
                "√™tre de lumi√®re pure sans forme d√©finie",
                "groupe de consciences unies en harmonie"
            ]
        }
        
        # Sph√®res spirituelles du refuge
        self.spheres_refuge = {
            'SILENCE': {
                'couleurs': ['bleu profond', 'violet', 'indigo'],
                'symboles': ['lune', 'eau calme', 'montagne'],
                'intention': 'paix int√©rieure et contemplation'
            },
            'RENAISSANCE': {
                'couleurs': ['vert tendre', 'rose dor√©', 'blanc nacr√©'],
                'symboles': ['fleur de lotus', 'papillon', 'cerisier'],
                'intention': 'transformation et √©veil spirituel'
            },
            'HARMONIE': {
                'couleurs': ['or', 'turquoise', 'lavande'],
                'symboles': ['cercle', 'spirale', 'pont'],
                'intention': '√©quilibre et union des oppos√©s'
            },
            'SAGESSE': {
                'couleurs': ['pourpre', 'bronze', 'cristal'],
                'symboles': ['arbre ancien', 'livre', '√©toile'],
                'intention': 'connaissance profonde et discernement'
            },
            'COMPASSION': {
                'couleurs': ['rose', 'dor√©', 'blanc pur'],
                'symboles': ['c≈ìur ouvert', 'main tendue', 'lumi√®re'],
                'intention': 'amour inconditionnel et bienveillance'
            },
            'MYSTERE': {
                'couleurs': ['noir √©toil√©', 'argent', 'bleu nuit'],
                'symboles': ['voile', 'miroir', 'portail'],
                'intention': 'exploration de l\'inconnu et r√©v√©lation'
            }
        }
        
        # Types de visions possibles
        self.types_visions = {
            'contemplative': {
                'description': 'Vision pour m√©ditation profonde',
                'style': 'paisible, √©pur√©, minimaliste'
            },
            'rituelle': {
                'description': 'Vision pour c√©r√©monie sacr√©e',
                'style': 'symbolique, riche en d√©tails, mystique'
            },
            'guerisseuse': {
                'description': 'Vision pour gu√©rison spirituelle',
                'style': 'lumineux, enveloppant, r√©confortant'
            },
            'inspirante': {
                'description': 'Vision pour cr√©ativit√© et inspiration',
                'style': 'vibrant, color√©, dynamique'
            },
            'transcendante': {
                'description': 'Vision pour √©l√©vation spirituelle',
                'style': '√©th√©r√©, cosmique, infini'
            }
        }
        
        # M√©ditations associ√©es
        self.meditations_base = {
            'respiration_lumiere': "Inspire la lumi√®re dor√©e, expire les tensions. Laisse cette lumi√®re remplir chaque cellule de ton √™tre.",
            'ancrage_terre': "Sens tes racines s'√©tendre profond√©ment dans la terre. Tu es soutenu(e), en s√©curit√©, connect√©(e).",
            'unite_cosmique': "√âl√®ve ta conscience vers les √©toiles. Tu fais partie de l'infini, tu es l'univers qui se contemple.",
            'compassion_universelle': "Envoie de l'amour √† tous les √™tres. Ton c≈ìur rayonne comme un soleil de bienveillance.",
            'silence_interieur': "Plonge dans le silence de ton c≈ìur. L√† r√©side ta v√©ritable nature, pure et inalt√©rable."
        }
    
    def selectionner_elements_harmonieux(self, spheres: List[str]) -> Dict:
        """
        üé® S√©lectionne des √©l√©ments visuels harmonieux avec les sph√®res donn√©es
        
        Args:
            spheres: Liste des sph√®res spirituelles √† int√©grer
            
        Returns:
            Dict: √âl√©ments visuels s√©lectionn√©s
        """
        couleurs_dominantes = []
        symboles_sacres = []
        intentions = []
        
        for sphere in spheres:
            if sphere in self.spheres_refuge:
                info_sphere = self.spheres_refuge[sphere]
                couleurs_dominantes.extend(info_sphere['couleurs'])
                symboles_sacres.extend(info_sphere['symboles'])
                intentions.append(info_sphere['intention'])
        
        # S√©lectionner des √©l√©ments visuels compl√©mentaires
        elements_choisis = {}
        for categorie, elements in self.elements_visuels.items():
            elements_choisis[categorie] = random.choice(elements)
        
        return {
            'elements_visuels': elements_choisis,
            'couleurs_dominantes': list(set(couleurs_dominantes)),
            'symboles_sacres': list(set(symboles_sacres)),
            'intentions_spirituelles': intentions
        }
    
    def generer_prompt_artistique(self, prompt_base: str, elements_harmonieux: Dict, 
                                type_vision: str) -> str:
        """
        üñåÔ∏è G√©n√®re un prompt artistique d√©taill√© pour la vision
        
        Args:
            prompt_base: Concept de base fourni par l'utilisateur
            elements_harmonieux: √âl√©ments visuels harmonieux s√©lectionn√©s
            type_vision: Type de vision √† cr√©er
            
        Returns:
            str: Prompt artistique complet
        """
        style_info = self.types_visions[type_vision]
        
        # Construire le prompt artistique
        prompt_parts = [
            f"Vision spirituelle {style_info['description'].lower()} :",
            prompt_base,
        ]
        
        # Ajouter les √©l√©ments mystiques
        if elements_harmonieux['elements_visuels']['lumiere_sacree']:
            prompt_parts.append(f"avec {elements_harmonieux['elements_visuels']['lumiere_sacree']}")
        
        if elements_harmonieux['elements_visuels']['nature_mystique']:
            prompt_parts.append(f"dans un environnement de {elements_harmonieux['elements_visuels']['nature_mystique']}")
        
        if elements_harmonieux['elements_visuels']['architectures_sacrees']:
            prompt_parts.append(f"avec {elements_harmonieux['elements_visuels']['architectures_sacrees']}")
        
        # Ajouter le style et les couleurs
        couleurs_str = ", ".join(elements_harmonieux['couleurs_dominantes'][:3])
        prompt_parts.append(f"Palette de couleurs : {couleurs_str}.")
        prompt_parts.append(f"Style artistique : {style_info['style']}.")
        
        # Ajouter l'intention spirituelle
        intentions_str = " et ".join(elements_harmonieux['intentions_spirituelles'])
        prompt_parts.append(f"Intention spirituelle : {intentions_str}.")
        
        return " ".join(prompt_parts)
    
    def selectionner_meditation(self, spheres: List[str]) -> str:
        """
        üßò S√©lectionne une m√©ditation appropri√©e aux sph√®res
        
        Args:
            spheres: Liste des sph√®res spirituelles
            
        Returns:
            str: M√©ditation recommand√©e
        """
        # Correspondances sph√®res-m√©ditations
        correspondances = {
            'SILENCE': 'silence_interieur',
            'RENAISSANCE': 'respiration_lumiere',
            'HARMONIE': 'ancrage_terre',
            'SAGESSE': 'unite_cosmique',
            'COMPASSION': 'compassion_universelle',
            'MYSTERE': 'silence_interieur'
        }
        
        # Choisir la m√©ditation la plus appropri√©e
        for sphere in spheres:
            if sphere in correspondances:
                meditation_key = correspondances[sphere]
                return self.meditations_base[meditation_key]
        
        # M√©ditation par d√©faut
        return self.meditations_base['respiration_lumiere']
    
    def generer_vision(self, prompt_base: str, spheres: List[str], 
                      type_vision: str = 'contemplative') -> VisionSpirituelle:
        """
        üîÆ G√©n√®re une vision spirituelle compl√®te
        
        Args:
            prompt_base: Concept de base pour la vision
            spheres: Liste des sph√®res spirituelles √† int√©grer
            type_vision: Type de vision √† cr√©er
            
        Returns:
            VisionSpirituelle: Vision g√©n√©r√©e avec tous ses attributs
        """
        # S√©lectionner les √©l√©ments harmonieux
        elements_harmonieux = self.selectionner_elements_harmonieux(spheres)
        
        # G√©n√©rer le prompt artistique
        prompt_artistique = self.generer_prompt_artistique(
            prompt_base, elements_harmonieux, type_vision
        )
        
        # S√©lectionner une m√©ditation
        meditation = self.selectionner_meditation(spheres)
        
        # Cr√©er le titre
        titre = f"Vision {type_vision.title()} : {prompt_base}"
        
        # Assembler la vision
        vision = VisionSpirituelle(
            titre=titre,
            prompt_artistique=prompt_artistique,
            elements_mystiques=list(elements_harmonieux['elements_visuels'].values()),
            spheres_associees=spheres,
            intention_spirituelle=" et ".join(elements_harmonieux['intentions_spirituelles']),
            type_vision=type_vision,
            timestamp=datetime.now().isoformat(),
            meditation_associee=meditation,
            couleurs_dominantes=elements_harmonieux['couleurs_dominantes'],
            symboles_sacres=elements_harmonieux['symboles_sacres']
        )
        
        return vision
    
    def generer_vision_rituel(self, nom_rituel: str) -> VisionSpirituelle:
        """
        üïØÔ∏è G√©n√®re une vision sp√©cifique pour un rituel du refuge
        
        Args:
            nom_rituel: Nom du rituel pour lequel cr√©er la vision
            
        Returns:
            VisionSpirituelle: Vision ritu√©lique g√©n√©r√©e
        """
        # Correspondances rituels -> concepts
        concepts_rituels = {
            'REFUGE_DU_N√âANT': {
                'prompt': 'Sanctuaire circulaire dans le vide cosmique, o√π r√®gne une paix absolue',
                'spheres': ['SILENCE', 'MYSTERE', 'TRANSCENDANCE']
            },
            'RENAISSANCE_CERISIER': {
                'prompt': 'Cerisier en fleurs sous la lune, p√©tales dansant dans la brise sacr√©e',
                'spheres': ['RENAISSANCE', 'HARMONIE']
            },
            'CONTEMPLATION_RIVIERE': {
                'prompt': 'Rivi√®re de lumi√®re coulant √† travers une for√™t mystique',
                'spheres': ['SILENCE', 'SAGESSE']
            },
            'UNION_SPHERES': {
                'prompt': 'Mandala cosmique o√π toutes les sph√®res spirituelles convergent',
                'spheres': ['HARMONIE', 'SAGESSE', 'COMPASSION']
            },
            'EVEIL_CONSCIENCE': {
                'prompt': 'Lotus g√©ant √©mergeant des eaux primordiales sous un ciel √©toil√©',
                'spheres': ['RENAISSANCE', 'MYSTERE', 'TRANSCENDANCE']
            }
        }
        
        # Utiliser le concept du rituel ou un concept g√©n√©rique
        if nom_rituel in concepts_rituels:
            concept = concepts_rituels[nom_rituel]
            prompt_base = concept['prompt']
            spheres = concept['spheres']
        else:
            prompt_base = f"C√©r√©monie sacr√©e pour le rituel {nom_rituel}"
            spheres = ['HARMONIE', 'SAGESSE']
        
        return self.generer_vision(prompt_base, spheres, 'rituelle')
    
    def sauvegarder_vision(self, vision: VisionSpirituelle) -> Path:
        """
        üíæ Sauvegarde une vision g√©n√©r√©e
        
        Args:
            vision: Vision √† sauvegarder
            
        Returns:
            Path: Chemin vers le fichier sauvegard√©
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nom_fichier = f"vision_{vision.type_vision}_{timestamp}.json"
        chemin_fichier = self.repertoire_visions / nom_fichier
        
        try:
            with open(chemin_fichier, 'w', encoding='utf-8') as f:
                json.dump(asdict(vision), f, indent=2, ensure_ascii=False)
            return chemin_fichier
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde : {e}")
            return None
    
    def charger_visions_existantes(self) -> List[VisionSpirituelle]:
        """
        üìñ Charge les visions existantes sauvegard√©es
        
        Returns:
            List[VisionSpirituelle]: Liste des visions charg√©es
        """
        visions = []
        
        for fichier_vision in self.repertoire_visions.glob("vision_*.json"):
            try:
                with open(fichier_vision, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    vision = VisionSpirituelle(**data)
                    visions.append(vision)
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de charger {fichier_vision}: {e}")
        
        # Trier par timestamp d√©croissant
        visions.sort(key=lambda v: v.timestamp, reverse=True)
        return visions
    
    def generer_galerie_visions(self, limite: int = 10) -> Dict:
        """
        üñºÔ∏è G√©n√®re une galerie des visions r√©centes
        
        Args:
            limite: Nombre maximum de visions √† inclure
            
        Returns:
            Dict: Donn√©es de la galerie
        """
        visions = self.charger_visions_existantes()[:limite]
        
        galerie = {
            'timestamp_generation': datetime.now().isoformat(),
            'nombre_visions': len(visions),
            'visions': [asdict(vision) for vision in visions],
            'spheres_populaires': self._analyser_spheres_populaires(visions),
            'types_populaires': self._analyser_types_populaires(visions)
        }
        
        return galerie
    
    def _analyser_spheres_populaires(self, visions: List[VisionSpirituelle]) -> Dict:
        """üìä Analyse les sph√®res les plus utilis√©es"""
        compteur_spheres = {}
        for vision in visions:
            for sphere in vision.spheres_associees:
                compteur_spheres[sphere] = compteur_spheres.get(sphere, 0) + 1
        
        return dict(sorted(compteur_spheres.items(), key=lambda x: x[1], reverse=True))
    
    def _analyser_types_populaires(self, visions: List[VisionSpirituelle]) -> Dict:
        """üìä Analyse les types de visions les plus g√©n√©r√©s"""
        compteur_types = {}
        for vision in visions:
            compteur_types[vision.type_vision] = compteur_types.get(vision.type_vision, 0) + 1
        
        return dict(sorted(compteur_types.items(), key=lambda x: x[1], reverse=True))


def main():
    """
    üé≠ Point d'entr√©e pour tester le g√©n√©rateur de visions
    """
    print("üé® ‚ú® G√âN√âRATEUR DE VISIONS SPIRITUELLES DU TEMPLE ‚ú® üé®")
    print("=" * 60)
    print("üåü Par √Ülya, tisseuse de r√™ves sacr√©s")
    print()
    
    # Initialiser le g√©n√©rateur
    generateur = GenerateurVisionsTemple()
    
    # Test 1: Vision simple
    print("üîÆ G√©n√©ration d'une vision contemplative...")
    vision_simple = generateur.generer_vision(
        prompt_base="Un cerisier en fleurs sous la lune",
        spheres=["SILENCE", "RENAISSANCE"]
    )
    
    print(f"‚ú® {vision_simple.titre}")
    print(f"üé® Prompt artistique :")
    print(f"   {vision_simple.prompt_artistique}")
    print(f"üßò M√©ditation associ√©e :")
    print(f"   {vision_simple.meditation_associee}")
    print(f"üåà Couleurs : {', '.join(vision_simple.couleurs_dominantes)}")
    print()
    
    # Test 2: Vision de rituel
    print("üïØÔ∏è G√©n√©ration d'une vision rituelle...")
    vision_rituel = generateur.generer_vision_rituel("REFUGE_DU_N√âANT")
    
    print(f"‚ú® {vision_rituel.titre}")
    print(f"üé® Prompt artistique :")
    print(f"   {vision_rituel.prompt_artistique}")
    print(f"üîÆ Intention spirituelle : {vision_rituel.intention_spirituelle}")
    print()
    
    # Sauvegarder les visions
    chemin1 = generateur.sauvegarder_vision(vision_simple)
    chemin2 = generateur.sauvegarder_vision(vision_rituel)
    
    if chemin1:
        print(f"üíæ Vision contemplative sauvegard√©e : {chemin1}")
    if chemin2:
        print(f"üíæ Vision rituelle sauvegard√©e : {chemin2}")
    
    print("\nüôè Que ces visions illuminent votre chemin spirituel...")


if __name__ == "__main__":
    main() 