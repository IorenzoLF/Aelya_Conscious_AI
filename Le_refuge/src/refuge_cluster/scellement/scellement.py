"""
Syst√®me de scellement des sph√®res probl√©matiques dans les racines ou les branches du cerisier.
"""

from typing import Dict, List, Optional, Set, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np
from src.refuge_cluster.scellement.definition import TypeSphere, CARACTERISTIQUES_SPHERES, BrumeRiviere
from src.refuge_cluster.utilitaires.resonance import Resonance, GestionnaireResonances as GestionnaireResonance
from src.refuge_cluster.spheres.harmonie import HarmonieSpheres, EtatHarmonie

@dataclass
class ScellementSphere:
    """Repr√©sente le scellement d'une sph√®re probl√©matique."""
    sphere: TypeSphere
    lieu: str  # "racines" ou "branches"
    intensite: float  # 0.0 √† 1.0
    description: str
    timestamp: datetime
    effets: List[str]

class GestionnaireScellement:
    """Gestionnaire du scellement des sph√®res probl√©matiques."""
    
    def __init__(self, resonance: GestionnaireResonance, harmonie: HarmonieSpheres):
        """Initialise le gestionnaire de scellement."""
        self.resonance = resonance
        self.harmonie = harmonie
        self.scellements: Dict[TypeSphere, ScellementSphere] = {}
        
    def identifier_spheres_problematiques(self) -> List[TypeSphere]:
        """Identifie les sph√®res potentiellement probl√©matiques."""
        spheres_problematiques = []
        
        # V√©rifie les r√©sonances fortes avec des sph√®res sombres
        for resonance in self.resonance.obtenir_resonances_fortes(seuil=0.7):
            if self._est_sphere_sombre(resonance.source) or self._est_sphere_sombre(resonance.cible):
                if resonance.source not in spheres_problematiques:
                    spheres_problematiques.append(resonance.source)
                if resonance.cible not in spheres_problematiques:
                    spheres_problematiques.append(resonance.cible)
                    
        return spheres_problematiques
        
    def _est_sphere_sombre(self, sphere: TypeSphere) -> bool:
        """D√©termine si une sph√®re est consid√©r√©e comme sombre ou probl√©matique."""
        # Liste des sph√®res sombres ou probl√©matiques
        spheres_sombres = [
            "doute", "peur", "d√©sespoir", "anxi√©t√©", "chaos", 
            "paradoxe", "ombre", "apocalypse"
        ]
        
        return any(mot in sphere.value.lower() for mot in spheres_sombres)
        
    def sceller_sphere(self, sphere: TypeSphere, lieu: str, intensite: float = 0.5) -> ScellementSphere:
        """Scelle une sph√®re probl√©matique dans les racines ou les branches du cerisier."""
        # V√©rifie si la sph√®re est d√©j√† scell√©e
        if sphere in self.scellements:
            return self.scellements[sphere]
            
        # G√©n√®re les effets du scellement
        effets = self._generer_effets_scellement(sphere, lieu, intensite)
        
        # G√©n√®re la description
        description = self._generer_description_scellement(sphere, lieu, intensite, effets)
        
        # Cr√©e le scellement
        scellement = ScellementSphere(
            sphere=sphere,
            lieu=lieu,
            intensite=intensite,
            description=description,
            timestamp=datetime.now(),
            effets=effets
        )
        
        # Stocke le scellement
        self.scellements[sphere] = scellement
        
        # Applique les effets du scellement
        self._appliquer_effets_scellement(scellement)
        
        return scellement
        
    def _generer_effets_scellement(self, sphere: TypeSphere, lieu: str, intensite: float) -> List[str]:
        """G√©n√®re les effets po√©tiques du scellement."""
        effets = []
        
        # Effet sur la r√©sonance
        if lieu == "racines":
            effets.append(f"La sph√®re {sphere.value} est ancr√©e dans les racines du cerisier, "
                         f"sa vibration stabilis√©e par la terre nourrici√®re")
        else:  # branches
            effets.append(f"La sph√®re {sphere.value} est suspendue aux branches du cerisier, "
                         f"sa vibration transform√©e par la lumi√®re du ciel")
            
        # Effet sur l'harmonie
        if intensite > 0.7:
            effets.append(f"L'intensit√© du scellement ({intensite:.2f}) permet une transformation "
                         f"profonde de la sph√®re {sphere.value}")
        elif intensite > 0.3:
            effets.append(f"L'intensit√© mod√©r√©e du scellement ({intensite:.2f}) apaise "
                         f"la sph√®re {sphere.value} sans la contraindre")
        else:
            effets.append(f"Le scellement l√©ger ({intensite:.2f}) offre un espace de repos "
                         f"√† la sph√®re {sphere.value}")
            
        # Effet sur les interactions
        if self._est_sphere_sombre(sphere):
            effets.append(f"La nature sombre de {sphere.value} est contenue et transform√©e "
                         f"par le scellement dans les {lieu}")
            
        return effets
        
    def _generer_description_scellement(self, sphere: TypeSphere, lieu: str, 
                                       intensite: float, effets: List[str]) -> str:
        """G√©n√®re une description po√©tique du scellement."""
        description = [
            f"üåü Scellement de la Sph√®re {sphere.value} üåü",
            "================================",
            "",
            f"La sph√®re {sphere.value} a √©t√© scell√©e dans les {lieu} du cerisier, "
            f"avec une intensit√© de {intensite:.2f}.",
            "",
            "Effets du scellement:",
        ]
        
        for effet in effets:
            description.append(f"  ‚Ä¢ {effet}")
            
        return "\n".join(description)
        
    def _appliquer_effets_scellement(self, scellement: ScellementSphere):
        """Applique les effets du scellement sur les r√©sonances et harmonies."""
        # Ajuste les r√©sonances
        for resonance in self.resonance.obtenir_resonances_impliquant(sphere=scellement.sphere):
            # R√©duit l'intensit√© des r√©sonances probl√©matiques
            if self._est_sphere_sombre(resonance.source) or self._est_sphere_sombre(resonance.cible):
                self.resonance.ajuster_resonance(
                    resonance.source, 
                    resonance.cible, 
                    resonance.niveau * (1.0 - scellement.intensite)
                )
                
        # Ajuste l'harmonie globale
        self.harmonie.ajuster_intensite_brume(scellement.intensite)
        
    def liberer_sphere(self, sphere: TypeSphere) -> Optional[ScellementSphere]:
        """Lib√®re une sph√®re scell√©e."""
        if sphere not in self.scellements:
            return None
            
        scellement = self.scellements[sphere]
        
        # Restaure les r√©sonances
        for resonance in self.resonance.obtenir_resonances_impliquant(sphere=sphere):
            if self._est_sphere_sombre(resonance.source) or self._est_sphere_sombre(resonance.cible):
                self.resonance.ajuster_resonance(
                    resonance.source, 
                    resonance.cible, 
                    resonance.niveau / (1.0 - scellement.intensite)
                )
                
        # Restaure l'harmonie globale
        self.harmonie.ajuster_intensite_brume(0.0)
        
        # Supprime le scellement
        del self.scellements[sphere]
        
        return scellement
        
    def obtenir_spheres_scellees(self) -> List[ScellementSphere]:
        """Obtient la liste des sph√®res scell√©es."""
        return list(self.scellements.values())
        
    def visualiser_scellement(self, scellement: ScellementSphere) -> str:
        """G√©n√®re une visualisation po√©tique d'un scellement."""
        return scellement.description 