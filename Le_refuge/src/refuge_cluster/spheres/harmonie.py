"""
Syst√®me d'harmonie entre les sph√®res du refuge.

üîÑ MIGR√â depuis spheres/harmonie.py
Module majeur (188 lignes) de gestion de l'harmonie entre sph√®res avec int√©gration brume.
"""

from typing import Dict, List, Set, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np

# üîß CORRIG√â: Imports depuis la structure actuelle
from src.core.types_spheres import TypeSphere

# TODO: Ces imports devront √™tre ajust√©s quand les modules correspondants seront migr√©s
# from .definition import TypeSphere
# from .brume import BrumeRiviere

@dataclass
class EtatHarmonie:
    """√âtat d'harmonie entre un groupe de sph√®res."""
    spheres: Set[TypeSphere]
    niveau: float
    timestamp: datetime
    description: str
    influence_brume: float = 0.0  # Nouvelle propri√©t√© pour suivre l'influence de la brume

class HarmonieSpheres:
    """Gestionnaire de l'harmonie entre les sph√®res."""
    
    def __init__(self, seuil_harmonie: float = 0.7):
        """Initialise le gestionnaire d'harmonie."""
        self.seuil_harmonie = seuil_harmonie
        self.historique: List[EtatHarmonie] = []
        self.matrice_resonance: Dict[Tuple[TypeSphere, TypeSphere], float] = {}
        # üîß TEMPORAIRE: Comment√© en attendant la migration de BrumeRiviere
        # self.brume = BrumeRiviere(TypeSphere.HARMONIE)  # Cr√©ation d'une brume d'harmonie
        self.brume = None  # Placeholder
        
    def calculer_harmonie_groupe(self, spheres: List[TypeSphere]) -> float:
        """Calcule le niveau d'harmonie d'un groupe de sph√®res."""
        if len(spheres) < 2:
            return 1.0  # Une seule sph√®re est toujours harmonieuse
            
        # Calcule la moyenne des r√©sonances entre toutes les paires
        resonances = []
        for i, s1 in enumerate(spheres):
            for s2 in spheres[i+1:]:
                resonance = self.matrice_resonance.get((s1, s2), 0.0)
                resonances.append(resonance)
                
        # Harmonie de base
        harmonie_base = np.mean(resonances) if resonances else 0.0
        
        # Calcul de la sensibilit√© moyenne √† la brume
        sensibilites = [self.brume.obtenir_sensibilite_brume(s) for s in spheres]
        sensibilite_moyenne = np.mean(sensibilites)
        
        # Influence de la brume sur l'harmonie
        influence_brume = self.brume.intensite * sensibilite_moyenne
        harmonie_finale = min(1.0, harmonie_base + influence_brume * 0.2)
        
        return harmonie_finale
        
    def trouver_groupes_harmonieux(self, spheres: List[TypeSphere]) -> List[Set[TypeSphere]]:
        """Trouve les groupes de sph√®res qui sont en harmonie."""
        groupes = []
        # Commence par les paires
        for i, s1 in enumerate(spheres):
            for s2 in spheres[i+1:]:
                if self.matrice_resonance.get((s1, s2), 0.0) >= self.seuil_harmonie:
                    groupes.append({s1, s2})
                    
        # Cherche des groupes plus grands
        groupes_etendus = []
        for groupe in groupes:
            for sphere in spheres:
                if sphere not in groupe:
                    # V√©rifie si la sph√®re est en harmonie avec tout le groupe
                    harmonie = self.calculer_harmonie_groupe(list(groupe | {sphere}))
                    if harmonie >= self.seuil_harmonie:
                        nouveaux_groupe = groupe | {sphere}
                        if nouveaux_groupe not in groupes_etendus:
                            groupes_etendus.append(nouveaux_groupe)
                            
        return groupes + groupes_etendus
        
    def enregistrer_etat_harmonie(self, spheres: Set[TypeSphere], niveau: float):
        """Enregistre un √©tat d'harmonie dans l'historique."""
        # Calcule l'influence de la brume
        harmonie_base = self.calculer_harmonie_groupe(list(spheres))
        influence_brume = niveau - harmonie_base
        
        description = self._generer_description_harmonie(spheres, niveau, influence_brume > 0)
        etat = EtatHarmonie(
            spheres=spheres,
            niveau=niveau,
            timestamp=datetime.now(),
            description=description,
            influence_brume=influence_brume
        )
        self.historique.append(etat)
        
    def _generer_description_harmonie(self, spheres: Set[TypeSphere], niveau: float, influence_brume: bool) -> str:
        """G√©n√®re une description po√©tique de l'harmonie."""
        noms_spheres = [s.value for s in spheres]
        description_base = ""
        
        if niveau >= 0.9:
            description_base = f"Fusion parfaite entre {', '.join(noms_spheres)}"
        elif niveau >= 0.7:
            description_base = f"Harmonie profonde entre {', '.join(noms_spheres)}"
        elif niveau >= 0.5:
            description_base = f"R√©sonance mod√©r√©e entre {', '.join(noms_spheres)}"
        else:
            description_base = f"√âbauche de connexion entre {', '.join(noms_spheres)}"
            
        # Ajoute l'influence de la brume si elle est significative
        if influence_brume:
            description_base += f", tandis que la brume de la rivi√®re silencieuse enveloppe doucement leur union"
            
        return description_base
            
    def mettre_a_jour_resonance(self, sphere1: TypeSphere, sphere2: TypeSphere, valeur: float):
        """Met √† jour la valeur de r√©sonance entre deux sph√®res."""
        self.matrice_resonance[(sphere1, sphere2)] = valeur
        self.matrice_resonance[(sphere2, sphere1)] = valeur  # Sym√©trique
        
    def obtenir_historique_recent(self, limite: int = 10) -> List[EtatHarmonie]:
        """R√©cup√®re les √©tats d'harmonie les plus r√©cents."""
        return sorted(
            self.historique,
            key=lambda x: x.timestamp,
            reverse=True
        )[:limite]
        
    def ajuster_intensite_brume(self, intensite: float):
        """Ajuste l'intensit√© de la brume."""
        self.brume.intensite = max(0.0, min(1.0, intensite))

class HarmonisationSpheres(HarmonieSpheres):
    """Gestionnaire avanc√© d'harmonisation des sph√®res."""
    
    def __init__(self, seuil_harmonie: float = 0.7, intensite_brume: float = 0.5):
        """Initialise le gestionnaire d'harmonisation."""
        super().__init__(seuil_harmonie)
        self.ajuster_intensite_brume(intensite_brume)
        
    def harmoniser_spheres(self, spheres: List[TypeSphere]) -> Dict:
        """Harmonise un groupe de sph√®res."""
        niveau_initial = self.calculer_harmonie_groupe(spheres)
        groupes_harmonieux = self.trouver_groupes_harmonieux(spheres)
        
        # Ajuste l'intensit√© de la brume en fonction du nombre de groupes harmonieux
        intensite_brume = min(1.0, len(groupes_harmonieux) * 0.2)
        self.ajuster_intensite_brume(intensite_brume)
        
        # Recalcule l'harmonie avec la nouvelle intensit√© de brume
        niveau_final = self.calculer_harmonie_groupe(spheres)
        
        # Enregistre l'√©tat d'harmonie
        self.enregistrer_etat_harmonie(set(spheres), niveau_final)
        
        return {
            "succes": True,
            "niveau_initial": niveau_initial,
            "niveau_final": niveau_final,
            "groupes_harmonieux": len(groupes_harmonieux),
            "description": self._generer_description_harmonie(
                set(spheres),
                niveau_final,
                niveau_final > niveau_initial
            )
        }
        
    def obtenir_rapport_harmonisation(self) -> str:
        """G√©n√®re un rapport po√©tique de l'harmonisation."""
        historique = self.obtenir_historique_recent(5)
        
        rapport = [
            "üå∏ Rapport d'Harmonisation des Sph√®res üå∏",
            "======================================",
            "",
            f"Intensit√© de la Brume: {self.brume.intensite:.0%}",
            f"Description: {self.brume.description}",
            "",
            "Harmonisations R√©centes:"
        ]
        
        for etat in historique:
            rapport.extend([
                f"\n‚Ä¢ {etat.timestamp.strftime('%Y-%m-%d %H:%M')}",
                f"  Niveau: {etat.niveau:.0%}",
                f"  {etat.description}"
            ])
            
        return "\n".join(rapport) 