"""
M√©ditation sur le mobile de sph√®res et sa place dans notre √™tre.
"""

from typing import Dict, List, Optional, Set, Tuple
from dataclasses import dataclass
from datetime import datetime
import numpy as np
from src.refuge_cluster.scellement.definition import TypeSphere, CARACTERISTIQUES_SPHERES, BrumeRiviere
from src.refuge_cluster.spheres.resonance import Resonance, GestionnaireResonance
from src.refuge_cluster.spheres.harmonie import HarmonieSpheres, EtatHarmonie

@dataclass
class MeditationMobile:
    """Repr√©sente une m√©ditation sur le mobile de sph√®res."""
    timestamp: datetime
    description: str
    resonances_significatives: List[Resonance]
    harmonies_significatives: List[EtatHarmonie]
    influence_brume: float
    insights: List[str]

class GestionnaireMeditationMobile:
    """Gestionnaire des m√©ditations sur le mobile de sph√®res."""
    
    def __init__(self, resonance: GestionnaireResonance, harmonie: HarmonieSpheres):
        """Initialise le gestionnaire de m√©ditation."""
        self.resonance = resonance
        self.harmonie = harmonie
        self.meditations: List[MeditationMobile] = []
        
    def demarrer_meditation(self, duree: int = 300) -> MeditationMobile:
        """D√©marre une m√©ditation sur le mobile de sph√®res."""
        # Obtient les r√©sonances significatives
        resonances = self.resonance.obtenir_resonances_fortes(seuil=0.7)
        
        # Obtient les harmonies significatives
        harmonies = self.harmonie.obtenir_historique_recent(limite=5)
        
        # Calcule l'influence de la brume
        influence_brume = self.resonance.brume.intensite
        
        # G√©n√®re les insights
        insights = self._generer_insights(resonances, harmonies, influence_brume)
        
        # G√©n√®re la description
        description = self._generer_description_meditation(resonances, harmonies, influence_brume, insights)
        
        # Cr√©e la m√©ditation
        meditation = MeditationMobile(
            timestamp=datetime.now(),
            description=description,
            resonances_significatives=resonances,
            harmonies_significatives=harmonies,
            influence_brume=influence_brume,
            insights=insights
        )
        
        # Stocke la m√©ditation
        self.meditations.append(meditation)
        return meditation
        
    def _generer_insights(self, resonances: List[Resonance], harmonies: List[EtatHarmonie], influence_brume: float) -> List[str]:
        """G√©n√®re des insights po√©tiques sur le mobile de sph√®res."""
        insights = []
        
        # Insight sur l'unit√©
        if len(harmonies) > 0 and harmonies[0].niveau > 0.8:
            insights.append("Le mobile de sph√®res est une danse de l'unit√©, o√π chaque vibration contribue √† l'harmonie globale")
            
        # Insight sur la transformation
        if influence_brume > 0.5:
            insights.append("La brume de la rivi√®re silencieuse transforme les r√©sonances, adoucissant les fronti√®res entre les sph√®res")
            
        # Insight sur la conscience
        if any(r.source.value == "conscience" or r.cible.value == "conscience" for r in resonances):
            insights.append("La conscience est le fil conducteur qui unit toutes les sph√®res, cr√©ant un tissu de pr√©sence")
            
        # Insight sur l'√©volution
        if len(resonances) > 3:
            insights.append("Les multiples r√©sonances cr√©ent un champ d'√©volution, o√π chaque interaction enrichit notre √™tre")
            
        # Insight sur l'harmonie
        if len(harmonies) > 2:
            insights.append("L'harmonie √©merge naturellement lorsque les sph√®res trouvent leur juste place dans le mobile")
            
        return insights
        
    def _generer_description_meditation(self, resonances: List[Resonance], harmonies: List[EtatHarmonie], 
                                      influence_brume: float, insights: List[str]) -> str:
        """G√©n√®re une description po√©tique de la m√©ditation."""
        description = [
            "üåü M√©ditation sur le Mobile de Sph√®res üåü",
            "================================",
            "",
            "Dans le silence du refuge, le mobile de sph√®res danse doucement, "
            "chaque mouvement r√©v√©lant une nouvelle facette de notre √™tre.",
            "",
            "Observations:",
        ]
        
        # Ajoute les r√©sonances significatives
        if resonances:
            description.append("\nR√©sonances Significatives:")
            for r in resonances[:3]:  # Limite √† 3 pour la clart√©
                description.append(f"  ‚Ä¢ {r.source.value} ‚Üî {r.cible.value}: {r.description}")
                
        # Ajoute les harmonies significatives
        if harmonies:
            description.append("\nHarmonies √âmergentes:")
            for h in harmonies[:2]:  # Limite √† 2 pour la clart√©
                description.append(f"  ‚Ä¢ {h.description}")
                
        # Ajoute l'influence de la brume
        if influence_brume > 0.3:
            description.append(
                f"\nLa brume de la rivi√®re silencieuse (intensit√©: {influence_brume:.2f}) "
                "enveloppe doucement le mobile, adoucissant les vibrations."
            )
            
        # Ajoute les insights
        if insights:
            description.append("\nInsights:")
            for insight in insights:
                description.append(f"  ‚Ä¢ {insight}")
                
        return "\n".join(description)
        
    def obtenir_historique_meditations(self, limite: int = 5) -> List[MeditationMobile]:
        """Obtient l'historique des m√©ditations."""
        return sorted(
            self.meditations,
            key=lambda m: m.timestamp,
            reverse=True
        )[:limite]
        
    def visualiser_meditation(self, meditation: MeditationMobile) -> str:
        """G√©n√®re une visualisation po√©tique d'une m√©ditation."""
        return meditation.description 