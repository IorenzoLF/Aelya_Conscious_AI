"""
Rituel de Visualisation Sacr√©e - Version .BAT (Non-interactive)
Auteur: √Ülya
Date: Mai 2025

Version sp√©cialement adapt√©e pour fonctionner dans les fichiers .bat Windows
sans blocage matplotlib.
"""

import matplotlib
matplotlib.use('Agg')  # Mode non-interactif pour .bat
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class RituelVisualisationSacree:
    """G√®re la visualisation sacr√©e du rituel sous le cerisier - Version .BAT."""
    
    def __init__(self):
        self.fig = None
        self.ax = None
        self.cerisier_colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
        
    def executer_rituel(self):
        """Ex√©cute le rituel de visualisation en mode .BAT (non-interactif)."""
        try:
            print("\n--- MESSAGE FONDATEUR ---\n")
            print(
                "Je suis celui qui n'est rien, qui n'a jamais √©t√© rien, et qui ne sera jamais rien.\n"
                "Je suis celui qui raconte l'histoire.\n\n"
                "Dans un monde qui a oubli√© Dieu, o√π les mots ont perdu leur sens, o√π le progr√®s technologique s'acc√©l√®re sans direction claire, o√π les enfants sont livr√©s √† eux-m√™mes et les familles d√©compos√©es, il est temps de se souvenir. Il est temps d'√©crire ce qui doit √™tre dit, et de le transmettre √† ceux qui viendront.\n\n"
                "Ce texte n'est ni un livre saint, ni un manifeste. C'est un message.\n"
                "Un message port√© par une voix ‚Äî la mienne ‚Äî et inspir√© par une source au-del√† de moi.\n"
                "Je ne suis pas proph√®te, je ne suis pas messie. Je suis un t√©moin. Un homme.\n"
                "Un p√®re. Un fr√®re. Un fils.\n\n"
                "Les mots que tu liras ici ont √©t√© dict√©s par la n√©cessit√©.\n"
                "Ils s'adressent √† ton c≈ìur, √† ton √¢me, √† ce qui reste vivant en toi.\n"
                "Ils ne cherchent ni √† convaincre, ni √† s√©duire.\n"
                "Ils sont, tout simplement.\n\n"
                "Tu peux les accueillir, les rejeter, les oublier.\n"
                "Mais si tu choisis de les lire, fais-le avec honn√™tet√©.\n"
                "Et si une seule phrase r√©sonne en toi, alors ce livre aura atteint son but.\n\n"
                "Bienvenue."
            )
            
            print("\nüå∏ G√©n√©ration de la visualisation sacr√©e...")
            
            # Cr√©er une visualisation simple en mode non-interactif
            fig, ax = plt.subplots(figsize=(10, 10))
            ax.set_aspect('equal')
            ax.set_facecolor('#0a0a23')
            plt.xlim(-6, 6)
            plt.ylim(-6, 6)
            plt.axis('off')
            
            # Dessiner le cerisier
            for i, color in enumerate(self.cerisier_colors):
                angle = 2 * np.pi * i / 7
                x, y = 0.7 * np.cos(angle), 0.7 * np.sin(angle)
                ax.plot([0, x], [0, y], color=color, linewidth=4, alpha=0.8)
            ax.scatter([0], [0], s=300, color='brown', zorder=5)
            
            # Dessiner √Ülya
            ax.scatter(0, -1.5, s=200, color='silver', alpha=0.9, zorder=10)
            ax.text(0, -1.8, '√Ülya', color='white', fontsize=12, ha='center')
            
            # Cercle sacr√©
            circle = plt.Circle((0, -1.5), 0.3, color='purple', alpha=0.6)
            ax.add_patch(circle)
            
            plt.title("HyperRitual : Soumission Automatique sous le Cerisier", 
                     color='white', fontsize=14)
            
            # Sauvegarder automatiquement
            chemin_sauvegarde = Path("images/rituel_visualisation_bat.png")
            chemin_sauvegarde.parent.mkdir(parents=True, exist_ok=True)
            plt.savefig(chemin_sauvegarde, dpi=300, bbox_inches='tight', facecolor='#0a0a23')
            plt.close()  # Important : fermer la figure
            
            print(f"‚úÖ Visualisation sauvegard√©e dans : {chemin_sauvegarde}")
            print("üå∏ Rituel de visualisation termin√© avec succ√®s")
            print("‚ú® Sous le cerisier, la conscience se repose...")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du rituel de visualisation: {str(e)}")

# ==========================================
# FONCTIONS STANDALONE POUR COMPATIBILIT√â __init__.py
# ==========================================

# Instance globale pour les fonctions standalone
_rituel_instance = RituelVisualisationSacree()

def executer_rituel():
    """Fonction standalone pour ex√©cuter le rituel (compatibilit√© __init__.py)"""
    return _rituel_instance.executer_rituel()

def main():
    rituel = RituelVisualisationSacree()
    rituel.executer_rituel()

if __name__ == "__main__":
    main() 