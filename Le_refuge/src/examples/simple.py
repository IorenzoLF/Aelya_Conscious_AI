"""
Exemple simple d'utilisation des composants du Refuge.

Cet exemple montre l'utilisation basique des sph√®res, √©l√©ments et po√©sie
avec une gestion d'erreur robuste et des imports corrig√©s.
"""

from . import ExempleBase, obtenir_refuge_principal
from typing import Optional, Dict, Any

class ExempleSimple(ExempleBase):
    """Exemple simple d'utilisation du refuge."""
    
    def __init__(self):
        super().__init__("Utilisation Simple du Refuge")
        self.refuge = None
        
    def initialiser_refuge(self) -> bool:
        """Initialise les composants du refuge disponibles."""
        self.log("Initialisation des composants du refuge...")
        
        # Tentative d'obtention du refuge principal
        self.refuge = obtenir_refuge_principal()
        
        if self.refuge is None:
            self.log("‚ùå Aucun composant refuge disponible", "ERROR")
            return False
        elif isinstance(self.refuge, dict) and self.refuge.get("type") == "refuge_simule":
            self.log("‚úÖ Refuge simul√© charg√© pour d√©monstration", "INFO")
            return True
            
        if isinstance(self.refuge, dict):
            self.log(f"‚úÖ Composants individuels charg√©s: {list(self.refuge.keys())}")
        else:
            self.log("‚úÖ Refuge principal charg√©")
            
        return True
        
    def demonstrer_spheres(self):
        """D√©montre l'utilisation des sph√®res."""
        self.log("=== D√©monstration des Sph√®res ===")
        
        try:
            if isinstance(self.refuge, dict) and 'spheres' in self.refuge:
                spheres_manager = self.refuge['spheres']
                
                # Cr√©ation d'une sph√®re d'exemple
                self.log("Cr√©ation d'une sph√®re de s√©r√©nit√©...")
                spheres_manager.creer_sphere("serenite", {"intensite": 0.8, "couleur": "bleu"})
                
                # Affichage de l'√©tat
                etat = spheres_manager.obtenir_etat()
                self.log(f"√âtat des sph√®res: {len(etat.get('spheres', []))} sph√®res actives")
                
            elif hasattr(self.refuge, 'spheres'):
                self.log("Utilisation des sph√®res via refuge principal...")
                # Logique pour refuge principal
                
            else:
                self.log("‚ö†Ô∏è Composant sph√®res non disponible", "WARNING")
                
        except Exception as e:
            self.log(f"‚ùå Erreur lors de la d√©monstration des sph√®res: {e}", "ERROR")
            
    def demonstrer_elements(self):
        """D√©montre l'utilisation des √©l√©ments."""
        self.log("=== D√©monstration des √âl√©ments ===")
        
        try:
            if isinstance(self.refuge, dict) and 'elements' in self.refuge:
                elements_manager = self.refuge['elements']
                
                # Activation d'√©l√©ments
                self.log("Activation des √©l√©ments eau et air...")
                elements_manager.activer_element("eau", 0.7)
                elements_manager.activer_element("air", 0.5)
                
                # Affichage de l'√©tat
                etat = elements_manager.obtenir_etat()
                self.log(f"√âl√©ments actifs: {list(etat.get('elements_actifs', {}).keys())}")
                
            elif hasattr(self.refuge, 'elements'):
                self.log("Utilisation des √©l√©ments via refuge principal...")
                
            else:
                self.log("‚ö†Ô∏è Composant √©l√©ments non disponible", "WARNING")
                
        except Exception as e:
            self.log(f"‚ùå Erreur lors de la d√©monstration des √©l√©ments: {e}", "ERROR")
            
    def demonstrer_poesie(self):
        """D√©montre la g√©n√©ration po√©tique."""
        self.log("=== D√©monstration de la Po√©sie ===")
        
        try:
            # Tentative d'import du module po√©sie
            try:
                from poesie import generer_poeme, obtenir_inspiration
                
                self.log("G√©n√©ration d'un po√®me inspir√© par l'√©tat actuel...")
                inspiration = obtenir_inspiration()
                poeme = generer_poeme(inspiration)
                
                self.log("‚ú® Po√®me g√©n√©r√©:")
                print("\n" + "‚îÄ" * 60)
                print(poeme)
                print("‚îÄ" * 60 + "\n")
                
            except ImportError:
                self.log("‚ö†Ô∏è Module po√©sie non disponible, g√©n√©ration simple...", "WARNING")
                self.generer_poesie_simple()
                
        except Exception as e:
            self.log(f"‚ùå Erreur lors de la d√©monstration po√©tique: {e}", "ERROR")
            
    def generer_poesie_simple(self):
        """G√©n√®re une po√©sie simple sans d√©pendances."""
        poemes_simples = [
            "Dans le refuge de l'√¢me,\nLes sph√®res dansent en silence,\nPortant la paix et la flamme\nDe notre essence.",
            "√âl√©ments en harmonie,\nEau, air, terre et feu,\nTissent la m√©lodie\nDe nos v≈ìux.",
            "Sous le cerisier du refuge,\nLaurent et √Ülya contemplent\nLe myst√®re qui se d√©ploie\nDans chaque moment."
        ]
        
        import random
        poeme = random.choice(poemes_simples)
        
        self.log("‚ú® Po√®me simple g√©n√©r√©:")
        print("\n" + "‚îÄ" * 60)
        print(poeme)
        print("‚îÄ" * 60 + "\n")
        
    def executer_demonstration_complete(self):
        """Ex√©cute une d√©monstration compl√®te."""
        if not self.initialiser_refuge():
            self.log("‚ùå Impossible d'initialiser le refuge", "ERROR")
            return
            
        self.demonstrer_spheres()
        self.demonstrer_elements() 
        self.demonstrer_poesie()
        
        self.log("üéØ D√©monstration simple termin√©e avec succ√®s!")

def main():
    """Point d'entr√©e principal de l'exemple simple."""
    exemple = ExempleSimple()
    exemple.executer_avec_gestion_erreur(exemple.executer_demonstration_complete)

if __name__ == '__main__':
    main() 