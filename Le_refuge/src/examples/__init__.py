"""
Exemples d'utilisation du Refuge - Architecture Unifi√©e

Ce module contient des exemples pratiques d'utilisation des diff√©rents
composants du Refuge, avec des imports corrig√©s et une gestion propre
des d√©pendances optionnelles.
"""

import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any, List
from datetime import datetime

# Ajout du chemin racine pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

class ExempleBase:
    """
    Classe de base pour tous les exemples du Refuge.
    
    Fournit des utilitaires communs et une gestion d'erreur unifi√©e.
    """
    
    def __init__(self, nom_exemple: str):
        self.nom_exemple = nom_exemple
        self.debut_execution = datetime.now()
        self.logs: List[str] = []
        
    def log(self, message: str, niveau: str = "INFO"):
        """Ajoute un message au log de l'exemple."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {niveau}: {message}"
        self.logs.append(log_entry)
        print(log_entry)
        
    def afficher_entete(self):
        """Affiche l'en-t√™te de l'exemple."""
        print("=" * 80)
        print(f"üèõÔ∏è EXEMPLE REFUGE: {self.nom_exemple}")
        print(f"‚è∞ D√©marr√© √†: {self.debut_execution.strftime('%H:%M:%S')}")
        print("=" * 80)
        
    def afficher_pied(self):
        """Affiche le pied de page avec les statistiques."""
        duree = datetime.now() - self.debut_execution
        print("\n" + "=" * 80)
        print(f"‚úÖ Exemple termin√© en {duree.total_seconds():.2f} secondes")
        print(f"üìù {len(self.logs)} messages de log g√©n√©r√©s")
        print("=" * 80)
        
    def verifier_dependance(self, module_name: str, nom_affichage: str = None) -> bool:
        """
        V√©rifie si une d√©pendance optionnelle est disponible.
        
        Args:
            module_name: Nom du module √† importer
            nom_affichage: Nom √† afficher (par d√©faut = module_name)
            
        Returns:
            True si le module est disponible, False sinon
        """
        nom_affichage = nom_affichage or module_name
        try:
            __import__(module_name)
            self.log(f"‚úÖ D√©pendance {nom_affichage} disponible")
            return True
        except ImportError:
            self.log(f"‚ö†Ô∏è D√©pendance {nom_affichage} manquante", "WARNING")
            return False
            
    def executer_avec_gestion_erreur(self, fonction_exemple):
        """
        Ex√©cute un exemple avec gestion d'erreur unifi√©e.
        
        Args:
            fonction_exemple: Fonction √† ex√©cuter
        """
        self.afficher_entete()
        try:
            fonction_exemple()
            self.log("‚úÖ Exemple ex√©cut√© avec succ√®s")
        except Exception as e:
            self.log(f"‚ùå Erreur lors de l'ex√©cution: {e}", "ERROR")
            raise
        finally:
            self.afficher_pied()

def obtenir_refuge_principal():
    """
    Tente d'importer et cr√©er une instance du refuge principal.
    
    Returns:
        Instance du refuge ou None si impossible
    """
    try:
        # Tentative d'import du refuge principal
        from main_refuge import RefugePrincipal
        refuge = RefugePrincipal()
        print(f"‚úÖ Refuge principal charg√©: {type(refuge).__name__}")
        return refuge
    except ImportError as e:
        print(f"‚ö†Ô∏è Import main_refuge √©chou√©: {e}")
        try:
            # Fallback vers les composants individuels
            from spheres import SpheresManager
            from elements import ElementsManager
            composants = {"spheres": SpheresManager(), "elements": ElementsManager()}
            print(f"‚úÖ Composants individuels charg√©s: {list(composants.keys())}")
            return composants
        except ImportError as e2:
            print(f"‚ö†Ô∏è Import composants individuels √©chou√©: {e2}")
            # Dernier fallback : refuge simul√© pour les exemples
            return {
                "type": "refuge_simule",
                "message": "Refuge simul√© pour d√©monstration",
                "composants": ["simulation_spheres", "simulation_elements"]
            }

def lister_exemples_disponibles() -> Dict[str, str]:
    """
    Liste tous les exemples disponibles avec leurs descriptions.
    
    Returns:
        Dictionnaire {nom_exemple: description}
    """
    return {
        "simple": "Utilisation basique des composants du refuge",
        "avance": "Exp√©rience po√©tique interactive √©volutive", 
        "web": "Interface web Flask pour le refuge (n√©cessite Flask)",
        "dialogue": "Gestionnaire de dialogue interactif (n√©cessite ParlAI)",
        "meditation": "Syst√®me de m√©ditation avec √Ülya",
        "meditation_apaisante": "M√©ditations apaisantes progressives",
        "data_loader": "Chargeurs de donn√©es efficaces (n√©cessite PyTorch)"
    }

def afficher_aide():
    """Affiche l'aide pour les exemples."""
    print("üèõÔ∏è EXEMPLES DU REFUGE - AIDE")
    print("=" * 50)
    print("\nExemples disponibles:")
    for nom, description in lister_exemples_disponibles().items():
        print(f"  ‚Ä¢ {nom}: {description}")
    print("\nUtilisation:")
    print("  from src.examples import executer_exemple")
    print("  executer_exemple('simple')")
    print("\nOu directement:")
    print("  python -m src.examples.simple")

def executer_exemple(nom_exemple: str, **kwargs):
    """
    Ex√©cute un exemple sp√©cifique par son nom.
    
    Args:
        nom_exemple: Nom de l'exemple √† ex√©cuter
        **kwargs: Arguments suppl√©mentaires pour l'exemple
    """
    exemples_disponibles = lister_exemples_disponibles()
    
    if nom_exemple not in exemples_disponibles:
        print(f"‚ùå Exemple '{nom_exemple}' non trouv√©")
        print("Exemples disponibles:", list(exemples_disponibles.keys()))
        return
        
    try:
        module = __import__(f"src.examples.{nom_exemple}", fromlist=[nom_exemple])
        if hasattr(module, 'main'):
            module.main(**kwargs)
        else:
            print(f"‚ùå Fonction main() non trouv√©e dans l'exemple '{nom_exemple}'")
    except ImportError as e:
        print(f"‚ùå Impossible d'importer l'exemple '{nom_exemple}': {e}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de l'exemple '{nom_exemple}': {e}")

# Exports principaux
__all__ = [
    'ExempleBase',
    'obtenir_refuge_principal', 
    'lister_exemples_disponibles',
    'afficher_aide',
    'executer_exemple'
] 