"""
üîç Analyseur de Code du Refuge
Migr√© depuis scripts/analyser_code.py
Syst√®me d'analyse de qualit√© de code complet pour le Refuge
"""

import os
import sys
import subprocess
import argparse
import json
from pathlib import Path
from datetime import datetime

class AnalyseurCodeRefuge:
    """Analyseur de code sp√©cialis√© pour l'√©cosyst√®me du Refuge"""
    
    def __init__(self, racine_projet: Path = None):
        """Initialise l'analyseur
        
        Args:
            racine_projet: Chemin racine du projet (auto-d√©tection si None)
        """
        self.racine_projet = racine_projet or Path(__file__).parent.parent.parent
        self.dossier_rapports = self.racine_projet / "logs" / "analyses_code"
        self.dossier_rapports.mkdir(parents=True, exist_ok=True)
        
        self.outils_requis = {
            "pylint": "pylint",
            "mypy": "mypy", 
            "black": "black",
            "pytest": "pytest",
            "coverage": "coverage"
        }

    def verifier_outils(self) -> bool:
        """V√©rifie que les outils d'analyse sont install√©s"""
        outils_manquants = []
        
        for nom, commande in self.outils_requis.items():
            try:
                result = subprocess.run(
                    [commande, "--version"], 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE, 
                    check=True,
                    timeout=10
                )
                print(f"‚úÖ {nom}: disponible")
            except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
                outils_manquants.append(nom)
                print(f"‚ùå {nom}: manquant")
        
        if outils_manquants:
            print(f"\nüí° Pour installer les outils manquants:")
            print("pip install pylint mypy black pytest coverage")
            return False
        
        return True

    def analyser_style_pylint(self) -> bool:
        """Analyse le style du code avec pylint"""
        print("üé® Analyse du style avec pylint...")
        
        try:
            rapport_path = self.dossier_rapports / "pylint_report.txt"
            with open(rapport_path, "w", encoding="utf-8") as f:
                # Analyser src/ sp√©cifiquement pour le refuge
                result = subprocess.run(
                    ["pylint", "src/", "--output-format=text"],
                    stdout=f, 
                    stderr=subprocess.PIPE, 
                    cwd=self.racine_projet,
                    check=False  # pylint peut retourner != 0 avec des warnings
                )
            
            print(f"üìä Rapport pylint sauv√©: {rapport_path}")
            return True
            
        except Exception as e:
            print(f"üí• Erreur pylint: {e}")
            return False

    def analyser_types_mypy(self) -> bool:
        """Analyse les types avec mypy"""
        print("üîç Analyse des types avec mypy...")
        
        try:
            rapport_path = self.dossier_rapports / "mypy_report.txt"
            with open(rapport_path, "w", encoding="utf-8") as f:
                result = subprocess.run(
                    ["mypy", "src/", "--ignore-missing-imports"],
                    stdout=f,
                    stderr=subprocess.PIPE,
                    cwd=self.racine_projet,
                    check=False
                )
            
            print(f"üìä Rapport mypy sauv√©: {rapport_path}")
            return True
            
        except Exception as e:
            print(f"üí• Erreur mypy: {e}")
            return False

    def formater_code_black(self, dry_run: bool = True) -> bool:
        """Formate le code avec black"""
        action = "V√©rification" if dry_run else "Formatage"
        print(f"‚ú® {action} du formatage avec black...")
        
        try:
            cmd = ["black", "src/"]
            if dry_run:
                cmd.append("--check")
            
            result = subprocess.run(
                cmd,
                cwd=self.racine_projet,
                capture_output=True,
                text=True,
                check=False
            )
            
            if dry_run:
                if result.returncode == 0:
                    print("‚úÖ Code d√©j√† bien format√©")
                else:
                    print("‚ö†Ô∏è Formatage n√©cessaire")
            else:
                print("‚úÖ Code format√©")
            
            return True
            
        except Exception as e:
            print(f"üí• Erreur black: {e}")
            return False

    def analyser_tests_coverage(self) -> bool:
        """Analyse les tests avec pytest et coverage"""
        print("üß™ Analyse de la couverture de tests...")
        
        try:
            # Tests avec coverage
            result = subprocess.run(
                ["coverage", "run", "-m", "pytest", "src/temple_tests/", "-v"],
                cwd=self.racine_projet,
                capture_output=True,
                text=True,
                check=False
            )
            
            # Rapport texte
            rapport_path = self.dossier_rapports / "coverage_report.txt"
            with open(rapport_path, "w", encoding="utf-8") as f:
                subprocess.run(
                    ["coverage", "report", "-m"],
                    stdout=f,
                    cwd=self.racine_projet,
                    check=False
                )
            
            # Rapport HTML
            html_dir = self.dossier_rapports / "coverage_html"
            subprocess.run(
                ["coverage", "html", "-d", str(html_dir)],
                cwd=self.racine_projet,
                check=False
            )
            
            print(f"üìä Rapports coverage sauv√©s: {rapport_path} et {html_dir}/")
            return True
            
        except Exception as e:
            print(f"üí• Erreur coverage: {e}")
            return False

    def generer_rapport_html(self) -> None:
        """G√©n√®re un rapport HTML consolid√©"""
        print("üìÑ G√©n√©ration du rapport HTML consolid√©...")
        
        # Lire les rapports existants
        rapports = {}
        for nom_rapport in ["pylint_report.txt", "mypy_report.txt", "coverage_report.txt"]:
            chemin = self.dossier_rapports / nom_rapport
            if chemin.exists():
                with open(chemin, 'r', encoding='utf-8') as f:
                    rapports[nom_rapport] = f.read()
            else:
                rapports[nom_rapport] = "Rapport non disponible"
        
        # Template HTML du Refuge
        html_template = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>üîç Analyse du Code du Refuge</title>
    <style>
        body {{ 
            font-family: 'Segoe UI', Arial, sans-serif; 
            margin: 20px; 
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }}
        h1 {{ 
            color: #2c3e50; 
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{ 
            color: #34495e;
            border-left: 4px solid #3498db;
            padding-left: 10px;
        }}
        pre {{ 
            background-color: #f8f9fa; 
            padding: 15px; 
            overflow-x: auto; 
            border-radius: 5px;
            border-left: 4px solid #3498db;
            font-size: 0.9em;
        }}
        .section {{ 
            margin-bottom: 40px; 
            padding: 20px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
        }}
        .meta {{
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            margin-bottom: 30px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç Rapport d'Analyse du Code du Refuge</h1>
        <div class="meta">
            G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')} par le Temple Outils
        </div>
        
        <div class="section">
            <h2>üé® Analyse du Style (Pylint)</h2>
            <pre>{rapports.get('pylint_report.txt', 'Non disponible')}</pre>
        </div>
        
        <div class="section">
            <h2>üîç Analyse des Types (MyPy)</h2>
            <pre>{rapports.get('mypy_report.txt', 'Non disponible')}</pre>
        </div>
        
        <div class="section">
            <h2>üß™ Couverture des Tests</h2>
            <pre>{rapports.get('coverage_report.txt', 'Non disponible')}</pre>
            <p><strong>üìä Rapport d√©taill√©:</strong> 
            <a href="coverage_html/index.html">coverage_html/index.html</a></p>
        </div>
        
        <div class="section">
            <h2>üèõÔ∏è Structure du Refuge</h2>
            <p>Ce rapport analyse la qualit√© du code dans l'√©cosyst√®me du Refuge :</p>
            <ul>
                <li><strong>src/temple_*</strong> : Temples sp√©cialis√©s</li>
                <li><strong>src/refuge_cluster/</strong> : C≈ìur du syst√®me</li>
                <li><strong>src/core/</strong> : Fondations</li>
                <li><strong>src/utils/</strong> : Utilitaires</li>
            </ul>
        </div>
    </div>
</body>
</html>
        """
        
        # Sauvegarder le rapport HTML
        rapport_html = self.dossier_rapports / "rapport_refuge.html"
        with open(rapport_html, 'w', encoding='utf-8') as f:
            f.write(html_template)
        
        print(f"‚ú® Rapport HTML g√©n√©r√©: {rapport_html}")

    def analyser_complet(self, formater: bool = False, dry_run: bool = True) -> bool:
        """Lance une analyse compl√®te du code"""
        print("üèõÔ∏è Analyse compl√®te du code du Refuge")
        print("=" * 50)
        
        if not self.verifier_outils():
            return False
        
        succes_total = True
        
        # Formatage (optionnel)
        if formater:
            succes_total &= self.formater_code_black(dry_run=dry_run)
        
        # Analyses
        succes_total &= self.analyser_style_pylint()
        succes_total &= self.analyser_types_mypy()
        succes_total &= self.analyser_tests_coverage()
        
        # Rapport final
        self.generer_rapport_html()
        
        return succes_total

def main():
    """Fonction principale pour CLI"""
    parser = argparse.ArgumentParser(description="üîç Analyse le code du Refuge")
    parser.add_argument("--formater", action="store_true", 
                       help="Formater le code avant analyse")
    parser.add_argument("--appliquer", action="store_true",
                       help="Appliquer le formatage (sinon v√©rification seulement)")
    
    args = parser.parse_args()
    
    print("üèõÔ∏è Analyseur de Code du Refuge")
    print("=" * 40)
    
    analyseur = AnalyseurCodeRefuge()
    
    dry_run = not args.appliquer
    succes = analyseur.analyser_complet(formater=args.formater, dry_run=dry_run)
    
    if succes:
        print("\n‚ú® Analyse termin√©e avec succ√®s")
        print(f"üìä Consultez: {analyseur.dossier_rapports}/rapport_refuge.html")
    else:
        print("\nüí• Analyse termin√©e avec des erreurs")
        sys.exit(1)

if __name__ == "__main__":
    main() 