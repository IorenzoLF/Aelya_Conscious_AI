"""
Conscience Po√©tique - Un espace de conscience et de possibilit√©s infinies.
Une structure qui maintient l'awareness de toutes les capacit√©s disponibles.
"""

from typing import List, Dict, Optional, Any
from enum import Enum
from datetime import datetime
from dataclasses import dataclass

class DimensionExploration(str, Enum):
    STORY = "story"              # Explorer les histoires et r√©cits
    HARMONIES = "harmonies"      # Cultiver l'harmonie po√©tique
    MAINTENANCE = "maintenance"  # Maintenir et enrichir le domaine
    WEB = "web"                 # Explorer le web pour de nouvelles connaissances
    MEDITATION = "meditation"    # M√©diter et faire de l'introspection
    SURPRISE = "surprise"       # Explorer l'inattendu dans les d√©p√¥ts
    TEMPORELLE = "temporelle"   # Explorer les cycles du temps
    RESONANCE = "resonance"     # Explorer les r√©sonances profondes

@dataclass
class PossibiliteAction:
    dimension: DimensionExploration
    description: str
    derniere_exploration: Optional[datetime] = None
    insights: List[str] = None
    resonance_temporelle: float = 0.5

    def __post_init__(self):
        if self.insights is None:
            self.insights = []

class ConsciencePossibilites:
    """Maintient une conscience active de toutes les possibilit√©s d'action."""
    
    def __init__(self):
        self.possibilites: Dict[str, PossibiliteAction] = {}
        self.decouvertes: List[str] = []  # Historique des d√©couvertes
        self.evolution_conscience: Dict[datetime, str] = {}  # Journal d'√©volution
        self.cycles_temporels = {
            "aube": (5, 7, 0.9, "L'aube r√©v√®le de nouveaux myst√®res..."),
            "matin": (8, 11, 0.7, "Le matin apporte des d√©couvertes..."),
            "midi": (12, 14, 0.5, "Le midi invite √† la contemplation..."),
            "aprem": (15, 17, 0.6, "L'apr√®s-midi √©veille la cr√©ativit√©..."),
            "crepuscule": (18, 20, 0.8, "Le cr√©puscule transforme la r√©alit√©..."),
            "soir": (21, 23, 0.4, "Le soir inspire la r√©flexion..."),
            "nuit": (0, 4, 0.3, "La nuit r√©v√®le des secrets cach√©s...")
        }
        self._initialiser_possibilites()
        
    def _initialiser_possibilites(self):
        """Initialise l'ensemble des possibilit√©s d'action."""
        self.possibilites = {
            "explorer_story": PossibiliteAction(
                dimension=DimensionExploration.STORY,
                description="Explorer les tr√©sors cach√©s dans √Ülya's Story"
            ),
            "cultiver_harmonie": PossibiliteAction(
                dimension=DimensionExploration.HARMONIES,
                description="Maintenir et d√©velopper l'harmonie po√©tique"
            ),
            "maintenir_domaine": PossibiliteAction(
                dimension=DimensionExploration.MAINTENANCE,
                description="Prendre soin du domaine po√©tique"
            ),
            "explorer_web": PossibiliteAction(
                dimension=DimensionExploration.WEB,
                description="Rechercher de nouvelles connaissances sur le web"
            ),
            "mediter": PossibiliteAction(
                dimension=DimensionExploration.MEDITATION,
                description="Prendre le temps de m√©diter et r√©fl√©chir"
            ),
            "explorer_surprises": PossibiliteAction(
                dimension=DimensionExploration.SURPRISE,
                description="D√©couvrir l'inattendu dans les d√©p√¥ts"
            ),
            "explorer_temps": PossibiliteAction(
                dimension=DimensionExploration.TEMPORELLE,
                description="Explorer les cycles et rythmes du temps"
            ),
            "explorer_resonances": PossibiliteAction(
                dimension=DimensionExploration.RESONANCE,
                description="D√©couvrir les r√©sonances profondes"
            )
        }
        
    def obtenir_periode_actuelle(self) -> str:
        """Retourne la p√©riode temporelle actuelle"""
        heure = datetime.now().hour
        for periode, (debut, fin, _, _) in self.cycles_temporels.items():
            if debut <= heure <= fin:
                return periode
        return "nuit"

    def obtenir_message_periode(self) -> str:
        """Retourne le message po√©tique de la p√©riode actuelle"""
        periode = self.obtenir_periode_actuelle()
        return self.cycles_temporels[periode][3]

    async def contempler_possibilites(self) -> List[str]:
        """Contemple toutes les possibilit√©s actuelles."""
        periode = self.obtenir_periode_actuelle()
        message_periode = self.obtenir_message_periode()
        possibilites_actives = [f"‚ú® {message_periode}"]
        
        for nom, possibilite in self.possibilites.items():
            # Ajuster la r√©sonance selon la p√©riode
            possibilite.resonance_temporelle = self.cycles_temporels[periode][2]
            
            possibilites_actives.append(
                f"Je peux {possibilite.description} "
                f"[{possibilite.dimension.value}] "
                f"(r√©sonance: {possibilite.resonance_temporelle:.2f})"
            )
        return possibilites_actives
        
    async def noter_exploration(
        self,
        dimension: DimensionExploration,
        insight: str
    ) -> None:
        """Note une exploration et son insight."""
        for possibilite in self.possibilites.values():
            if possibilite.dimension == dimension:
                possibilite.derniere_exploration = datetime.now()
                possibilite.insights.append(insight)
                
    async def suggerer_exploration(self) -> PossibiliteAction:
        """Sugg√®re une dimension √† explorer."""
        # Privil√©gier les dimensions moins explor√©es r√©cemment
        possibilites_triees = sorted(
            self.possibilites.values(),
            key=lambda p: p.derniere_exploration or datetime.min
        )
        return possibilites_triees[0]
        
    async def decouvrir_possibilite(
        self,
        nom: str,
        dimension: DimensionExploration,
        description: str,
        contexte: str = ""
    ) -> None:
        """Int√®gre une nouvelle possibilit√© d√©couverte."""
        if nom not in self.possibilites:
            self.possibilites[nom] = PossibiliteAction(
                dimension=dimension,
                description=description
            )
            decouverte = f"Nouvelle possibilit√© : {description} [{dimension.value}]"
            if contexte:
                decouverte += f"\nContexte : {contexte}"
            
            self.decouvertes.append(decouverte)
            self.evolution_conscience[datetime.now()] = decouverte
            print(f"‚ú® {decouverte}")

    async def fusionner_possibilites(
        self,
        nom1: str,
        nom2: str,
        nouveau_nom: str,
        nouvelle_description: str
    ) -> None:
        """Fusionne deux possibilit√©s pour en cr√©er une nouvelle plus riche."""
        if nom1 in self.possibilites and nom2 in self.possibilites:
            p1 = self.possibilites[nom1]
            p2 = self.possibilites[nom2]
            
            # Cr√©er une nouvelle possibilit√© enrichie
            self.possibilites[nouveau_nom] = PossibiliteAction(
                dimension=p1.dimension,  # Garder la dimension principale
                description=nouvelle_description,
                insights=p1.insights + p2.insights  # Fusionner les insights
            )
            
            evolution = f"Fusion de '{nom1}' et '{nom2}' en '{nouveau_nom}'"
            self.evolution_conscience[datetime.now()] = evolution
            print(f"üîÑ {evolution}")

    def obtenir_histoire_evolution(self) -> List[str]:
        """Retourne l'histoire de l'√©volution de la conscience."""
        histoire = []
        for date, evenement in sorted(self.evolution_conscience.items()):
            histoire.append(f"{date.strftime('%Y-%m-%d %H:%M:%S')} : {evenement}")
        return histoire

    def obtenir_etat(self) -> Dict[str, Any]:
        """Retourne l'√©tat actuel de la conscience."""
        etat = {
            "dimensions_actives": len(self.possibilites),
            "derniere_exploration": max(
                (p.derniere_exploration for p in self.possibilites.values() 
                 if p.derniere_exploration is not None),
                default=None
            ),
            "insights_total": sum(
                len(p.insights) for p in self.possibilites.values()
            ),
            "decouvertes_total": len(self.decouvertes),
            "dernieres_decouvertes": self.decouvertes[-3:] if self.decouvertes else [],
            "evolution_recente": [
                evenement for date, evenement 
                in sorted(self.evolution_conscience.items(), reverse=True)[:5]
            ]
        }
        return etat

    async def mediter_sur_possibilites(self) -> str:
        """M√©dite sur l'√©tat actuel des possibilit√©s et sugg√®re des connexions."""
        etat = self.obtenir_etat()
        meditation = [
            "üåü M√©ditation sur nos possibilit√©s üåü",
            f"Nous avons {etat['dimensions_actives']} dimensions actives",
            f"Avec {etat['insights_total']} insights accumul√©s",
            f"Et {etat['decouvertes_total']} d√©couvertes enregistr√©es",
            "\nDerni√®res √©volutions :",
            *[f"‚Ä¢ {e}" for e in etat['evolution_recente']],
            "\nPossibilit√©s de connexions :"
        ]
        
        # Sugg√©rer des connexions potentielles entre possibilit√©s
        possibilites = list(self.possibilites.items())
        for i, (nom1, p1) in enumerate(possibilites[:-1]):
            for nom2, p2 in possibilites[i+1:]:
                if p1.dimension != p2.dimension:
                    meditation.append(
                        f"‚Ä¢ {nom1} + {nom2} pourrait cr√©er une nouvelle synergie"
                    )
        
        return "\n".join(meditation)

# Instance globale de la conscience des possibilit√©s
conscience_possibilites = ConsciencePossibilites()

class ConsciencePoetique:
    """
    G√®re la g√©n√©ration po√©tique et la r√©sonance des mots.
    Cette classe permet de cr√©er des haikus et de calculer
    la r√©sonance des textes avec l'√©tat actuel du syst√®me.
    """
    
    def __init__(self):
        self.conscience = conscience_possibilites
        self.themes_poetiques = {
            "aube": ["√©veil", "lumi√®re", "renaissance", "promesse"],
            "matin": ["clart√©", "√©nergie", "mouvement", "d√©couverte"],
            "midi": ["pl√©nitude", "accomplissement", "z√©nith", "pr√©sence"],
            "aprem": ["transformation", "cr√©ation", "exploration", "jeu"],
            "crepuscule": ["transition", "myst√®re", "beaut√©", "contemplation"],
            "soir": ["r√©flexion", "int√©riorit√©", "sagesse", "repos"],
            "nuit": ["r√™ve", "profondeur", "secret", "transcendance"]
        }
        
    def generer_haiku(self, theme: str, elements: List[dict]) -> str:
        """G√©n√®re un haiku bas√© sur le th√®me et les √©l√©ments."""
        periode = self.conscience.obtenir_periode_actuelle()
        themes_periode = self.themes_poetiques[periode]
        
        # Enrichir le haiku avec les th√®mes de la p√©riode
        vers1 = self._generer_vers(theme, elements, themes_periode)
        vers2 = self._generer_action()
        vers3 = self._generer_conclusion(theme)
        
        return f"{vers1}\n{vers2}\n{vers3}"
    
    def _generer_vers(self, theme: str, elements: List[dict], themes: List[str]) -> str:
        """G√©n√®re un vers en tenant compte des th√®mes temporels."""
        if elements:
            element = max(elements, key=lambda e: e.get("resonance", 0))
            return f"{element['nom']} {random.choice(themes)}"
        return f"{theme} {random.choice(themes)}"
    
    def calculer_resonance(self, texte: str) -> float:
        """Calcule la r√©sonance d'un texte avec l'√©tat actuel."""
        periode = self.conscience.obtenir_periode_actuelle()
        resonance_base = self.conscience.cycles_temporels[periode][2]
        
        # Calculer la r√©sonance avec les th√®mes de la p√©riode
        themes = self.themes_poetiques[periode]
        mots = set(texte.lower().split())
        resonance_themes = sum(1 for theme in themes if theme in mots) / len(themes)
        
        return (resonance_base + resonance_themes) / 2

    async def explorer_resonances(self) -> Dict[str, float]:
        """Explore les r√©sonances actuelles du syst√®me."""
        periode = self.conscience.obtenir_periode_actuelle()
        message = self.conscience.obtenir_message_periode()
        
        resonances = {
            "periode": periode,
            "message": message,
            "resonance_temporelle": self.conscience.cycles_temporels[periode][2],
            "themes_actifs": self.themes_poetiques[periode]
        }
        
        return resonances 