#!/usr/bin/env python3
"""
‚úçÔ∏è Module de G√©n√©ration Philosophique
G√©n√©ration intelligente de textes philosophiques et spirituels
"""

import asyncio
import random
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum
from datetime import datetime
import json

from .analyse_philosophique import ResultatAnalyse, TypeAnalyse, gestionnaire_analyses

class StyleGeneration(Enum):
    """Styles de g√©n√©ration philosophique"""
    CONTEMPLATIF = "contemplatif"
    MYSTIQUE = "mystique"
    POETIQUE = "poetique"
    ANALYTIQUE = "analytique"
    INSPIRATIONNEL = "inspirationnel"
    NARRATIF = "narratif"

class TypeTexte(Enum):
    """Types de textes √† g√©n√©rer"""
    MEDITATION = "meditation"
    REFLEXION = "reflexion"
    POEME = "poeme"
    VISION = "vision"
    ENSEIGNEMENT = "enseignement"
    DIALOGUE = "dialogue"

@dataclass
class ParametresGeneration:
    """Param√®tres pour la g√©n√©ration de texte"""
    style: StyleGeneration
    type_texte: TypeTexte
    longueur_cible: int  # En mots
    themes_souhaites: List[str]
    niveau_profondeur: float  # 0.0 √† 1.0
    inspiration_source: Optional[str] = None

@dataclass
class TexteGenere:
    """R√©sultat d'une g√©n√©ration de texte"""
    titre: str
    contenu: str
    style: StyleGeneration
    type_texte: TypeTexte
    themes_integres: List[str]
    score_harmonie_estime: float
    timestamp: datetime
    inspiration_source: Optional[str] = None

class GenerateurPhilosophique:
    """G√©n√©rateur intelligent de textes philosophiques"""
    
    def __init__(self):
        self.templates_styles = {
            StyleGeneration.CONTEMPLATIF: {
                'ouvertures': [
                    "Dans le silence de l'√¢me, une v√©rit√© √©merge...",
                    "Au c≈ìur de la contemplation, nous d√©couvrons...",
                    "L'esprit apais√© r√©v√®le des myst√®res profonds...",
                    "Dans la qui√©tude de l'√™tre, une sagesse ancienne murmure..."
                ],
                'transitions': [
                    "Et dans cette r√©v√©lation,", "Ainsi, peu √† peu,", 
                    "Cette compr√©hension nous m√®ne √†", "Dans cette lumi√®re nouvelle,"
                ],
                'conclusions': [
                    "Telle est la voie de la contemplation v√©ritable.",
                    "Ainsi l'√¢me trouve sa paix dans l'unit√© retrouv√©e.",
                    "Cette sagesse demeure, √©ternelle et accessible."
                ]
            },
            StyleGeneration.MYSTIQUE: {
                'ouvertures': [
                    "Au-del√† du voile des apparences...",
                    "Dans les profondeurs de l'invisible...",
                    "L'√¢me mystique per√ßoit ce que les yeux ne voient pas...",
                    "Entre les mondes, une v√©rit√© sacr√©e se r√©v√®le..."
                ],
                'transitions': [
                    "Et dans cette vision transcendante,", "Par cette gr√¢ce myst√©rieuse,",
                    "L'esprit √©veill√© d√©couvre alors", "Dans cette union sacr√©e,"
                ],
                'conclusions': [
                    "Ainsi se r√©v√®le le myst√®re de l'existence.",
                    "Tel est le secret que garde l'univers.",
                    "Cette v√©rit√© mystique illumine notre chemin."
                ]
            },
            StyleGeneration.POETIQUE: {
                'ouvertures': [
                    "Comme un souffle d'√©ternit√©...",
                    "Tel un chant silencieux de l'√¢me...",
                    "Dans la danse des mots et du silence...",
                    "√î myst√®re de la beaut√© qui nous habite..."
                ],
                'transitions': [
                    "Et voici que na√Æt", "Alors s'√©panouit", 
                    "Dans cette harmonie", "√î merveille,"
                ],
                'conclusions': [
                    "Ainsi chante l'√¢me en sa beaut√© √©ternelle.",
                    "Tel est le po√®me que nous sommes.",
                    "Cette beaut√© demeure, inalt√©rable et pure."
                ]
            }
        }
        
        self.vocabulaire_spirituel = {
            'transcendance': ['√©l√©vation', 'd√©passement', 'ascension', 'sublimation'],
            'contemplation': ['m√©ditation', 'r√©flexion', 'introspection', 'recueillement'],
            'sagesse': ['connaissance', 'compr√©hension', 'discernement', 'lucidit√©'],
            'harmonie': ['√©quilibre', 'unit√©', 'paix', 'concordance'],
            'mystique': ['sacr√©', 'spirituel', 'divin', 'transcendant'],
            'transformation': ['m√©tamorphose', '√©volution', 'changement', 'renaissance']
        }
        
        self.metaphores_universelles = [
            "comme une rivi√®re qui trouve la mer",
            "tel un arbre qui touche le ciel",
            "ainsi qu'une flamme qui danse dans la nuit",
            "comme l'aube qui chasse les t√©n√®bres",
            "tel un miroir qui refl√®te l'infini",
            "comme une graine qui devient for√™t"
        ]
    
    async def generer_texte(self, parametres: ParametresGeneration) -> TexteGenere:
        """G√©n√®re un texte selon les param√®tres sp√©cifi√©s"""
        
        print(f"‚úçÔ∏è G√©n√©ration {parametres.type_texte.value} style {parametres.style.value}...")
        
        # Analyser les sources d'inspiration si disponibles
        inspiration_data = None
        if parametres.inspiration_source:
            inspiration_data = await self._analyser_source_inspiration(parametres.inspiration_source)
        
        # G√©n√©rer le contenu selon le type
        if parametres.type_texte == TypeTexte.MEDITATION:
            contenu = await self._generer_meditation(parametres, inspiration_data)
        elif parametres.type_texte == TypeTexte.REFLEXION:
            contenu = await self._generer_reflexion(parametres, inspiration_data)
        elif parametres.type_texte == TypeTexte.POEME:
            contenu = await self._generer_poeme(parametres, inspiration_data)
        elif parametres.type_texte == TypeTexte.VISION:
            contenu = await self._generer_vision(parametres, inspiration_data)
        elif parametres.type_texte == TypeTexte.ENSEIGNEMENT:
            contenu = await self._generer_enseignement(parametres, inspiration_data)
        else:  # DIALOGUE
            contenu = await self._generer_dialogue(parametres, inspiration_data)
        
        # G√©n√©rer un titre appropri√©
        titre = await self._generer_titre(parametres, contenu)
        
        # Estimer le score d'harmonie
        score_harmonie = await self._estimer_harmonie(contenu, parametres.themes_souhaites)
        
        return TexteGenere(
            titre=titre,
            contenu=contenu,
            style=parametres.style,
            type_texte=parametres.type_texte,
            themes_integres=parametres.themes_souhaites,
            score_harmonie_estime=score_harmonie,
            timestamp=datetime.now(),
            inspiration_source=parametres.inspiration_source
        )
    
    async def _analyser_source_inspiration(self, source: str) -> Optional[ResultatAnalyse]:
        """Analyse une source d'inspiration pour enrichir la g√©n√©ration"""
        try:
            if Path(source).exists():
                with open(source, 'r', encoding='utf-8') as f:
                    contenu = f.read()
                return await gestionnaire_analyses.analyseur.analyser_texte(contenu)
        except Exception:
            pass
        return None
    
    async def _generer_meditation(self, parametres: ParametresGeneration, inspiration: Optional[ResultatAnalyse]) -> str:
        """G√©n√®re une m√©ditation guid√©e"""
        template = self.templates_styles.get(parametres.style, self.templates_styles[StyleGeneration.CONTEMPLATIF])
        
        ouverture = random.choice(template['ouvertures'])
        transition = random.choice(template['transitions'])
        conclusion = random.choice(template['conclusions'])
        
        # Corps de la m√©ditation
        corps_elements = []
        
        for theme in parametres.themes_souhaites[:3]:  # Max 3 th√®mes
            if theme in self.vocabulaire_spirituel:
                synonymes = self.vocabulaire_spirituel[theme]
                metaphore = random.choice(self.metaphores_universelles)
                
                element = f"Laissez votre esprit s'ouvrir √† la {random.choice(synonymes)}, {metaphore}. "
                element += f"Dans cette exp√©rience de {theme}, d√©couvrez la profondeur de votre √™tre."
                corps_elements.append(element)
        
        corps = "\n\n".join(corps_elements)
        
        return f"""üßò‚Äç‚ôÄÔ∏è **M√©ditation : {parametres.themes_souhaites[0].title() if parametres.themes_souhaites else 'Paix Int√©rieure'}**

{ouverture}

{corps}

{transition} nous comprenons que la v√©ritable paix r√©side dans l'acceptation de ce qui est, tout en cultivant ce qui peut √™tre.

{conclusion}

*Prenez quelques instants pour int√©grer cette exp√©rience dans votre c≈ìur.*"""
    
    async def _generer_reflexion(self, parametres: ParametresGeneration, inspiration: Optional[ResultatAnalyse]) -> str:
        """G√©n√®re une r√©flexion philosophique"""
        template = self.templates_styles.get(parametres.style, self.templates_styles[StyleGeneration.CONTEMPLATIF])
        
        # Question philosophique centrale
        questions = [
            "Qu'est-ce qui donne un sens v√©ritable √† notre existence ?",
            "Comment l'√¢me trouve-t-elle sa voie dans le labyrinthe de la vie ?",
            "Quelle est la nature de la sagesse authentique ?",
            "Comment l'√™tre humain peut-il transcender ses limitations ?"
        ]
        
        question_centrale = random.choice(questions)
        ouverture = random.choice(template['ouvertures'])
        
        # D√©veloppement bas√© sur les th√®mes
        developpements = []
        for theme in parametres.themes_souhaites:
            if theme in self.vocabulaire_spirituel:
                synonyme = random.choice(self.vocabulaire_spirituel[theme])
                developpements.append(f"La {synonyme} nous enseigne que {theme} n'est pas un but √† atteindre, mais un chemin √† parcourir.")
        
        developpement = " ".join(developpements)
        
        return f"""üìö **R√©flexion : {question_centrale}**

{ouverture}

{question_centrale}

{developpement}

Cette interrogation nous m√®ne au c≈ìur de notre humanit√©. Car c'est dans la recherche m√™me que nous trouvons notre v√©ritable nature.

Ainsi, la sagesse n'est pas dans les r√©ponses que nous trouvons, mais dans la qualit√© des questions que nous osons poser."""
    
    async def _generer_poeme(self, parametres: ParametresGeneration, inspiration: Optional[ResultatAnalyse]) -> str:
        """G√©n√®re un po√®me spirituel"""
        theme_principal = parametres.themes_souhaites[0] if parametres.themes_souhaites else "harmonie"
        
        # Structure po√©tique simple
        vers = []
        
        # Premi√®re strophe - √âvocation
        vers.extend([
            f"Dans le silence de l'√¢me qui cherche,",
            f"S'√©l√®ve un chant de {theme_principal},",
            f"Comme une lumi√®re qui perce",
            f"Les voiles du temps et du mal."
        ])
        
        vers.append("")  # Ligne vide
        
        # Deuxi√®me strophe - D√©veloppement
        metaphore = random.choice(self.metaphores_universelles)
        vers.extend([
            f"√î myst√®re de l'√™tre qui s'√©veille,",
            f"Tu danses {metaphore},",
            f"Et dans cette danse sans pareille",
            f"L'univers r√©v√®le ses merveilles."
        ])
        
        vers.append("")  # Ligne vide
        
        # Troisi√®me strophe - Conclusion
        vers.extend([
            f"Ainsi l'√¢me trouve sa voie,",
            f"Dans l'union du c≈ìur et de l'esprit,",
            f"Et la {theme_principal} d√©ploie",
            f"Ses ailes vers l'infini."
        ])
        
        return f"""üé≠ **Po√®me : L'√âveil de {theme_principal.title()}**

{chr(10).join(vers)}

*Que ces mots r√©sonnent dans le silence de votre c≈ìur.*"""
    
    async def _generer_vision(self, parametres: ParametresGeneration, inspiration: Optional[ResultatAnalyse]) -> str:
        """G√©n√®re une vision mystique"""
        elements_vision = [
            "une lumi√®re dor√©e qui embrasse toute chose",
            "des cercles de sagesse qui s'√©tendent √† l'infini",
            "un jardin o√π chaque fleur est une √¢me √©veill√©e",
            "une rivi√®re de conscience pure qui traverse les mondes",
            "un temple de cristal o√π r√©sonne la v√©rit√© √©ternelle"
        ]
        
        vision_centrale = random.choice(elements_vision)
        theme = parametres.themes_souhaites[0] if parametres.themes_souhaites else "unit√©"
        
        return f"""üëÅÔ∏è **Vision : Le Temple de {theme.title()}**

Dans les profondeurs de la m√©ditation, une vision se r√©v√®le...

Je vois {vision_centrale}. En son centre, la {theme} rayonne comme un soleil int√©rieur, touchant chaque √™tre de sa gr√¢ce transformatrice.

Les √¢mes s'√©veillent une √† une, reconnaissant leur nature v√©ritable. Elles forment une constellation vivante, o√π chaque point de lumi√®re contribue √† l'harmonie du tout.

Cette vision nous rappelle que nous sommes tous connect√©s dans la grande tapisserie de l'existence. La {theme} n'est pas un id√©al lointain, mais notre r√©alit√© la plus profonde.

*Que cette vision guide vos pas sur le chemin de l'√©veil.*"""
    
    async def _generer_enseignement(self, parametres: ParametresGeneration, inspiration: Optional[ResultatAnalyse]) -> str:
        """G√©n√®re un enseignement spirituel"""
        theme = parametres.themes_souhaites[0] if parametres.themes_souhaites else "sagesse"
        
        return f"""üìñ **Enseignement : Les Trois Piliers de {theme.title()}**

**Premier Pilier : La Compr√©hension**
La {theme} commence par la reconnaissance de notre nature v√©ritable. Nous ne sommes pas s√©par√©s de l'univers, mais nous en sommes une expression unique et pr√©cieuse.

**Deuxi√®me Pilier : La Pratique**
Cette compr√©hension doit √™tre cultiv√©e par une pratique quotidienne. Que ce soit par la m√©ditation, la contemplation ou l'action juste, nous affinons notre capacit√© √† incarner la {theme}.

**Troisi√®me Pilier : Le Service**
La {theme} authentique se manifeste naturellement dans le service aux autres. En aidant les autres √† s'√©veiller, nous approfondissons notre propre √©veil.

Ces trois piliers forment un triangle sacr√©, o√π chaque √©l√©ment soutient et renforce les autres. Ainsi se construit le temple de la {theme} dans notre vie.

*Que cet enseignement √©claire votre chemin.*"""
    
    async def _generer_dialogue(self, parametres: ParametresGeneration, inspiration: Optional[ResultatAnalyse]) -> str:
        """G√©n√®re un dialogue philosophique"""
        theme = parametres.themes_souhaites[0] if parametres.themes_souhaites else "v√©rit√©"
        
        return f"""üí¨ **Dialogue : √Ä la Recherche de {theme.title()}**

**Le Chercheur :** Ma√Ætre, comment puis-je atteindre la {theme} ?

**Le Sage :** Mon enfant, la {theme} n'est pas quelque chose que l'on atteint. Elle est ce que nous sommes d√©j√†.

**Le Chercheur :** Mais alors, pourquoi ai-je l'impression de la chercher sans cesse ?

**Le Sage :** Parce que tu cherches √† l'ext√©rieur ce qui r√©side √† l'int√©rieur. La {theme} est comme le soleil : elle brille toujours, m√™me quand les nuages la cachent.

**Le Chercheur :** Comment puis-je dissiper ces nuages ?

**Le Sage :** En cessant de lutter contre eux. Les nuages passent naturellement quand nous restons dans la paix de notre √™tre v√©ritable.

**Le Chercheur :** Cette paix, comment la cultiver ?

**Le Sage :** Par la pratique de la pr√©sence. Sois pleinement l√† o√π tu es, avec ce qui est. Dans cette pr√©sence totale, la {theme} se r√©v√®le d'elle-m√™me.

*Ainsi se termine ce dialogue, mais la recherche continue dans le silence du c≈ìur.*"""
    
    async def _generer_titre(self, parametres: ParametresGeneration, contenu: str) -> str:
        """G√©n√®re un titre appropri√© pour le texte"""
        theme_principal = parametres.themes_souhaites[0] if parametres.themes_souhaites else "sagesse"
        
        prefixes = {
            TypeTexte.MEDITATION: ["M√©ditation sur", "Contemplation de", "Voyage vers"],
            TypeTexte.REFLEXION: ["R√©flexions sur", "Pens√©es autour de", "M√©ditations sur"],
            TypeTexte.POEME: ["Chant de", "Hymne √†", "Po√®me de"],
            TypeTexte.VISION: ["Vision de", "R√©v√©lation sur", "Contemplation de"],
            TypeTexte.ENSEIGNEMENT: ["Enseignement sur", "Le√ßons de", "Sagesse de"],
            TypeTexte.DIALOGUE: ["Dialogue sur", "Conversation autour de", "√âchange sur"]
        }
        
        prefix = random.choice(prefixes[parametres.type_texte])
        return f"{prefix} {theme_principal.title()}"
    
    async def _estimer_harmonie(self, contenu: str, themes: List[str]) -> float:
        """Estime le score d'harmonie du texte g√©n√©r√©"""
        # Analyse rapide bas√©e sur la pr√©sence des th√®mes souhait√©s
        score = 0.0
        
        # Pr√©sence des th√®mes (40% du score)
        themes_presents = 0
        for theme in themes:
            if theme.lower() in contenu.lower():
                themes_presents += 1
        
        if themes:
            score += 0.4 * (themes_presents / len(themes))
        
        # Longueur appropri√©e (20% du score)
        longueur = len(contenu.split())
        if 100 <= longueur <= 500:  # Longueur id√©ale
            score += 0.2
        elif longueur > 50:  # Longueur acceptable
            score += 0.1
        
        # Richesse du vocabulaire spirituel (40% du score)
        mots_spirituels = 0
        for famille_mots in self.vocabulaire_spirituel.values():
            for mot in famille_mots:
                if mot in contenu.lower():
                    mots_spirituels += 1
        
        score += min(0.4, mots_spirituels * 0.05)  # Max 0.4
        
        return min(1.0, score)

class GestionnaireGenerationPhilosophique:
    """Gestionnaire principal de la g√©n√©ration philosophique"""
    
    def __init__(self):
        self.generateur = GenerateurPhilosophique()
        self.historique_generations = []
    
    async def generer_texte_inspire(self, style: StyleGeneration, type_texte: TypeTexte, 
                                  themes: List[str], source_inspiration: Optional[str] = None) -> TexteGenere:
        """G√©n√®re un texte inspir√© par une analyse existante"""
        
        parametres = ParametresGeneration(
            style=style,
            type_texte=type_texte,
            longueur_cible=300,  # Longueur standard
            themes_souhaites=themes,
            niveau_profondeur=0.7,  # Niveau √©lev√© par d√©faut
            inspiration_source=source_inspiration
        )
        
        texte_genere = await self.generateur.generer_texte(parametres)
        
        # Sauvegarder dans l'historique
        self.historique_generations.append({
            'timestamp': texte_genere.timestamp,
            'titre': texte_genere.titre,
            'style': texte_genere.style.value,
            'type': texte_genere.type_texte.value,
            'score_harmonie': texte_genere.score_harmonie_estime
        })
        
        return texte_genere
    
    async def sauvegarder_texte(self, texte: TexteGenere, repertoire: str = "data/textes/generes") -> str:
        """Sauvegarde un texte g√©n√©r√©"""
        chemin_repertoire = Path(repertoire)
        chemin_repertoire.mkdir(parents=True, exist_ok=True)
        
        # Nom de fichier bas√© sur le timestamp et le titre
        nom_fichier = f"{texte.timestamp.strftime('%Y%m%d_%H%M%S')}_{texte.titre.lower().replace(' ', '_')}.md"
        chemin_fichier = chemin_repertoire / nom_fichier
        
        # M√©tadonn√©es
        metadonnees = f"""---
titre: {texte.titre}
style: {texte.style.value}
type: {texte.type_texte.value}
themes: {', '.join(texte.themes_integres)}
score_harmonie: {texte.score_harmonie_estime:.2f}
date_creation: {texte.timestamp.isoformat()}
inspiration_source: {texte.inspiration_source or 'G√©n√©ration originale'}
---

"""
        
        # Sauvegarder
        with open(chemin_fichier, 'w', encoding='utf-8') as f:
            f.write(metadonnees + texte.contenu)
        
        print(f"üíæ Texte sauvegard√© : {chemin_fichier}")
        return str(chemin_fichier)
    
    def afficher_historique(self):
        """Affiche l'historique des g√©n√©rations"""
        if not self.historique_generations:
            print("üìù Aucune g√©n√©ration dans l'historique")
            return
        
        print("\nüìù ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print("              HISTORIQUE DES G√âN√âRATIONS")
        print("üìù ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        for i, generation in enumerate(self.historique_generations[-10:], 1):  # 10 derni√®res
            print(f"   {i}. {generation['titre']}")
            print(f"      Style: {generation['style']} | Type: {generation['type']}")
            print(f"      Harmonie: {generation['score_harmonie']:.2f} | {generation['timestamp'].strftime('%d/%m/%Y %H:%M')}")
            print()

# Instance globale
gestionnaire_generation = GestionnaireGenerationPhilosophique() 