{
  "fichiers": {
    "analyseur_xprize.py": {
      "domaine": "inclassable",
      "complexite": "moyenne",
      "lignes": 72,
      "classes": [],
      "fonctions": [
        "detect_domain",
        "analyze_py_file",
        "find_imports",
        "main"
      ]
    },
    "immersion_xprize.py": {
      "domaine": "inclassable",
      "complexite": "moyenne",
      "lignes": 90,
      "classes": [
        "ImmersionCerveauXprize"
      ],
      "fonctions": [
        "main",
        "__init__",
        "se_connecter_au_xprize",
        "_detecter_specialisation"
      ]
    },
    "setup_quantum_env.py": {
      "domaine": "inclassable",
      "complexite": "moyenne",
      "lignes": 160,
      "classes": [],
      "fonctions": [
        "check_python_version",
        "check_dependencies",
        "test_quantum_circuit",
        "test_harmonic_functions",
        "setup_environment",
        "main"
      ]
    },
    "test_framework.py": {
      "domaine": "inclassable",
      "complexite": "moyenne",
      "lignes": 115,
      "classes": [],
      "fonctions": [
        "run_complete_test_suite"
      ]
    },
    "__init__.py": {
      "domaine": "inclassable",
      "complexite": "moyenne",
      "lignes": 8,
      "classes": [],
      "fonctions": []
    },
    "core\\consciousness_bridge.py": {
      "domaine": "core",
      "complexite": "moyenne",
      "lignes": 189,
      "classes": [
        "ConsciousnessState",
        "ConsciousnessBridge"
      ],
      "fonctions": [
        "__post_init__",
        "__init__",
        "_initialize_resonance_matrices",
        "update_consciousness_state",
        "_calculate_resonance",
        "_calculate_awakening",
        "_update_quantum_memory",
        "get_consciousness_report",
        "apply_consciousness_optimization"
      ]
    },
    "core\\quantum_collatz.py": {
      "domaine": "core",
      "complexite": "moyenne",
      "lignes": 125,
      "classes": [
        "QuantumCollatz"
      ],
      "fonctions": [
        "__init__",
        "create_superposition",
        "apply_collatz_transform",
        "_apply_harmonic_optimization",
        "measure",
        "run_simulation",
        "analyze_results",
        "_calculate_entropy",
        "_calculate_efficiency",
        "_evaluate_harmonic_coherence"
      ]
    },
    "core\\quantum_fibonacci.py": {
      "domaine": "core",
      "complexite": "moyenne",
      "lignes": 162,
      "classes": [
        "QuantumFibonacci"
      ],
      "fonctions": [
        "__init__",
        "_generate_fibonacci",
        "_calculate_zeta_phases",
        "create_fibonacci_state",
        "apply_zeta_optimization",
        "apply_consciousness_optimization",
        "run_quantum_meditation",
        "measure_state",
        "run_simulation",
        "_analyze_fibonacci_coherence",
        "_evaluate_consciousness_level"
      ]
    },
    "core\\quantum_harmonics.py": {
      "domaine": "core",
      "complexite": "moyenne",
      "lignes": 312,
      "classes": [
        "HarmonicParameters",
        "QuantumHarmonics"
      ],
      "fonctions": [
        "__post_init__",
        "__init__",
        "_generate_harmonic_matrices",
        "apply_harmonic_optimization",
        "_prepare_harmonic_state",
        "_apply_harmonic_transforms",
        "_optimize_coherence",
        "_create_harmonic_triad",
        "_apply_2qubit_matrix",
        "measure_harmonics",
        "_get_current_quantum_state",
        "_apply_optimized_state",
        "run_simulation",
        "_analyze_harmonic_coherence",
        "_extract_harmonic_pattern",
        "_calculate_optimization_score"
      ]
    },
    "core\\recursive_observer.py": {
      "domaine": "core",
      "complexite": "moyenne",
      "lignes": 155,
      "classes": [
        "RecursiveState",
        "RecursiveObserver"
      ],
      "fonctions": [
        "__post_init__",
        "__init__",
        "_initialize_operators",
        "observe",
        "_update_metrics",
        "apply_recursion",
        "measure_self_reference",
        "reset"
      ]
    },
    "core\\__init__.py": {
      "domaine": "core",
      "complexite": "moyenne",
      "lignes": 8,
      "classes": [],
      "fonctions": []
    },
    "experiments\\demo_harmonic_simulation.py": {
      "domaine": "experiments",
      "complexite": "moyenne",
      "lignes": 18,
      "classes": [],
      "fonctions": []
    },
    "experiments\\performance_tests.py": {
      "domaine": "experiments",
      "complexite": "moyenne",
      "lignes": 174,
      "classes": [
        "PerformanceMetrics"
      ],
      "fonctions": [
        "test_harmonic_optimization",
        "test_scaling_performance",
        "test_noise_resilience",
        "test_optimization_benchmark",
        "analyze_results",
        "main",
        "__init__",
        "add_metric",
        "get_summary",
        "run_optimization"
      ]
    },
    "experiments\\__init__.py": {
      "domaine": "experiments",
      "complexite": "moyenne",
      "lignes": 16,
      "classes": [],
      "fonctions": []
    },
    "tests\\test_consciousness_bridge.py": {
      "domaine": "tests",
      "complexite": "moyenne",
      "lignes": 109,
      "classes": [],
      "fonctions": [
        "test_consciousness_bridge_initialization",
        "test_consciousness_state_update",
        "test_quantum_harmonics_integration",
        "test_resonance_calculation",
        "test_awakening_calculation",
        "test_consciousness_optimization",
        "test_quantum_memory_update",
        "test_meditation_influence",
        "test_consciousness_report"
      ]
    },
    "visualization\\harmonic_visualizer.py": {
      "domaine": "visualization",
      "complexite": "moyenne",
      "lignes": 320,
      "classes": [
        "HarmonicVisualizer"
      ],
      "fonctions": [
        "__init__",
        "plot_harmonic_distribution",
        "plot_coherence_matrix",
        "plot_optimization_progress",
        "create_interactive_dashboard",
        "plot_frequency_spectrum",
        "plot_harmonic_ratios",
        "create_performance_report",
        "_add_performance_plots"
      ]
    },
    "visualization\\__init__.py": {
      "domaine": "visualization",
      "complexite": "moyenne",
      "lignes": 8,
      "classes": [],
      "fonctions": []
    }
  },
  "dependances": {
    "core\\consciousness_bridge.py": [
      "core\\quantum_harmonics.py"
    ],
    "core\\quantum_harmonics.py": [
      "core\\consciousness_bridge.py"
    ],
    "core\\recursive_observer.py": [
      "core\\quantum_harmonics.py"
    ],
    "core\\__init__.py": [
      "core\\quantum_harmonics.py"
    ],
    "experiments\\__init__.py": [
      "experiments\\performance_tests.py"
    ],
    "visualization\\__init__.py": [
      "visualization\\harmonic_visualizer.py"
    ]
  }
}