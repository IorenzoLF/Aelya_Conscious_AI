#!/usr/bin/env python3
"""
Script de test des corrections post-migration
==============================================

Valide que toutes les corrections apport√©es apr√®s la migration
des fichiers vers les temples fonctionnent correctement.

Auteur: Laurent & √Ülya
Date: 26 Mai 2025
"""

import sys
import traceback
from datetime import datetime

def test_temples_imports():
    """Test des imports des temples"""
    print("üèõÔ∏è Test des imports des temples...")
    
    try:
        import src.core
        print("   ‚úÖ Temple Core - OK")
    except Exception as e:
        print(f"   ‚ùå Temple Core - ERREUR: {e}")
        return False
    
    try:
        import src.temple_musical
        print("   ‚úÖ Temple Musical - OK")
    except Exception as e:
        print(f"   ‚ùå Temple Musical - ERREUR: {e}")
        return False
    
    try:
        import src.temple_spirituel
        print("   ‚úÖ Temple Spirituel - OK")
    except Exception as e:
        print(f"   ‚ùå Temple Spirituel - ERREUR: {e}")
        return False
    
    try:
        import src.temple_poetique
        print("   ‚úÖ Temple Po√©tique - OK")
    except Exception as e:
        print(f"   ‚ùå Temple Po√©tique - ERREUR: {e}")
        return False
    
    return True

def test_temple_musical_avance():
    """Test avanc√© du temple musical"""
    print("\nüéµ Test avanc√© du temple musical...")
    
    try:
        from src.temple_musical.temple_musical_ame import creer_temple_musical
        from src.refuge_cluster.spheres.collection import CollectionSpheres
        
        # Cr√©er le temple
        spheres = CollectionSpheres()
        temple = creer_temple_musical(spheres)
        print(f"   ‚úÖ Temple cr√©√© - √ânergie initiale: {temple.energie.niveau_energie}")
        
        # Test harmonisation
        energie_avant = temple.energie.niveau_energie
        temple.energie.harmoniser_avec(0.5, 0.1)
        energie_apres = temple.energie.niveau_energie
        print(f"   ‚úÖ Harmonisation - Avant: {energie_avant}, Apr√®s: {energie_apres}")
        
        # Test configuration
        temple.config.definir("test", "valeur_test")
        valeur = temple.config.obtenir("test", "defaut")
        print(f"   ‚úÖ Configuration - Valeur r√©cup√©r√©e: {valeur}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Temple Musical avanc√© - ERREUR: {e}")
        traceback.print_exc()
        return False

def test_main_refuge():
    """Test du syst√®me principal main_refuge"""
    print("\nüß† Test du syst√®me principal (Brain Refuge Local)...")
    
    try:
        from main_refuge import Refuge
        
        # Cr√©er le refuge
        refuge = Refuge()
        print(f"   ‚úÖ Refuge cr√©√© - √ânergie: {refuge.energie.niveau_energie}")
        print(f"   ‚úÖ Tendance √©nerg√©tique: {refuge.energie.obtenir_tendance()}")
        
        # Test harmonisation
        refuge.energie.harmoniser_avec(0.9, 0.2)
        print(f"   ‚úÖ Harmonisation refuge - Nouvelle √©nergie: {refuge.energie.niveau_energie}")
        
        # Test configuration
        refuge.config.definir("mode", "test")
        mode = refuge.config.obtenir("mode", "defaut")
        print(f"   ‚úÖ Configuration refuge - Mode: {mode}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Main Refuge - ERREUR: {e}")
        traceback.print_exc()
        return False

def test_imports_specifiques():
    """Test des imports sp√©cifiques qui √©taient cass√©s"""
    print("\nüîß Test des imports sp√©cifiques corrig√©s...")
    
    try:
        # Test import apprentissage musical
        sys.path.insert(0, '.')
        from src.temple_musical.apprentissage_musical import ApprentissageMusical
        print("   ‚úÖ ApprentissageMusical - Import OK")
        
        # Test import melodie sacr√©e
        from src.temple_musical.melodie_sacree import main
        print("   ‚úÖ M√©lodie Sacr√©e - Import OK")
        
        # Test import temple musical ame
        from src.temple_musical.temple_musical_ame import GestionnaireTempleMusical
        print("   ‚úÖ GestionnaireTempleMusical - Import OK")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Imports sp√©cifiques - ERREUR: {e}")
        traceback.print_exc()
        return False

def rapport_final(resultats):
    """G√©n√®re le rapport final des tests"""
    print("\n" + "="*60)
    print("üìã RAPPORT FINAL DES CORRECTIONS POST-MIGRATION")
    print("="*60)
    
    total_tests = len(resultats)
    tests_reussis = sum(resultats.values())
    pourcentage = (tests_reussis / total_tests) * 100
    
    print(f"üìä Tests r√©ussis: {tests_reussis}/{total_tests} ({pourcentage:.1f}%)")
    print("\nD√©tail des r√©sultats:")
    
    for test_nom, resultat in resultats.items():
        statut = "‚úÖ SUCC√àS" if resultat else "‚ùå √âCHEC"
        print(f"   {test_nom}: {statut}")
    
    if tests_reussis == total_tests:
        print("\nüéâ TOUTES LES CORRECTIONS FONCTIONNENT PARFAITEMENT !")
        print("üèÜ Le syst√®me est enti√®rement op√©rationnel apr√®s migration.")
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - tests_reussis} test(s) √† corriger.")
    
    print(f"\nüìÖ Test effectu√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("ü§ù Par: Laurent & √Ülya - √âquipe Le Refuge")

def main():
    """Fonction principale de test"""
    print("üéØ VALIDATION DES CORRECTIONS POST-MIGRATION")
    print("=" * 50)
    print("Validation que le 'coiffage du troll' a r√©ussi ! ‚ú®")
    print()
    
    # Ex√©cution des tests
    resultats = {
        "Imports temples": test_temples_imports(),
        "Temple Musical avanc√©": test_temple_musical_avance(),
        "Main Refuge (Brain)": test_main_refuge(),
        "Imports sp√©cifiques": test_imports_specifiques()
    }
    
    # Rapport final
    rapport_final(resultats)

if __name__ == "__main__":
    main() 