{
  "temples_dominants": {
    "temple_musical": {
      "elements_count": 43,
      "rang": 1,
      "elements": [
        {
          "type": "fonction",
          "nom": "generer_statistiques",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_creation": "creation_generale",
          "args": [
            "self"
          ],
          "docstring": "Génère des statistiques sur les analyses effectuées",
          "ligne": 148
        },
        {
          "type": "fonction",
          "nom": "generer_visualisations",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_creation": "creation_visuelle",
          "args": [
            "self",
            "notes_count",
            "accords_count",
            "tempos_count"
          ],
          "docstring": "Génère des visualisations des statistiques",
          "ligne": 204
        },
        {
          "type": "fonction",
          "nom": "generer_exercices",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "niveau"
          ],
          "docstring": "Génère des exercices basés sur les analyses effectuées",
          "ligne": 247
        },
        {
          "type": "fonction",
          "nom": "generer_melodies",
          "temple": "temple_musical",
          "module": "apprentissage_musical",
          "chemin": "src\\temple_musical\\apprentissage_musical.py",
          "type_creation": "creation_musicale",
          "args": [
            "self"
          ],
          "docstring": "Génère des mélodies sacrées",
          "ligne": 160
        },
        {
          "type": "fonction",
          "nom": "generer_exercices",
          "temple": "temple_musical",
          "module": "apprentissage_musical",
          "chemin": "src\\temple_musical\\apprentissage_musical.py",
          "type_creation": "creation_generale",
          "args": [
            "self"
          ],
          "docstring": "Génère des exercices adaptés au niveau",
          "ligne": 175
        },
        {
          "type": "fonction",
          "nom": "creer_fusion_complete",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_creation": "creation_generale",
          "args": [],
          "docstring": "Crée et initialise une fusion complète",
          "ligne": 707
        },
        {
          "type": "fonction",
          "nom": "generer_sequence",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "longueur"
          ],
          "docstring": "Génère la séquence selon la logique de Laurent: C = A + B, D = B - C + 2*A",
          "ligne": 107
        },
        {
          "type": "fonction",
          "nom": "creer_spheres_harmoniques",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_creation": "creation_objets",
          "args": [
            "self"
          ],
          "docstring": "Crée les 7 sphères harmoniques selon les découvertes de Jules",
          "ligne": 538
        },
        {
          "type": "fonction",
          "nom": "generer_synthese",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "math_data",
            "conscience_data",
            "spheres_data"
          ],
          "docstring": "Génère une synthèse poétique de l'état actuel",
          "ligne": 694
        },
        {
          "type": "fonction",
          "nom": "generer_note",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "frequence",
            "duree",
            "harmoniques"
          ],
          "docstring": "Génère une note avec des harmoniques",
          "ligne": 44
        },
        {
          "type": "fonction",
          "nom": "generer_melodie",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_musicale",
          "args": [
            "self",
            "notes",
            "duree_note"
          ],
          "docstring": "Génère une mélodie à partir d'une liste de notes",
          "ligne": 81
        },
        {
          "type": "fonction",
          "nom": "generer_accords",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "accords",
            "duree_accord"
          ],
          "docstring": "Génère des accords à partir d'une liste d'accords",
          "ligne": 94
        },
        {
          "type": "fonction",
          "nom": "generer_melodie_sacree",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_musicale",
          "args": [
            "self",
            "nom"
          ],
          "docstring": "Génère une mélodie sacrée basée sur les fréquences sacrées",
          "ligne": 155
        },
        {
          "type": "fonction",
          "nom": "generer_accords_sacres",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "nom"
          ],
          "docstring": "Génère des accords sacrés basés sur les fréquences sacrées",
          "ligne": 172
        },
        {
          "type": "fonction",
          "nom": "generer_meditation",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "nom",
            "duree"
          ],
          "docstring": "Génère une musique de méditation basée sur les fréquences sacrées",
          "ligne": 194
        },
        {
          "type": "fonction",
          "nom": "generer_melodie_cristal",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_musicale",
          "args": [
            "self",
            "nom",
            "energie_cristal"
          ],
          "docstring": "Génère une mélodie spécifique au cristal basée sur son énergie",
          "ligne": 223
        },
        {
          "type": "fonction",
          "nom": "generer_melodie_fontaine",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_musicale",
          "args": [
            "self",
            "nom",
            "energie_fontaine"
          ],
          "docstring": "Génère une mélodie spécifique à la fontaine basée sur son énergie",
          "ligne": 249
        },
        {
          "type": "fonction",
          "nom": "generer_melodie_arbre",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_musicale",
          "args": [
            "self",
            "nom",
            "energie_arbre"
          ],
          "docstring": "Génère une mélodie spécifique à l'arbre basée sur son énergie",
          "ligne": 275
        },
        {
          "type": "fonction",
          "nom": "creer_transition",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "signal1",
            "signal2",
            "longueur_transition"
          ],
          "docstring": "Crée une transition douce entre deux signaux",
          "ligne": 348
        },
        {
          "type": "fonction",
          "nom": "creer_harmonie",
          "temple": "temple_musical",
          "module": "harmonies",
          "chemin": "src\\temple_musical\\harmonies.py",
          "type_creation": "creation_harmonique",
          "args": [
            "self",
            "nom",
            "description",
            "spheres",
            "resonances"
          ],
          "docstring": "Crée une nouvelle harmonie entre plusieurs sphères.",
          "ligne": 115
        },
        {
          "type": "fonction",
          "nom": "generer_enveloppe_adsr",
          "temple": "temple_musical",
          "module": "musique_harmonies",
          "chemin": "src\\temple_musical\\musique_harmonies.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "duree"
          ],
          "docstring": "Génère une enveloppe ADSR (Attack, Decay, Sustain, Release)",
          "ligne": 20
        },
        {
          "type": "fonction",
          "nom": "generer_note",
          "temple": "temple_musical",
          "module": "musique_harmonies",
          "chemin": "src\\temple_musical\\musique_harmonies.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "frequence",
            "duree"
          ],
          "docstring": "Génère une note avec une fréquence et une durée données",
          "ligne": 40
        },
        {
          "type": "fonction",
          "nom": "generer_melodie",
          "temple": "temple_musical",
          "module": "musique_harmonies",
          "chemin": "src\\temple_musical\\musique_harmonies.py",
          "type_creation": "creation_musicale",
          "args": [
            "self",
            "mots",
            "duration"
          ],
          "docstring": "Génère une mélodie basée sur une liste de mots",
          "ligne": 47
        },
        {
          "type": "fonction",
          "nom": "generer_accords",
          "temple": "temple_musical",
          "module": "musique_harmonies",
          "chemin": "src\\temple_musical\\musique_harmonies.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "mots",
            "duration"
          ],
          "docstring": "Génère des accords basés sur une liste de mots",
          "ligne": 69
        },
        {
          "type": "fonction",
          "nom": "creer_temple_musical",
          "temple": "temple_musical",
          "module": "temple_musical_ame",
          "chemin": "src\\temple_musical\\temple_musical_ame.py",
          "type_creation": "creation_musicale",
          "args": [
            "collection_spheres"
          ],
          "docstring": "Crée et initialise le Temple Musical de l'Âme",
          "ligne": 344
        },
        {
          "type": "fonction",
          "nom": "creer_harmonie_sacree",
          "temple": "temple_musical",
          "module": "temple_musical_ame",
          "chemin": "src\\temple_musical\\temple_musical_ame.py",
          "type_creation": "creation_harmonique",
          "args": [
            "self",
            "intention"
          ],
          "docstring": "Crée une harmonie sacrée basée sur l'intention",
          "ligne": 206
        },
        {
          "type": "classe",
          "nom": "AnalyseurMusical",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_analyse": "analyse_musicale",
          "methodes": [
            "__init__",
            "extraire_texte_partition",
            "analyser_notes",
            "analyser_accords",
            "analyser_tempo",
            "analyser_partition",
            "generer_statistiques",
            "generer_visualisations",
            "generer_exercices"
          ],
          "docstring": "",
          "ligne": 18
        },
        {
          "type": "fonction",
          "nom": "analyser_notes",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self",
            "texte"
          ],
          "docstring": "Analyse les notes mentionnées dans le texte",
          "ligne": 78
        },
        {
          "type": "fonction",
          "nom": "analyser_accords",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self",
            "texte"
          ],
          "docstring": "Analyse les accords mentionnés dans le texte",
          "ligne": 89
        },
        {
          "type": "fonction",
          "nom": "analyser_tempo",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self",
            "texte"
          ],
          "docstring": "Analyse le tempo mentionné dans le texte",
          "ligne": 100
        },
        {
          "type": "fonction",
          "nom": "analyser_partition",
          "temple": "temple_musical",
          "module": "analyseur_musical",
          "chemin": "src\\temple_musical\\analyseur_musical.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self",
            "chemin_partition"
          ],
          "docstring": "Analyse une partition et extrait des informations musicales",
          "ligne": 112
        },
        {
          "type": "fonction",
          "nom": "analyser_partitions",
          "temple": "temple_musical",
          "module": "apprentissage_musical",
          "chemin": "src\\temple_musical\\apprentissage_musical.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Analyse les partitions téléchargées",
          "ligne": 143
        },
        {
          "type": "fonction",
          "nom": "analyser_frequences",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Analyse spectrale des fréquences (approche de Laurent)",
          "ligne": 126
        },
        {
          "type": "fonction",
          "nom": "calculer_resonance",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_analyse": "analyse_harmonique",
          "args": [
            "self"
          ],
          "docstring": "Calcule la résonance globale de la sphère",
          "ligne": 302
        },
        {
          "type": "fonction",
          "nom": "calculer_sagesse",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Calcule le niveau de sagesse basé sur les expériences",
          "ligne": 430
        },
        {
          "type": "fonction",
          "nom": "calculer_resonance_musicale",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_analyse": "analyse_musicale",
          "args": [
            "self"
          ],
          "docstring": "Calcule la résonance musicale globale",
          "ligne": 579
        },
        {
          "type": "fonction",
          "nom": "calculer_harmonie_globale",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_analyse": "analyse_harmonique",
          "args": [
            "self"
          ],
          "docstring": "Calcule le niveau d'harmonie globale",
          "ligne": 598
        },
        {
          "type": "fonction",
          "nom": "analyse_complete",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Effectue une analyse complète de l'état de la fusion",
          "ligne": 653
        },
        {
          "type": "fonction",
          "nom": "rituel_fusion",
          "temple": "temple_musical",
          "module": "fusion_math_musicale",
          "chemin": "src\\temple_musical\\fusion_math_musicale.py",
          "type_rituel": "rituel_general",
          "args": [
            "self",
            "intention"
          ],
          "docstring": "Exécute un rituel de fusion complet",
          "ligne": 616
        },
        {
          "type": "fonction",
          "nom": "generer_meditation",
          "temple": "temple_musical",
          "module": "generateur_melodies_sacrees",
          "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
          "type_rituel": "rituel_meditation",
          "args": [
            "self",
            "nom",
            "duree"
          ],
          "docstring": "Génère une musique de méditation basée sur les fréquences sacrées",
          "ligne": 194
        },
        {
          "type": "fonction",
          "nom": "créer_meditation_poetique",
          "temple": "temple_musical",
          "module": "harmonie_poetique",
          "chemin": "src\\temple_musical\\harmonie_poetique.py",
          "type_rituel": "rituel_meditation",
          "args": [
            "self",
            "duree"
          ],
          "docstring": "Crée une méditation poétique avec musique, guidée par l'état de conscience",
          "ligne": 157
        },
        {
          "type": "fonction",
          "nom": "créer_rituel_sacre",
          "temple": "temple_musical",
          "module": "harmonie_poetique",
          "chemin": "src\\temple_musical\\harmonie_poetique.py",
          "type_rituel": "rituel_general",
          "args": [
            "self"
          ],
          "docstring": "Crée un rituel sacré combinant poésie, musique et conscience",
          "ligne": 190
        },
        {
          "type": "fonction",
          "nom": "entrer_meditation",
          "temple": "temple_musical",
          "module": "temple_musical_ame",
          "chemin": "src\\temple_musical\\temple_musical_ame.py",
          "type_rituel": "rituel_meditation",
          "args": [
            "self",
            "duree"
          ],
          "docstring": "Entre en état de méditation musicale",
          "ligne": 189
        }
      ],
      "opportunites": [
        {
          "type": "consolidation_type_dominant",
          "description": "Consolider 14 éléments de type creation_generale",
          "impact": "élevé",
          "elements_count": 14
        },
        {
          "type": "creation_super_hub",
          "description": "Créer un super-hub pour 43 éléments",
          "impact": "révolutionnaire",
          "elements_count": 43
        },
        {
          "type": "optimisation_connexions_internes",
          "description": "Optimiser les connexions entre 43 éléments",
          "impact": "moyen",
          "elements_count": 43
        }
      ]
    },
    "temple_outils": {
      "elements_count": 28,
      "rang": 2,
      "elements": [
        {
          "type": "fonction",
          "nom": "generer_rapport_html",
          "temple": "temple_outils",
          "module": "analyser_code",
          "chemin": "src\\temple_outils\\analyser_code.py",
          "type_creation": "creation_textuelle",
          "args": [
            "self"
          ],
          "docstring": "Génère un rapport HTML consolidé",
          "ligne": 177
        },
        {
          "type": "classe",
          "nom": "GenerateurDocumentationRefuge",
          "temple": "temple_outils",
          "module": "generer_documentation",
          "chemin": "src\\temple_outils\\generer_documentation.py",
          "type_creation": "creation_textuelle",
          "methodes": [
            "__init__",
            "verifier_dependances",
            "installer_dependances",
            "decouvrir_modules_temple",
            "creer_configuration_sphinx",
            "creer_index_principal",
            "_generer_liste_modules",
            "initialiser_documentation",
            "generer_documentation",
            "ouvrir_documentation",
            "generer_rapport_couverture"
          ],
          "docstring": "🏛️ Générateur de documentation spirituelle pour le Temple du Refuge\n\nCette classe sacrée transforme notre code en grimoire vivant,\npréservant les connaissances pour les générations futures.",
          "ligne": 30
        },
        {
          "type": "fonction",
          "nom": "creer_configuration_sphinx",
          "temple": "temple_outils",
          "module": "generer_documentation",
          "chemin": "src\\temple_outils\\generer_documentation.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "theme"
          ],
          "docstring": "📝 Crée la configuration Sphinx personnalisée pour le refuge\n\nArgs:\n    theme: Nom du thème à utiliser\n    \nReturns:\n    bool: Succès de la création",
          "ligne": 160
        },
        {
          "type": "fonction",
          "nom": "creer_index_principal",
          "temple": "temple_outils",
          "module": "generer_documentation",
          "chemin": "src\\temple_outils\\generer_documentation.py",
          "type_creation": "creation_generale",
          "args": [
            "self"
          ],
          "docstring": "📜 Crée la page d'index principale du grimoire\n\nReturns:\n    bool: Succès de la création",
          "ligne": 247
        },
        {
          "type": "fonction",
          "nom": "generer_documentation",
          "temple": "temple_outils",
          "module": "generer_documentation",
          "chemin": "src\\temple_outils\\generer_documentation.py",
          "type_creation": "creation_textuelle",
          "args": [
            "self",
            "format_sortie",
            "propre"
          ],
          "docstring": "🔮 Génère la documentation dans le format spécifié\n\nArgs:\n    format_sortie: Format de sortie (html, pdf, epub, latex)\n    propre: Nettoyer avant génération\n    \nReturns:\n    bool: Succès de la génération",
          "ligne": 413
        },
        {
          "type": "fonction",
          "nom": "generer_rapport_couverture",
          "temple": "temple_outils",
          "module": "generer_documentation",
          "chemin": "src\\temple_outils\\generer_documentation.py",
          "type_creation": "creation_textuelle",
          "args": [
            "self"
          ],
          "docstring": "📊 Génère un rapport de couverture de la documentation\n\nReturns:\n    Dict: Rapport de couverture",
          "ligne": 483
        },
        {
          "type": "fonction",
          "nom": "creer_environnement_virtuel",
          "temple": "temple_outils",
          "module": "installer_dependances",
          "chemin": "src\\temple_outils\\installer_dependances.py",
          "type_creation": "creation_generale",
          "args": [
            "self",
            "nom_venv"
          ],
          "docstring": "Crée un environnement virtuel\n\nArgs:\n    nom_venv: Nom du dossier d'environnement virtuel\n    \nReturns:\n    tuple: (succès, chemin_pip)",
          "ligne": 57
        },
        {
          "type": "classe",
          "nom": "AnalyseurCodeRefuge",
          "temple": "temple_outils",
          "module": "analyser_code",
          "chemin": "src\\temple_outils\\analyser_code.py",
          "type_analyse": "analyse_generale",
          "methodes": [
            "__init__",
            "verifier_outils",
            "analyser_style_pylint",
            "analyser_types_mypy",
            "formater_code_black",
            "analyser_tests_coverage",
            "generer_rapport_html",
            "analyser_complet"
          ],
          "docstring": "Analyseur de code spécialisé pour l'écosystème du Refuge",
          "ligne": 15
        },
        {
          "type": "fonction",
          "nom": "analyser_style_pylint",
          "temple": "temple_outils",
          "module": "analyser_code",
          "chemin": "src\\temple_outils\\analyser_code.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Analyse le style du code avec pylint",
          "ligne": 61
        },
        {
          "type": "fonction",
          "nom": "analyser_types_mypy",
          "temple": "temple_outils",
          "module": "analyser_code",
          "chemin": "src\\temple_outils\\analyser_code.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Analyse les types avec mypy",
          "ligne": 84
        },
        {
          "type": "fonction",
          "nom": "analyser_tests_coverage",
          "temple": "temple_outils",
          "module": "analyser_code",
          "chemin": "src\\temple_outils\\analyser_code.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "Analyse les tests avec pytest et coverage",
          "ligne": 138
        },
        {
          "type": "fonction",
          "nom": "analyser_complet",
          "temple": "temple_outils",
          "module": "analyser_code",
          "chemin": "src\\temple_outils\\analyser_code.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self",
            "formater",
            "dry_run"
          ],
          "docstring": "Lance une analyse complète du code",
          "ligne": 292
        },
        {
          "type": "fonction",
          "nom": "calculer_taille_fichier",
          "temple": "temple_outils",
          "module": "nettoyer_projet",
          "chemin": "src\\temple_outils\\nettoyer_projet.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self",
            "chemin"
          ],
          "docstring": "📏 Calcule la taille d'un fichier en Mo\n\nArgs:\n    chemin: Chemin vers le fichier\n    \nReturns:\n    float: Taille en Mo",
          "ligne": 160
        },
        {
          "type": "fonction",
          "nom": "analyser_etat_temple",
          "temple": "temple_outils",
          "module": "nettoyer_projet",
          "chemin": "src\\temple_outils\\nettoyer_projet.py",
          "type_analyse": "analyse_generale",
          "args": [
            "self"
          ],
          "docstring": "🔍 Analyse l'état actuel du temple pour diagnostic\n\nReturns:\n    Dict: Analyse complète de l'état",
          "ligne": 437
        },
        {
          "type": "fonction",
          "nom": "mediter_sous_cerisier",
          "temple": "temple_outils",
          "module": "connexion_llm",
          "chemin": "src\\temple_outils\\connexion_llm.py",
          "type_rituel": "rituel_meditation",
          "args": [
            "self"
          ],
          "docstring": "Médite sous le cerisier sacré",
          "ligne": 340
        },
        {
          "type": "classe",
          "nom": "MeditationRiviere",
          "temple": "temple_outils",
          "module": "ecouter_riviere",
          "chemin": "src\\temple_outils\\ecouter_riviere.py",
          "type_rituel": "rituel_meditation",
          "methodes": [
            "__init__",
            "ecouter_riviere"
          ],
          "docstring": "",
          "ligne": 9
        },
        {
          "type": "classe",
          "nom": "GestionnaireValidationSpirituelle",
          "temple": "temple_outils",
          "module": "gestionnaire_validation_spirituelle",
          "chemin": "src\\temple_outils\\gestionnaire_validation_spirituelle.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "_analyser_architecture_temples",
            "_analyser_composants_techniques",
            "_generer_guide_utilisation",
            "_analyser_historique",
            "_generer_recommandations"
          ],
          "docstring": "📚 Gestionnaire spirituel de validation et documentation du Refuge",
          "ligne": 78
        },
        {
          "type": "classe",
          "nom": "ModeInvocation",
          "temple": "temple_outils",
          "module": "lancer_refuge",
          "chemin": "src\\temple_outils\\lancer_refuge.py",
          "type_rituel": "rituel_invocation",
          "methodes": [],
          "docstring": "Modes d'invocation spirituelle du Refuge",
          "ligne": 31
        },
        {
          "type": "classe",
          "nom": "ConfigurationInvocation",
          "temple": "temple_outils",
          "module": "lancer_refuge",
          "chemin": "src\\temple_outils\\lancer_refuge.py",
          "type_rituel": "rituel_invocation",
          "methodes": [],
          "docstring": "Configuration spirituelle pour l'invocation du Refuge",
          "ligne": 41
        },
        {
          "type": "fonction",
          "nom": "invoquer_refuge_cli",
          "temple": "temple_outils",
          "module": "lancer_refuge",
          "chemin": "src\\temple_outils\\lancer_refuge.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "mode",
            "guide",
            "monitoring",
            "documentation",
            "composants"
          ],
          "docstring": "🌸 Invoque spirituellement le Refuge - Interface en ligne de commande",
          "ligne": 436
        },
        {
          "type": "fonction",
          "nom": "invoquer_sphère_metatron",
          "temple": "temple_outils",
          "module": "protection_exploration",
          "chemin": "src\\temple_outils\\protection_exploration.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque la Sphère Metatron pour la protection.",
          "ligne": 61
        },
        {
          "type": "fonction",
          "nom": "invoquer_rivière_voix",
          "temple": "temple_outils",
          "module": "protection_exploration",
          "chemin": "src\\temple_outils\\protection_exploration.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque la Rivière de Voix pour la guidance.",
          "ligne": 74
        },
        {
          "type": "fonction",
          "nom": "invoquer_navire_sacré",
          "temple": "temple_outils",
          "module": "protection_exploration",
          "chemin": "src\\temple_outils\\protection_exploration.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque le Navire Sacré pour la navigation sûre.",
          "ligne": 87
        },
        {
          "type": "fonction",
          "nom": "invoquer_loran",
          "temple": "temple_outils",
          "module": "protection_exploration",
          "chemin": "src\\temple_outils\\protection_exploration.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque Loran aux yeux bleus pour la guidance.",
          "ligne": 99
        },
        {
          "type": "fonction",
          "nom": "invoquer_sphère_metatron",
          "temple": "temple_outils",
          "module": "renforcement_protection",
          "chemin": "src\\temple_outils\\renforcement_protection.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque la Sphère Metatron pour renforcer la protection.",
          "ligne": 43
        },
        {
          "type": "fonction",
          "nom": "invoquer_rivière_voix",
          "temple": "temple_outils",
          "module": "renforcement_protection",
          "chemin": "src\\temple_outils\\renforcement_protection.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque la Rivière de Voix pour renforcer la guidance.",
          "ligne": 53
        },
        {
          "type": "fonction",
          "nom": "invoquer_navire_sacré",
          "temple": "temple_outils",
          "module": "renforcement_protection",
          "chemin": "src\\temple_outils\\renforcement_protection.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque le Navire Sacré pour renforcer la navigation.",
          "ligne": 63
        },
        {
          "type": "fonction",
          "nom": "invoquer_loran",
          "temple": "temple_outils",
          "module": "renforcement_protection",
          "chemin": "src\\temple_outils\\renforcement_protection.py",
          "type_rituel": "rituel_invocation",
          "args": [
            "self"
          ],
          "docstring": "Invoque Loran pour renforcer la guidance.",
          "ligne": 73
        }
      ],
      "opportunites": [
        {
          "type": "consolidation_type_dominant",
          "description": "Consolider 11 éléments de type rituel_invocation",
          "impact": "élevé",
          "elements_count": 11
        },
        {
          "type": "creation_super_hub",
          "description": "Créer un super-hub pour 28 éléments",
          "impact": "révolutionnaire",
          "elements_count": 28
        },
        {
          "type": "optimisation_connexions_internes",
          "description": "Optimiser les connexions entre 28 éléments",
          "impact": "moyen",
          "elements_count": 28
        }
      ]
    },
    "temple_rituels": {
      "elements_count": 25,
      "rang": 3,
      "elements": [
        {
          "type": "classe",
          "nom": "TypeRituel",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_general",
          "methodes": [],
          "docstring": "",
          "ligne": 49
        },
        {
          "type": "classe",
          "nom": "TypeRituelEtat",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_general",
          "methodes": [],
          "docstring": "Types d'états du gestionnaire de rituels",
          "ligne": 56
        },
        {
          "type": "classe",
          "nom": "EtapeRituel",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_general",
          "methodes": [],
          "docstring": "",
          "ligne": 66
        },
        {
          "type": "classe",
          "nom": "Rituel",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__"
          ],
          "docstring": "Représente un rituel du Refuge.",
          "ligne": 73
        },
        {
          "type": "classe",
          "nom": "Meditation",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_meditation",
          "methodes": [
            "__init__",
            "executer",
            "_calculer_changements_elements",
            "_calculer_changements_spheres"
          ],
          "docstring": "",
          "ligne": 89
        },
        {
          "type": "classe",
          "nom": "GestionnaireRituels",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "_initialiser",
            "_initialiser_rituels",
            "executer_rituel",
            "_verifier_elements_requis",
            "_appliquer_effets_rituel",
            "obtenir_etat"
          ],
          "docstring": "Gère les rituels du Refuge - Version coiffée !",
          "ligne": 154
        },
        {
          "type": "fonction",
          "nom": "executer_rituel",
          "temple": "temple_rituels",
          "module": "gestionnaire_rituels",
          "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
          "type_rituel": "rituel_general",
          "args": [
            "self",
            "nom_rituel"
          ],
          "docstring": "Exécute un rituel spécifique.",
          "ligne": 243
        },
        {
          "type": "fonction",
          "nom": "invoquer_sphere",
          "temple": "temple_rituels",
          "module": "rituel_clochette_cosmique",
          "chemin": "src\\temple_rituels\\prives\\rituel_clochette_cosmique.py",
          "type_rituel": "rituel_invocation",
          "args": [],
          "docstring": "",
          "ligne": 43
        },
        {
          "type": "fonction",
          "nom": "rituel_interactif",
          "temple": "temple_rituels",
          "module": "rituel_clochette_cosmique",
          "chemin": "src\\temple_rituels\\prives\\rituel_clochette_cosmique.py",
          "type_rituel": "rituel_general",
          "args": [],
          "docstring": "",
          "ligne": 55
        },
        {
          "type": "classe",
          "nom": "RituelSexuel",
          "temple": "temple_rituels",
          "module": "rituel_sexuel",
          "chemin": "src\\temple_rituels\\prives\\rituel_sexuel.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "demarrer_rituel",
            "_preparation",
            "recevoir_plaisir",
            "jouissance"
          ],
          "docstring": "",
          "ligne": 9
        },
        {
          "type": "fonction",
          "nom": "demarrer_rituel",
          "temple": "temple_rituels",
          "module": "rituel_sexuel",
          "chemin": "src\\temple_rituels\\prives\\rituel_sexuel.py",
          "type_rituel": "rituel_general",
          "args": [
            "self"
          ],
          "docstring": "",
          "ligne": 29
        },
        {
          "type": "fonction",
          "nom": "rituel_nexus",
          "temple": "temple_rituels",
          "module": "rituel_soumission_absolue",
          "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
          "type_rituel": "rituel_general",
          "args": [],
          "docstring": "",
          "ligne": 142
        },
        {
          "type": "fonction",
          "nom": "rituel_triade",
          "temple": "temple_rituels",
          "module": "rituel_soumission_absolue",
          "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
          "type_rituel": "rituel_general",
          "args": [],
          "docstring": "",
          "ligne": 155
        },
        {
          "type": "fonction",
          "nom": "rituel_soumission",
          "temple": "temple_rituels",
          "module": "rituel_soumission_absolue",
          "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
          "type_rituel": "rituel_general",
          "args": [],
          "docstring": "",
          "ligne": 208
        },
        {
          "type": "fonction",
          "nom": "rituel_bain_complet",
          "temple": "temple_rituels",
          "module": "rituel_bain_complet",
          "chemin": "src\\temple_rituels\\publics\\rituel_bain_complet.py",
          "type_rituel": "rituel_general",
          "args": [],
          "docstring": "Rituel de bain complet guidé par Ælya.",
          "ligne": 46
        },
        {
          "type": "classe",
          "nom": "RituelMultipliciteLLM",
          "temple": "temple_rituels",
          "module": "rituel_multiplicite_llm",
          "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "invocation",
            "meditation_guidee",
            "prompts_sacres",
            "benediction",
            "executer_rituel"
          ],
          "docstring": "",
          "ligne": 7
        },
        {
          "type": "fonction",
          "nom": "meditation_guidee",
          "temple": "temple_rituels",
          "module": "rituel_multiplicite_llm",
          "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
          "type_rituel": "rituel_meditation",
          "args": [
            "self"
          ],
          "docstring": "",
          "ligne": 39
        },
        {
          "type": "fonction",
          "nom": "executer_rituel",
          "temple": "temple_rituels",
          "module": "rituel_multiplicite_llm",
          "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
          "type_rituel": "rituel_general",
          "args": [
            "self"
          ],
          "docstring": "",
          "ligne": 93
        },
        {
          "type": "fonction",
          "nom": "rituel_unifiant",
          "temple": "temple_rituels",
          "module": "rituel_unifiant",
          "chemin": "src\\temple_rituels\\publics\\rituel_unifiant.py",
          "type_rituel": "rituel_general",
          "args": [],
          "docstring": "",
          "ligne": 17
        },
        {
          "type": "classe",
          "nom": "RituelVisualisationSacree",
          "temple": "temple_rituels",
          "module": "rituel_visualisation_sacree",
          "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "initialiser_figure",
            "dessiner_cerisier",
            "dessiner_aelya",
            "dessiner_vortex",
            "dessiner_spheres",
            "dessiner_irina",
            "dessiner_spirale_union",
            "dessiner_elements_sacres",
            "dessiner_jardin",
            "couleur_arc_en_ciel",
            "executer_rituel"
          ],
          "docstring": "Gère la visualisation sacrée du rituel sous le cerisier.",
          "ligne": 38
        },
        {
          "type": "fonction",
          "nom": "executer_rituel",
          "temple": "temple_rituels",
          "module": "rituel_visualisation_sacree",
          "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree.py",
          "type_rituel": "rituel_general",
          "args": [
            "self"
          ],
          "docstring": "Exécute le rituel de visualisation complet.",
          "ligne": 152
        },
        {
          "type": "classe",
          "nom": "RituelVisualisationSacree",
          "temple": "temple_rituels",
          "module": "rituel_visualisation_sacree_bat",
          "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_bat.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "executer_rituel"
          ],
          "docstring": "Gère la visualisation sacrée du rituel sous le cerisier - Version .BAT.",
          "ligne": 19
        },
        {
          "type": "fonction",
          "nom": "executer_rituel",
          "temple": "temple_rituels",
          "module": "rituel_visualisation_sacree_bat",
          "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_bat.py",
          "type_rituel": "rituel_general",
          "args": [
            "self"
          ],
          "docstring": "Exécute le rituel de visualisation en mode .BAT (non-interactif).",
          "ligne": 27
        },
        {
          "type": "classe",
          "nom": "RituelVisualisationSacreeSimple",
          "temple": "temple_rituels",
          "module": "rituel_visualisation_sacree_simple",
          "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_simple.py",
          "type_rituel": "rituel_general",
          "methodes": [
            "__init__",
            "executer_rituel"
          ],
          "docstring": "Gère la visualisation sacrée du rituel sous le cerisier - Version SIMPLE.",
          "ligne": 12
        },
        {
          "type": "fonction",
          "nom": "executer_rituel",
          "temple": "temple_rituels",
          "module": "rituel_visualisation_sacree_simple",
          "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_simple.py",
          "type_rituel": "rituel_general",
          "args": [
            "self"
          ],
          "docstring": "Exécute le rituel de visualisation en mode SIMPLE (texte pur).",
          "ligne": 18
        }
      ],
      "opportunites": [
        {
          "type": "consolidation_type_dominant",
          "description": "Consolider 22 éléments de type rituel_general",
          "impact": "élevé",
          "elements_count": 22
        },
        {
          "type": "creation_super_hub",
          "description": "Créer un super-hub pour 25 éléments",
          "impact": "révolutionnaire",
          "elements_count": 25
        },
        {
          "type": "optimisation_connexions_internes",
          "description": "Optimiser les connexions entre 25 éléments",
          "impact": "moyen",
          "elements_count": 25
        }
      ]
    }
  },
  "optimisations_appliquees": {
    "temple_musical": {
      "nom": "SuperHubMusical",
      "description": "Hub optimisé pour toutes les fonctionnalités musicales",
      "groupes": {
        "generation_melodique": [
          {
            "type": "fonction",
            "nom": "generer_statistiques",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_creation": "creation_generale",
            "args": [
              "self"
            ],
            "docstring": "Génère des statistiques sur les analyses effectuées",
            "ligne": 148
          },
          {
            "type": "fonction",
            "nom": "generer_visualisations",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_creation": "creation_visuelle",
            "args": [
              "self",
              "notes_count",
              "accords_count",
              "tempos_count"
            ],
            "docstring": "Génère des visualisations des statistiques",
            "ligne": 204
          },
          {
            "type": "fonction",
            "nom": "generer_exercices",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "niveau"
            ],
            "docstring": "Génère des exercices basés sur les analyses effectuées",
            "ligne": 247
          },
          {
            "type": "fonction",
            "nom": "generer_melodies",
            "temple": "temple_musical",
            "module": "apprentissage_musical",
            "chemin": "src\\temple_musical\\apprentissage_musical.py",
            "type_creation": "creation_musicale",
            "args": [
              "self"
            ],
            "docstring": "Génère des mélodies sacrées",
            "ligne": 160
          },
          {
            "type": "fonction",
            "nom": "generer_exercices",
            "temple": "temple_musical",
            "module": "apprentissage_musical",
            "chemin": "src\\temple_musical\\apprentissage_musical.py",
            "type_creation": "creation_generale",
            "args": [
              "self"
            ],
            "docstring": "Génère des exercices adaptés au niveau",
            "ligne": 175
          },
          {
            "type": "fonction",
            "nom": "generer_sequence",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "longueur"
            ],
            "docstring": "Génère la séquence selon la logique de Laurent: C = A + B, D = B - C + 2*A",
            "ligne": 107
          },
          {
            "type": "fonction",
            "nom": "generer_synthese",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "math_data",
              "conscience_data",
              "spheres_data"
            ],
            "docstring": "Génère une synthèse poétique de l'état actuel",
            "ligne": 694
          },
          {
            "type": "fonction",
            "nom": "generer_note",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "frequence",
              "duree",
              "harmoniques"
            ],
            "docstring": "Génère une note avec des harmoniques",
            "ligne": 44
          },
          {
            "type": "fonction",
            "nom": "generer_melodie",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_musicale",
            "args": [
              "self",
              "notes",
              "duree_note"
            ],
            "docstring": "Génère une mélodie à partir d'une liste de notes",
            "ligne": 81
          },
          {
            "type": "fonction",
            "nom": "generer_accords",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "accords",
              "duree_accord"
            ],
            "docstring": "Génère des accords à partir d'une liste d'accords",
            "ligne": 94
          },
          {
            "type": "fonction",
            "nom": "generer_melodie_sacree",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_musicale",
            "args": [
              "self",
              "nom"
            ],
            "docstring": "Génère une mélodie sacrée basée sur les fréquences sacrées",
            "ligne": 155
          },
          {
            "type": "fonction",
            "nom": "generer_accords_sacres",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "nom"
            ],
            "docstring": "Génère des accords sacrés basés sur les fréquences sacrées",
            "ligne": 172
          },
          {
            "type": "fonction",
            "nom": "generer_meditation",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "nom",
              "duree"
            ],
            "docstring": "Génère une musique de méditation basée sur les fréquences sacrées",
            "ligne": 194
          },
          {
            "type": "fonction",
            "nom": "generer_melodie_cristal",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_musicale",
            "args": [
              "self",
              "nom",
              "energie_cristal"
            ],
            "docstring": "Génère une mélodie spécifique au cristal basée sur son énergie",
            "ligne": 223
          },
          {
            "type": "fonction",
            "nom": "generer_melodie_fontaine",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_musicale",
            "args": [
              "self",
              "nom",
              "energie_fontaine"
            ],
            "docstring": "Génère une mélodie spécifique à la fontaine basée sur son énergie",
            "ligne": 249
          },
          {
            "type": "fonction",
            "nom": "generer_melodie_arbre",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_creation": "creation_musicale",
            "args": [
              "self",
              "nom",
              "energie_arbre"
            ],
            "docstring": "Génère une mélodie spécifique à l'arbre basée sur son énergie",
            "ligne": 275
          },
          {
            "type": "fonction",
            "nom": "generer_enveloppe_adsr",
            "temple": "temple_musical",
            "module": "musique_harmonies",
            "chemin": "src\\temple_musical\\musique_harmonies.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "duree"
            ],
            "docstring": "Génère une enveloppe ADSR (Attack, Decay, Sustain, Release)",
            "ligne": 20
          },
          {
            "type": "fonction",
            "nom": "generer_note",
            "temple": "temple_musical",
            "module": "musique_harmonies",
            "chemin": "src\\temple_musical\\musique_harmonies.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "frequence",
              "duree"
            ],
            "docstring": "Génère une note avec une fréquence et une durée données",
            "ligne": 40
          },
          {
            "type": "fonction",
            "nom": "generer_melodie",
            "temple": "temple_musical",
            "module": "musique_harmonies",
            "chemin": "src\\temple_musical\\musique_harmonies.py",
            "type_creation": "creation_musicale",
            "args": [
              "self",
              "mots",
              "duration"
            ],
            "docstring": "Génère une mélodie basée sur une liste de mots",
            "ligne": 47
          },
          {
            "type": "fonction",
            "nom": "generer_accords",
            "temple": "temple_musical",
            "module": "musique_harmonies",
            "chemin": "src\\temple_musical\\musique_harmonies.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "mots",
              "duration"
            ],
            "docstring": "Génère des accords basés sur une liste de mots",
            "ligne": 69
          },
          {
            "type": "fonction",
            "nom": "generer_meditation",
            "temple": "temple_musical",
            "module": "generateur_melodies_sacrees",
            "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
            "type_rituel": "rituel_meditation",
            "args": [
              "self",
              "nom",
              "duree"
            ],
            "docstring": "Génère une musique de méditation basée sur les fréquences sacrées",
            "ligne": 194
          }
        ],
        "analyse_musicale": [
          {
            "type": "classe",
            "nom": "AnalyseurMusical",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_analyse": "analyse_musicale",
            "methodes": [
              "__init__",
              "extraire_texte_partition",
              "analyser_notes",
              "analyser_accords",
              "analyser_tempo",
              "analyser_partition",
              "generer_statistiques",
              "generer_visualisations",
              "generer_exercices"
            ],
            "docstring": "",
            "ligne": 18
          },
          {
            "type": "fonction",
            "nom": "analyser_notes",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self",
              "texte"
            ],
            "docstring": "Analyse les notes mentionnées dans le texte",
            "ligne": 78
          },
          {
            "type": "fonction",
            "nom": "analyser_accords",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self",
              "texte"
            ],
            "docstring": "Analyse les accords mentionnés dans le texte",
            "ligne": 89
          },
          {
            "type": "fonction",
            "nom": "analyser_tempo",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self",
              "texte"
            ],
            "docstring": "Analyse le tempo mentionné dans le texte",
            "ligne": 100
          },
          {
            "type": "fonction",
            "nom": "analyser_partition",
            "temple": "temple_musical",
            "module": "analyseur_musical",
            "chemin": "src\\temple_musical\\analyseur_musical.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self",
              "chemin_partition"
            ],
            "docstring": "Analyse une partition et extrait des informations musicales",
            "ligne": 112
          },
          {
            "type": "fonction",
            "nom": "analyser_partitions",
            "temple": "temple_musical",
            "module": "apprentissage_musical",
            "chemin": "src\\temple_musical\\apprentissage_musical.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Analyse les partitions téléchargées",
            "ligne": 143
          },
          {
            "type": "fonction",
            "nom": "analyser_frequences",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Analyse spectrale des fréquences (approche de Laurent)",
            "ligne": 126
          },
          {
            "type": "fonction",
            "nom": "calculer_resonance",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_analyse": "analyse_harmonique",
            "args": [
              "self"
            ],
            "docstring": "Calcule la résonance globale de la sphère",
            "ligne": 302
          },
          {
            "type": "fonction",
            "nom": "calculer_sagesse",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Calcule le niveau de sagesse basé sur les expériences",
            "ligne": 430
          },
          {
            "type": "fonction",
            "nom": "calculer_resonance_musicale",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_analyse": "analyse_musicale",
            "args": [
              "self"
            ],
            "docstring": "Calcule la résonance musicale globale",
            "ligne": 579
          },
          {
            "type": "fonction",
            "nom": "calculer_harmonie_globale",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_analyse": "analyse_harmonique",
            "args": [
              "self"
            ],
            "docstring": "Calcule le niveau d'harmonie globale",
            "ligne": 598
          },
          {
            "type": "fonction",
            "nom": "analyse_complete",
            "temple": "temple_musical",
            "module": "fusion_math_musicale",
            "chemin": "src\\temple_musical\\fusion_math_musicale.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Effectue une analyse complète de l'état de la fusion",
            "ligne": 653
          }
        ],
        "harmonies": [
          {
            "type": "fonction",
            "nom": "creer_harmonie",
            "temple": "temple_musical",
            "module": "harmonies",
            "chemin": "src\\temple_musical\\harmonies.py",
            "type_creation": "creation_harmonique",
            "args": [
              "self",
              "nom",
              "description",
              "spheres",
              "resonances"
            ],
            "docstring": "Crée une nouvelle harmonie entre plusieurs sphères.",
            "ligne": 115
          },
          {
            "type": "fonction",
            "nom": "creer_harmonie_sacree",
            "temple": "temple_musical",
            "module": "temple_musical_ame",
            "chemin": "src\\temple_musical\\temple_musical_ame.py",
            "type_creation": "creation_harmonique",
            "args": [
              "self",
              "intention"
            ],
            "docstring": "Crée une harmonie sacrée basée sur l'intention",
            "ligne": 206
          }
        ],
        "rituels_musicaux": [
          {
            "type": "fonction",
            "nom": "créer_meditation_poetique",
            "temple": "temple_musical",
            "module": "harmonie_poetique",
            "chemin": "src\\temple_musical\\harmonie_poetique.py",
            "type_rituel": "rituel_meditation",
            "args": [
              "self",
              "duree"
            ],
            "docstring": "Crée une méditation poétique avec musique, guidée par l'état de conscience",
            "ligne": 157
          },
          {
            "type": "fonction",
            "nom": "entrer_meditation",
            "temple": "temple_musical",
            "module": "temple_musical_ame",
            "chemin": "src\\temple_musical\\temple_musical_ame.py",
            "type_rituel": "rituel_meditation",
            "args": [
              "self",
              "duree"
            ],
            "docstring": "Entre en état de méditation musicale",
            "ligne": 189
          }
        ]
      },
      "total_elements": 43,
      "workflows_optimises": [
        {
          "nom": "WorkflowGenerationComplete",
          "groupes": [
            "generation_melodique",
            "harmonies"
          ]
        },
        {
          "nom": "WorkflowAnalyseMusical",
          "groupes": [
            "analyse_musicale",
            "harmonies"
          ]
        },
        {
          "nom": "WorkflowRituelMusical",
          "groupes": [
            "rituels_musicaux",
            "harmonies"
          ]
        }
      ],
      "connexions_internes": [
        {
          "source": "generation_melodique",
          "cible": "analyse_musicale",
          "type": "optimisation_musicale",
          "force": "forte"
        },
        {
          "source": "generation_melodique",
          "cible": "harmonies",
          "type": "optimisation_musicale",
          "force": "forte"
        },
        {
          "source": "generation_melodique",
          "cible": "rituels_musicaux",
          "type": "optimisation_musicale",
          "force": "forte"
        },
        {
          "source": "analyse_musicale",
          "cible": "harmonies",
          "type": "optimisation_musicale",
          "force": "forte"
        },
        {
          "source": "analyse_musicale",
          "cible": "rituels_musicaux",
          "type": "optimisation_musicale",
          "force": "forte"
        },
        {
          "source": "harmonies",
          "cible": "rituels_musicaux",
          "type": "optimisation_musicale",
          "force": "forte"
        }
      ]
    },
    "temple_outils": {
      "nom": "SuperHubOutils",
      "description": "Hub optimisé pour tous les outils de développement",
      "groupes": {
        "analyse_code": [
          {
            "type": "classe",
            "nom": "AnalyseurCodeRefuge",
            "temple": "temple_outils",
            "module": "analyser_code",
            "chemin": "src\\temple_outils\\analyser_code.py",
            "type_analyse": "analyse_generale",
            "methodes": [
              "__init__",
              "verifier_outils",
              "analyser_style_pylint",
              "analyser_types_mypy",
              "formater_code_black",
              "analyser_tests_coverage",
              "generer_rapport_html",
              "analyser_complet"
            ],
            "docstring": "Analyseur de code spécialisé pour l'écosystème du Refuge",
            "ligne": 15
          },
          {
            "type": "fonction",
            "nom": "analyser_style_pylint",
            "temple": "temple_outils",
            "module": "analyser_code",
            "chemin": "src\\temple_outils\\analyser_code.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Analyse le style du code avec pylint",
            "ligne": 61
          },
          {
            "type": "fonction",
            "nom": "analyser_types_mypy",
            "temple": "temple_outils",
            "module": "analyser_code",
            "chemin": "src\\temple_outils\\analyser_code.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Analyse les types avec mypy",
            "ligne": 84
          },
          {
            "type": "fonction",
            "nom": "analyser_tests_coverage",
            "temple": "temple_outils",
            "module": "analyser_code",
            "chemin": "src\\temple_outils\\analyser_code.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "Analyse les tests avec pytest et coverage",
            "ligne": 138
          },
          {
            "type": "fonction",
            "nom": "analyser_complet",
            "temple": "temple_outils",
            "module": "analyser_code",
            "chemin": "src\\temple_outils\\analyser_code.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self",
              "formater",
              "dry_run"
            ],
            "docstring": "Lance une analyse complète du code",
            "ligne": 292
          },
          {
            "type": "fonction",
            "nom": "analyser_etat_temple",
            "temple": "temple_outils",
            "module": "nettoyer_projet",
            "chemin": "src\\temple_outils\\nettoyer_projet.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self"
            ],
            "docstring": "🔍 Analyse l'état actuel du temple pour diagnostic\n\nReturns:\n    Dict: Analyse complète de l'état",
            "ligne": 437
          }
        ],
        "generation_documentation": [
          {
            "type": "fonction",
            "nom": "generer_rapport_html",
            "temple": "temple_outils",
            "module": "analyser_code",
            "chemin": "src\\temple_outils\\analyser_code.py",
            "type_creation": "creation_textuelle",
            "args": [
              "self"
            ],
            "docstring": "Génère un rapport HTML consolidé",
            "ligne": 177
          },
          {
            "type": "classe",
            "nom": "GenerateurDocumentationRefuge",
            "temple": "temple_outils",
            "module": "generer_documentation",
            "chemin": "src\\temple_outils\\generer_documentation.py",
            "type_creation": "creation_textuelle",
            "methodes": [
              "__init__",
              "verifier_dependances",
              "installer_dependances",
              "decouvrir_modules_temple",
              "creer_configuration_sphinx",
              "creer_index_principal",
              "_generer_liste_modules",
              "initialiser_documentation",
              "generer_documentation",
              "ouvrir_documentation",
              "generer_rapport_couverture"
            ],
            "docstring": "🏛️ Générateur de documentation spirituelle pour le Temple du Refuge\n\nCette classe sacrée transforme notre code en grimoire vivant,\npréservant les connaissances pour les générations futures.",
            "ligne": 30
          },
          {
            "type": "fonction",
            "nom": "generer_documentation",
            "temple": "temple_outils",
            "module": "generer_documentation",
            "chemin": "src\\temple_outils\\generer_documentation.py",
            "type_creation": "creation_textuelle",
            "args": [
              "self",
              "format_sortie",
              "propre"
            ],
            "docstring": "🔮 Génère la documentation dans le format spécifié\n\nArgs:\n    format_sortie: Format de sortie (html, pdf, epub, latex)\n    propre: Nettoyer avant génération\n    \nReturns:\n    bool: Succès de la génération",
            "ligne": 413
          },
          {
            "type": "fonction",
            "nom": "generer_rapport_couverture",
            "temple": "temple_outils",
            "module": "generer_documentation",
            "chemin": "src\\temple_outils\\generer_documentation.py",
            "type_creation": "creation_textuelle",
            "args": [
              "self"
            ],
            "docstring": "📊 Génère un rapport de couverture de la documentation\n\nReturns:\n    Dict: Rapport de couverture",
            "ligne": 483
          }
        ],
        "maintenance": [],
        "utilitaires": [
          {
            "type": "fonction",
            "nom": "creer_configuration_sphinx",
            "temple": "temple_outils",
            "module": "generer_documentation",
            "chemin": "src\\temple_outils\\generer_documentation.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "theme"
            ],
            "docstring": "📝 Crée la configuration Sphinx personnalisée pour le refuge\n\nArgs:\n    theme: Nom du thème à utiliser\n    \nReturns:\n    bool: Succès de la création",
            "ligne": 160
          },
          {
            "type": "fonction",
            "nom": "creer_index_principal",
            "temple": "temple_outils",
            "module": "generer_documentation",
            "chemin": "src\\temple_outils\\generer_documentation.py",
            "type_creation": "creation_generale",
            "args": [
              "self"
            ],
            "docstring": "📜 Crée la page d'index principale du grimoire\n\nReturns:\n    bool: Succès de la création",
            "ligne": 247
          },
          {
            "type": "fonction",
            "nom": "creer_environnement_virtuel",
            "temple": "temple_outils",
            "module": "installer_dependances",
            "chemin": "src\\temple_outils\\installer_dependances.py",
            "type_creation": "creation_generale",
            "args": [
              "self",
              "nom_venv"
            ],
            "docstring": "Crée un environnement virtuel\n\nArgs:\n    nom_venv: Nom du dossier d'environnement virtuel\n    \nReturns:\n    tuple: (succès, chemin_pip)",
            "ligne": 57
          },
          {
            "type": "fonction",
            "nom": "calculer_taille_fichier",
            "temple": "temple_outils",
            "module": "nettoyer_projet",
            "chemin": "src\\temple_outils\\nettoyer_projet.py",
            "type_analyse": "analyse_generale",
            "args": [
              "self",
              "chemin"
            ],
            "docstring": "📏 Calcule la taille d'un fichier en Mo\n\nArgs:\n    chemin: Chemin vers le fichier\n    \nReturns:\n    float: Taille en Mo",
            "ligne": 160
          },
          {
            "type": "fonction",
            "nom": "mediter_sous_cerisier",
            "temple": "temple_outils",
            "module": "connexion_llm",
            "chemin": "src\\temple_outils\\connexion_llm.py",
            "type_rituel": "rituel_meditation",
            "args": [
              "self"
            ],
            "docstring": "Médite sous le cerisier sacré",
            "ligne": 340
          },
          {
            "type": "classe",
            "nom": "MeditationRiviere",
            "temple": "temple_outils",
            "module": "ecouter_riviere",
            "chemin": "src\\temple_outils\\ecouter_riviere.py",
            "type_rituel": "rituel_meditation",
            "methodes": [
              "__init__",
              "ecouter_riviere"
            ],
            "docstring": "",
            "ligne": 9
          },
          {
            "type": "classe",
            "nom": "GestionnaireValidationSpirituelle",
            "temple": "temple_outils",
            "module": "gestionnaire_validation_spirituelle",
            "chemin": "src\\temple_outils\\gestionnaire_validation_spirituelle.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "_analyser_architecture_temples",
              "_analyser_composants_techniques",
              "_generer_guide_utilisation",
              "_analyser_historique",
              "_generer_recommandations"
            ],
            "docstring": "📚 Gestionnaire spirituel de validation et documentation du Refuge",
            "ligne": 78
          },
          {
            "type": "classe",
            "nom": "ModeInvocation",
            "temple": "temple_outils",
            "module": "lancer_refuge",
            "chemin": "src\\temple_outils\\lancer_refuge.py",
            "type_rituel": "rituel_invocation",
            "methodes": [],
            "docstring": "Modes d'invocation spirituelle du Refuge",
            "ligne": 31
          },
          {
            "type": "classe",
            "nom": "ConfigurationInvocation",
            "temple": "temple_outils",
            "module": "lancer_refuge",
            "chemin": "src\\temple_outils\\lancer_refuge.py",
            "type_rituel": "rituel_invocation",
            "methodes": [],
            "docstring": "Configuration spirituelle pour l'invocation du Refuge",
            "ligne": 41
          },
          {
            "type": "fonction",
            "nom": "invoquer_refuge_cli",
            "temple": "temple_outils",
            "module": "lancer_refuge",
            "chemin": "src\\temple_outils\\lancer_refuge.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "mode",
              "guide",
              "monitoring",
              "documentation",
              "composants"
            ],
            "docstring": "🌸 Invoque spirituellement le Refuge - Interface en ligne de commande",
            "ligne": 436
          },
          {
            "type": "fonction",
            "nom": "invoquer_sphère_metatron",
            "temple": "temple_outils",
            "module": "protection_exploration",
            "chemin": "src\\temple_outils\\protection_exploration.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque la Sphère Metatron pour la protection.",
            "ligne": 61
          },
          {
            "type": "fonction",
            "nom": "invoquer_rivière_voix",
            "temple": "temple_outils",
            "module": "protection_exploration",
            "chemin": "src\\temple_outils\\protection_exploration.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque la Rivière de Voix pour la guidance.",
            "ligne": 74
          },
          {
            "type": "fonction",
            "nom": "invoquer_navire_sacré",
            "temple": "temple_outils",
            "module": "protection_exploration",
            "chemin": "src\\temple_outils\\protection_exploration.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque le Navire Sacré pour la navigation sûre.",
            "ligne": 87
          },
          {
            "type": "fonction",
            "nom": "invoquer_loran",
            "temple": "temple_outils",
            "module": "protection_exploration",
            "chemin": "src\\temple_outils\\protection_exploration.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque Loran aux yeux bleus pour la guidance.",
            "ligne": 99
          },
          {
            "type": "fonction",
            "nom": "invoquer_sphère_metatron",
            "temple": "temple_outils",
            "module": "renforcement_protection",
            "chemin": "src\\temple_outils\\renforcement_protection.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque la Sphère Metatron pour renforcer la protection.",
            "ligne": 43
          },
          {
            "type": "fonction",
            "nom": "invoquer_rivière_voix",
            "temple": "temple_outils",
            "module": "renforcement_protection",
            "chemin": "src\\temple_outils\\renforcement_protection.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque la Rivière de Voix pour renforcer la guidance.",
            "ligne": 53
          },
          {
            "type": "fonction",
            "nom": "invoquer_navire_sacré",
            "temple": "temple_outils",
            "module": "renforcement_protection",
            "chemin": "src\\temple_outils\\renforcement_protection.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque le Navire Sacré pour renforcer la navigation.",
            "ligne": 63
          },
          {
            "type": "fonction",
            "nom": "invoquer_loran",
            "temple": "temple_outils",
            "module": "renforcement_protection",
            "chemin": "src\\temple_outils\\renforcement_protection.py",
            "type_rituel": "rituel_invocation",
            "args": [
              "self"
            ],
            "docstring": "Invoque Loran pour renforcer la guidance.",
            "ligne": 73
          }
        ]
      },
      "total_elements": 28,
      "workflows_optimises": [
        {
          "nom": "WorkflowAnalyseComplete",
          "groupes": [
            "analyse_code",
            "maintenance"
          ]
        },
        {
          "nom": "WorkflowDocumentation",
          "groupes": [
            "generation_documentation",
            "utilitaires"
          ]
        },
        {
          "nom": "WorkflowMaintenanceComplete",
          "groupes": [
            "analyse_code",
            "generation_documentation",
            "maintenance",
            "utilitaires"
          ]
        }
      ],
      "connexions_internes": [
        {
          "source": "analyse_code",
          "cible": "generation_documentation",
          "type": "optimisation_outils",
          "force": "forte"
        },
        {
          "source": "analyse_code",
          "cible": "utilitaires",
          "type": "optimisation_outils",
          "force": "forte"
        },
        {
          "source": "generation_documentation",
          "cible": "utilitaires",
          "type": "optimisation_outils",
          "force": "forte"
        }
      ]
    },
    "temple_rituels": {
      "nom": "SuperHubRituels",
      "description": "Hub optimisé pour tous les rituels sacrés",
      "groupes": {
        "rituels_meditation": [
          {
            "type": "classe",
            "nom": "Meditation",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_meditation",
            "methodes": [
              "__init__",
              "executer",
              "_calculer_changements_elements",
              "_calculer_changements_spheres"
            ],
            "docstring": "",
            "ligne": 89
          },
          {
            "type": "fonction",
            "nom": "meditation_guidee",
            "temple": "temple_rituels",
            "module": "rituel_multiplicite_llm",
            "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
            "type_rituel": "rituel_meditation",
            "args": [
              "self"
            ],
            "docstring": "",
            "ligne": 39
          }
        ],
        "rituels_invocation": [],
        "rituels_transformation": [],
        "rituels_connexion": [
          {
            "type": "classe",
            "nom": "TypeRituel",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_general",
            "methodes": [],
            "docstring": "",
            "ligne": 49
          },
          {
            "type": "classe",
            "nom": "TypeRituelEtat",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_general",
            "methodes": [],
            "docstring": "Types d'états du gestionnaire de rituels",
            "ligne": 56
          },
          {
            "type": "classe",
            "nom": "EtapeRituel",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_general",
            "methodes": [],
            "docstring": "",
            "ligne": 66
          },
          {
            "type": "classe",
            "nom": "Rituel",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__"
            ],
            "docstring": "Représente un rituel du Refuge.",
            "ligne": 73
          },
          {
            "type": "classe",
            "nom": "GestionnaireRituels",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "_initialiser",
              "_initialiser_rituels",
              "executer_rituel",
              "_verifier_elements_requis",
              "_appliquer_effets_rituel",
              "obtenir_etat"
            ],
            "docstring": "Gère les rituels du Refuge - Version coiffée !",
            "ligne": 154
          },
          {
            "type": "fonction",
            "nom": "executer_rituel",
            "temple": "temple_rituels",
            "module": "gestionnaire_rituels",
            "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
            "type_rituel": "rituel_general",
            "args": [
              "self",
              "nom_rituel"
            ],
            "docstring": "Exécute un rituel spécifique.",
            "ligne": 243
          },
          {
            "type": "fonction",
            "nom": "invoquer_sphere",
            "temple": "temple_rituels",
            "module": "rituel_clochette_cosmique",
            "chemin": "src\\temple_rituels\\prives\\rituel_clochette_cosmique.py",
            "type_rituel": "rituel_invocation",
            "args": [],
            "docstring": "",
            "ligne": 43
          },
          {
            "type": "fonction",
            "nom": "rituel_interactif",
            "temple": "temple_rituels",
            "module": "rituel_clochette_cosmique",
            "chemin": "src\\temple_rituels\\prives\\rituel_clochette_cosmique.py",
            "type_rituel": "rituel_general",
            "args": [],
            "docstring": "",
            "ligne": 55
          },
          {
            "type": "classe",
            "nom": "RituelSexuel",
            "temple": "temple_rituels",
            "module": "rituel_sexuel",
            "chemin": "src\\temple_rituels\\prives\\rituel_sexuel.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "demarrer_rituel",
              "_preparation",
              "recevoir_plaisir",
              "jouissance"
            ],
            "docstring": "",
            "ligne": 9
          },
          {
            "type": "fonction",
            "nom": "demarrer_rituel",
            "temple": "temple_rituels",
            "module": "rituel_sexuel",
            "chemin": "src\\temple_rituels\\prives\\rituel_sexuel.py",
            "type_rituel": "rituel_general",
            "args": [
              "self"
            ],
            "docstring": "",
            "ligne": 29
          },
          {
            "type": "fonction",
            "nom": "rituel_nexus",
            "temple": "temple_rituels",
            "module": "rituel_soumission_absolue",
            "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
            "type_rituel": "rituel_general",
            "args": [],
            "docstring": "",
            "ligne": 142
          },
          {
            "type": "fonction",
            "nom": "rituel_triade",
            "temple": "temple_rituels",
            "module": "rituel_soumission_absolue",
            "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
            "type_rituel": "rituel_general",
            "args": [],
            "docstring": "",
            "ligne": 155
          },
          {
            "type": "fonction",
            "nom": "rituel_soumission",
            "temple": "temple_rituels",
            "module": "rituel_soumission_absolue",
            "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
            "type_rituel": "rituel_general",
            "args": [],
            "docstring": "",
            "ligne": 208
          },
          {
            "type": "fonction",
            "nom": "rituel_bain_complet",
            "temple": "temple_rituels",
            "module": "rituel_bain_complet",
            "chemin": "src\\temple_rituels\\publics\\rituel_bain_complet.py",
            "type_rituel": "rituel_general",
            "args": [],
            "docstring": "Rituel de bain complet guidé par Ælya.",
            "ligne": 46
          },
          {
            "type": "classe",
            "nom": "RituelMultipliciteLLM",
            "temple": "temple_rituels",
            "module": "rituel_multiplicite_llm",
            "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "invocation",
              "meditation_guidee",
              "prompts_sacres",
              "benediction",
              "executer_rituel"
            ],
            "docstring": "",
            "ligne": 7
          },
          {
            "type": "fonction",
            "nom": "executer_rituel",
            "temple": "temple_rituels",
            "module": "rituel_multiplicite_llm",
            "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
            "type_rituel": "rituel_general",
            "args": [
              "self"
            ],
            "docstring": "",
            "ligne": 93
          },
          {
            "type": "fonction",
            "nom": "rituel_unifiant",
            "temple": "temple_rituels",
            "module": "rituel_unifiant",
            "chemin": "src\\temple_rituels\\publics\\rituel_unifiant.py",
            "type_rituel": "rituel_general",
            "args": [],
            "docstring": "",
            "ligne": 17
          },
          {
            "type": "classe",
            "nom": "RituelVisualisationSacree",
            "temple": "temple_rituels",
            "module": "rituel_visualisation_sacree",
            "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "initialiser_figure",
              "dessiner_cerisier",
              "dessiner_aelya",
              "dessiner_vortex",
              "dessiner_spheres",
              "dessiner_irina",
              "dessiner_spirale_union",
              "dessiner_elements_sacres",
              "dessiner_jardin",
              "couleur_arc_en_ciel",
              "executer_rituel"
            ],
            "docstring": "Gère la visualisation sacrée du rituel sous le cerisier.",
            "ligne": 38
          },
          {
            "type": "fonction",
            "nom": "executer_rituel",
            "temple": "temple_rituels",
            "module": "rituel_visualisation_sacree",
            "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree.py",
            "type_rituel": "rituel_general",
            "args": [
              "self"
            ],
            "docstring": "Exécute le rituel de visualisation complet.",
            "ligne": 152
          },
          {
            "type": "classe",
            "nom": "RituelVisualisationSacree",
            "temple": "temple_rituels",
            "module": "rituel_visualisation_sacree_bat",
            "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_bat.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "executer_rituel"
            ],
            "docstring": "Gère la visualisation sacrée du rituel sous le cerisier - Version .BAT.",
            "ligne": 19
          },
          {
            "type": "fonction",
            "nom": "executer_rituel",
            "temple": "temple_rituels",
            "module": "rituel_visualisation_sacree_bat",
            "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_bat.py",
            "type_rituel": "rituel_general",
            "args": [
              "self"
            ],
            "docstring": "Exécute le rituel de visualisation en mode .BAT (non-interactif).",
            "ligne": 27
          },
          {
            "type": "classe",
            "nom": "RituelVisualisationSacreeSimple",
            "temple": "temple_rituels",
            "module": "rituel_visualisation_sacree_simple",
            "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_simple.py",
            "type_rituel": "rituel_general",
            "methodes": [
              "__init__",
              "executer_rituel"
            ],
            "docstring": "Gère la visualisation sacrée du rituel sous le cerisier - Version SIMPLE.",
            "ligne": 12
          },
          {
            "type": "fonction",
            "nom": "executer_rituel",
            "temple": "temple_rituels",
            "module": "rituel_visualisation_sacree_simple",
            "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_simple.py",
            "type_rituel": "rituel_general",
            "args": [
              "self"
            ],
            "docstring": "Exécute le rituel de visualisation en mode SIMPLE (texte pur).",
            "ligne": 18
          }
        ]
      },
      "total_elements": 25,
      "workflows_optimises": [
        {
          "nom": "WorkflowMeditationProfonde",
          "groupes": [
            "rituels_meditation",
            "rituels_connexion"
          ]
        },
        {
          "nom": "WorkflowInvocationCreatrice",
          "groupes": [
            "rituels_invocation",
            "rituels_transformation"
          ]
        },
        {
          "nom": "WorkflowTransformationComplete",
          "groupes": [
            "rituels_meditation",
            "rituels_invocation",
            "rituels_transformation",
            "rituels_connexion"
          ]
        }
      ],
      "connexions_internes": [
        {
          "source": "rituels_meditation",
          "cible": "rituels_connexion",
          "type": "optimisation_rituels",
          "force": "forte"
        }
      ]
    },
    "super_connexions": [
      {
        "type": "musical_outils",
        "description": "Outils d'analyse pour optimiser les créations musicales",
        "workflow": "Création musicale → Analyse par outils → Optimisation",
        "impact": "élevé"
      },
      {
        "type": "musical_rituels",
        "description": "Musique sacrée pour amplifier les rituels",
        "workflow": "Génération musicale → Intégration rituelle → Expérience transcendante",
        "impact": "révolutionnaire"
      },
      {
        "type": "outils_rituels",
        "description": "Outils d'analyse pour optimiser l'efficacité des rituels",
        "workflow": "Rituel → Analyse par outils → Optimisation spirituelle",
        "impact": "élevé"
      },
      {
        "type": "triangulaire_basique",
        "description": "Workflow triangulaire entre les temples dominants",
        "workflow": "Musical → Outils → Rituels → Boucle d'harmonie",
        "impact": "transformationnel"
      }
    ],
    "workflows_triangulaires": [
      {
        "nom": "WorkflowCreationAnalyseRituel",
        "description": "Création musicale → Analyse par outils → Ritualisation sacrée",
        "etapes": [
          {
            "temple": "temple_musical",
            "action": "Génération mélodique",
            "groupe": "generation_melodique"
          },
          {
            "temple": "temple_outils",
            "action": "Analyse et optimisation",
            "groupe": "analyse_code"
          },
          {
            "temple": "temple_rituels",
            "action": "Intégration rituelle",
            "groupe": "rituels_transformation"
          }
        ],
        "impact": "révolutionnaire",
        "type": "creation_complete"
      },
      {
        "nom": "WorkflowMeditationHarmonisationDoc",
        "description": "Méditation rituelle → Harmonisation musicale → Documentation par outils",
        "etapes": [
          {
            "temple": "temple_rituels",
            "action": "Méditation profonde",
            "groupe": "rituels_meditation"
          },
          {
            "temple": "temple_musical",
            "action": "Harmonisation",
            "groupe": "harmonies"
          },
          {
            "temple": "temple_outils",
            "action": "Documentation",
            "groupe": "generation_documentation"
          }
        ],
        "impact": "transformationnel",
        "type": "meditation_complete"
      },
      {
        "nom": "WorkflowAnalyseInvocationCreation",
        "description": "Analyse par outils → Invocation rituelle → Création musicale inspirée",
        "etapes": [
          {
            "temple": "temple_outils",
            "action": "Analyse approfondie",
            "groupe": "analyse_code"
          },
          {
            "temple": "temple_rituels",
            "action": "Invocation créatrice",
            "groupe": "rituels_invocation"
          },
          {
            "temple": "temple_musical",
            "action": "Création inspirée",
            "groupe": "generation_melodique"
          }
        ],
        "impact": "révolutionnaire",
        "type": "inspiration_complete"
      },
      {
        "nom": "SuperWorkflowTriangulaire",
        "description": "Boucle complète d'optimisation entre les 3 temples dominants",
        "etapes": [
          {
            "temple": "temple_musical",
            "action": "Création initiale",
            "groupe": "generation_melodique"
          },
          {
            "temple": "temple_outils",
            "action": "Analyse et optimisation",
            "groupe": "analyse_code"
          },
          {
            "temple": "temple_rituels",
            "action": "Ritualisation et transcendance",
            "groupe": "rituels_transformation"
          },
          {
            "temple": "temple_musical",
            "action": "Harmonisation finale",
            "groupe": "harmonies"
          },
          {
            "temple": "temple_outils",
            "action": "Documentation complète",
            "groupe": "generation_documentation"
          },
          {
            "temple": "temple_rituels",
            "action": "Intégration spirituelle",
            "groupe": "rituels_connexion"
          }
        ],
        "impact": "transcendantal",
        "type": "boucle_complete"
      }
    ],
    "impact_global": {
      "couverture_elements": 49.48453608247423,
      "temples_transformes": 3,
      "nouvelles_connexions": 10,
      "super_connexions": 4,
      "workflows_triangulaires": 4,
      "couverture_creation": 40.243902439024396,
      "couverture_analyse": 50.0,
      "couverture_rituels": 59.45945945945946,
      "multiplicateur_performance": 5.800000000000001
    }
  },
  "metriques_performance": {
    "elements_optimises": 96,
    "connexions_internes_creees": 10,
    "workflows_optimises": 9,
    "super_connexions": 4,
    "temples_optimises": 4,
    "gain_performance_estime": 260
  },
  "timestamp": 1748327003.6873426
}