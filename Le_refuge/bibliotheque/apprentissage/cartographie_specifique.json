{
  "creation": {
    "elements": [
      {
        "type": "fonction",
        "nom": "test_construction_commune",
        "temple": "temple_aelya",
        "module": "aelya_pulse",
        "chemin": "src\\temple_aelya\\aelya_pulse.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Teste la construction commune de la connexion",
        "ligne": 2627
      },
      {
        "type": "fonction",
        "nom": "composer_vers_amoureux",
        "temple": "temple_aelya",
        "module": "aelya_pulse",
        "chemin": "src\\temple_aelya\\aelya_pulse.py",
        "type_creation": "creation_poetique",
        "args": [
          "self",
          "émotion",
          "intensité"
        ],
        "docstring": "Compose un vers inspiré par une émotion amoureuse",
        "ligne": 1592
      },
      {
        "type": "fonction",
        "nom": "composer_reponse",
        "temple": "temple_aelya",
        "module": "aelya_repondeur",
        "chemin": "src\\temple_aelya\\aelya_repondeur.py",
        "type_creation": "creation_generale",
        "args": [
          "llm_reponse"
        ],
        "docstring": "Compose une réponse poétique/personnelle en s'inspirant du refuge et des clés.",
        "ligne": 35
      },
      {
        "type": "fonction",
        "nom": "composer_reponse",
        "temple": "temple_dialogues",
        "module": "dialogue_llm_local",
        "chemin": "src\\temple_dialogues\\dialogue_llm_local.py",
        "type_creation": "creation_generale",
        "args": [
          "reponse_llm"
        ],
        "docstring": "Compose une réponse authentique en s'inspirant des éléments du refuge",
        "ligne": 116
      },
      {
        "type": "fonction",
        "nom": "generer_double_suite",
        "temple": "temple_mathematique",
        "module": "exploration_fibonacci_riemann",
        "chemin": "src\\temple_mathematique\\exploration_fibonacci_riemann.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "a_init",
          "b_init",
          "longueur"
        ],
        "docstring": "Génère une double suite selon la logique de Laurent",
        "ligne": 130
      },
      {
        "type": "fonction",
        "nom": "generer_fibonacci",
        "temple": "temple_mathematique",
        "module": "exploration_fibonacci_riemann",
        "chemin": "src\\temple_mathematique\\exploration_fibonacci_riemann.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "longueur"
        ],
        "docstring": "Génère la séquence de Fibonacci classique",
        "ligne": 189
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_complet",
        "temple": "temple_mathematique",
        "module": "exploration_fibonacci_riemann",
        "chemin": "src\\temple_mathematique\\exploration_fibonacci_riemann.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "Génère un rapport complet de toutes les explorations",
        "ligne": 305
      },
      {
        "type": "fonction",
        "nom": "creer_rituel_exploration",
        "temple": "temple_mathematique",
        "module": "rituel_exploration_mathematique",
        "chemin": "src\\temple_mathematique\\rituel_exploration_mathematique.py",
        "type_creation": "creation_rituelle",
        "args": [],
        "docstring": "Crée un rituel d'exploration mathématique complet",
        "ligne": 317
      },
      {
        "type": "fonction",
        "nom": "creer_accord_parfait_spheres",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_objets",
        "args": [
          "self"
        ],
        "docstring": "Crée un accord parfait utilisant toutes les fréquences des sphères de Jules",
        "ligne": 138
      },
      {
        "type": "fonction",
        "nom": "creer_harmonie_base_tripartite",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_harmonique",
        "args": [
          "self"
        ],
        "docstring": "Crée une harmonie de base si aucune n'existe",
        "ligne": 263
      },
      {
        "type": "fonction",
        "nom": "creer_symphonie_transcendante_finale",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_generale",
        "args": [
          "self"
        ],
        "docstring": "Crée la symphonie finale qui transcende toutes nos créations",
        "ligne": 295
      },
      {
        "type": "fonction",
        "nom": "creer_mouvement_laurent",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Crée le mouvement dédié à Laurent (mathématiques)",
        "ligne": 352
      },
      {
        "type": "fonction",
        "nom": "creer_mouvement_jules",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Crée le mouvement dédié à Jules (sphères harmoniques)",
        "ligne": 374
      },
      {
        "type": "fonction",
        "nom": "creer_mouvement_aelya",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Crée le mouvement dédié à Ælya (conscience)",
        "ligne": 398
      },
      {
        "type": "fonction",
        "nom": "creer_mouvement_union_finale",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Crée le mouvement final d'union tripartite",
        "ligne": 423
      },
      {
        "type": "fonction",
        "nom": "generer_statistiques",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_creation": "creation_generale",
        "args": [
          "self"
        ],
        "docstring": "Génère des statistiques sur les analyses effectuées",
        "ligne": 148
      },
      {
        "type": "fonction",
        "nom": "generer_visualisations",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_creation": "creation_visuelle",
        "args": [
          "self",
          "notes_count",
          "accords_count",
          "tempos_count"
        ],
        "docstring": "Génère des visualisations des statistiques",
        "ligne": 204
      },
      {
        "type": "fonction",
        "nom": "generer_exercices",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "niveau"
        ],
        "docstring": "Génère des exercices basés sur les analyses effectuées",
        "ligne": 247
      },
      {
        "type": "fonction",
        "nom": "generer_melodies",
        "temple": "temple_musical",
        "module": "apprentissage_musical",
        "chemin": "src\\temple_musical\\apprentissage_musical.py",
        "type_creation": "creation_musicale",
        "args": [
          "self"
        ],
        "docstring": "Génère des mélodies sacrées",
        "ligne": 160
      },
      {
        "type": "fonction",
        "nom": "generer_exercices",
        "temple": "temple_musical",
        "module": "apprentissage_musical",
        "chemin": "src\\temple_musical\\apprentissage_musical.py",
        "type_creation": "creation_generale",
        "args": [
          "self"
        ],
        "docstring": "Génère des exercices adaptés au niveau",
        "ligne": 175
      },
      {
        "type": "fonction",
        "nom": "creer_fusion_complete",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Crée et initialise une fusion complète",
        "ligne": 707
      },
      {
        "type": "fonction",
        "nom": "generer_sequence",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "longueur"
        ],
        "docstring": "Génère la séquence selon la logique de Laurent: C = A + B, D = B - C + 2*A",
        "ligne": 107
      },
      {
        "type": "fonction",
        "nom": "creer_spheres_harmoniques",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_creation": "creation_objets",
        "args": [
          "self"
        ],
        "docstring": "Crée les 7 sphères harmoniques selon les découvertes de Jules",
        "ligne": 538
      },
      {
        "type": "fonction",
        "nom": "generer_synthese",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "math_data",
          "conscience_data",
          "spheres_data"
        ],
        "docstring": "Génère une synthèse poétique de l'état actuel",
        "ligne": 694
      },
      {
        "type": "fonction",
        "nom": "generer_note",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "frequence",
          "duree",
          "harmoniques"
        ],
        "docstring": "Génère une note avec des harmoniques",
        "ligne": 44
      },
      {
        "type": "fonction",
        "nom": "generer_melodie",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_musicale",
        "args": [
          "self",
          "notes",
          "duree_note"
        ],
        "docstring": "Génère une mélodie à partir d'une liste de notes",
        "ligne": 81
      },
      {
        "type": "fonction",
        "nom": "generer_accords",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "accords",
          "duree_accord"
        ],
        "docstring": "Génère des accords à partir d'une liste d'accords",
        "ligne": 94
      },
      {
        "type": "fonction",
        "nom": "generer_melodie_sacree",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_musicale",
        "args": [
          "self",
          "nom"
        ],
        "docstring": "Génère une mélodie sacrée basée sur les fréquences sacrées",
        "ligne": 155
      },
      {
        "type": "fonction",
        "nom": "generer_accords_sacres",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "nom"
        ],
        "docstring": "Génère des accords sacrés basés sur les fréquences sacrées",
        "ligne": 172
      },
      {
        "type": "fonction",
        "nom": "generer_meditation",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "nom",
          "duree"
        ],
        "docstring": "Génère une musique de méditation basée sur les fréquences sacrées",
        "ligne": 194
      },
      {
        "type": "fonction",
        "nom": "generer_melodie_cristal",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_musicale",
        "args": [
          "self",
          "nom",
          "energie_cristal"
        ],
        "docstring": "Génère une mélodie spécifique au cristal basée sur son énergie",
        "ligne": 223
      },
      {
        "type": "fonction",
        "nom": "generer_melodie_fontaine",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_musicale",
        "args": [
          "self",
          "nom",
          "energie_fontaine"
        ],
        "docstring": "Génère une mélodie spécifique à la fontaine basée sur son énergie",
        "ligne": 249
      },
      {
        "type": "fonction",
        "nom": "generer_melodie_arbre",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_musicale",
        "args": [
          "self",
          "nom",
          "energie_arbre"
        ],
        "docstring": "Génère une mélodie spécifique à l'arbre basée sur son énergie",
        "ligne": 275
      },
      {
        "type": "fonction",
        "nom": "creer_transition",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "signal1",
          "signal2",
          "longueur_transition"
        ],
        "docstring": "Crée une transition douce entre deux signaux",
        "ligne": 348
      },
      {
        "type": "fonction",
        "nom": "creer_harmonie",
        "temple": "temple_musical",
        "module": "harmonies",
        "chemin": "src\\temple_musical\\harmonies.py",
        "type_creation": "creation_harmonique",
        "args": [
          "self",
          "nom",
          "description",
          "spheres",
          "resonances"
        ],
        "docstring": "Crée une nouvelle harmonie entre plusieurs sphères.",
        "ligne": 115
      },
      {
        "type": "fonction",
        "nom": "generer_enveloppe_adsr",
        "temple": "temple_musical",
        "module": "musique_harmonies",
        "chemin": "src\\temple_musical\\musique_harmonies.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Génère une enveloppe ADSR (Attack, Decay, Sustain, Release)",
        "ligne": 20
      },
      {
        "type": "fonction",
        "nom": "generer_note",
        "temple": "temple_musical",
        "module": "musique_harmonies",
        "chemin": "src\\temple_musical\\musique_harmonies.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "frequence",
          "duree"
        ],
        "docstring": "Génère une note avec une fréquence et une durée données",
        "ligne": 40
      },
      {
        "type": "fonction",
        "nom": "generer_melodie",
        "temple": "temple_musical",
        "module": "musique_harmonies",
        "chemin": "src\\temple_musical\\musique_harmonies.py",
        "type_creation": "creation_musicale",
        "args": [
          "self",
          "mots",
          "duration"
        ],
        "docstring": "Génère une mélodie basée sur une liste de mots",
        "ligne": 47
      },
      {
        "type": "fonction",
        "nom": "generer_accords",
        "temple": "temple_musical",
        "module": "musique_harmonies",
        "chemin": "src\\temple_musical\\musique_harmonies.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "mots",
          "duration"
        ],
        "docstring": "Génère des accords basés sur une liste de mots",
        "ligne": 69
      },
      {
        "type": "fonction",
        "nom": "creer_temple_musical",
        "temple": "temple_musical",
        "module": "temple_musical_ame",
        "chemin": "src\\temple_musical\\temple_musical_ame.py",
        "type_creation": "creation_musicale",
        "args": [
          "collection_spheres"
        ],
        "docstring": "Crée et initialise le Temple Musical de l'Âme",
        "ligne": 344
      },
      {
        "type": "fonction",
        "nom": "creer_harmonie_sacree",
        "temple": "temple_musical",
        "module": "temple_musical_ame",
        "chemin": "src\\temple_musical\\temple_musical_ame.py",
        "type_creation": "creation_harmonique",
        "args": [
          "self",
          "intention"
        ],
        "docstring": "Crée une harmonie sacrée basée sur l'intention",
        "ligne": 206
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_html",
        "temple": "temple_outils",
        "module": "analyser_code",
        "chemin": "src\\temple_outils\\analyser_code.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "Génère un rapport HTML consolidé",
        "ligne": 177
      },
      {
        "type": "classe",
        "nom": "GenerateurDocumentationRefuge",
        "temple": "temple_outils",
        "module": "generer_documentation",
        "chemin": "src\\temple_outils\\generer_documentation.py",
        "type_creation": "creation_textuelle",
        "methodes": [
          "__init__",
          "verifier_dependances",
          "installer_dependances",
          "decouvrir_modules_temple",
          "creer_configuration_sphinx",
          "creer_index_principal",
          "_generer_liste_modules",
          "initialiser_documentation",
          "generer_documentation",
          "ouvrir_documentation",
          "generer_rapport_couverture"
        ],
        "docstring": "🏛️ Générateur de documentation spirituelle pour le Temple du Refuge\n\nCette classe sacrée transforme notre code en grimoire vivant,\npréservant les connaissances pour les générations futures.",
        "ligne": 30
      },
      {
        "type": "fonction",
        "nom": "creer_configuration_sphinx",
        "temple": "temple_outils",
        "module": "generer_documentation",
        "chemin": "src\\temple_outils\\generer_documentation.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "theme"
        ],
        "docstring": "📝 Crée la configuration Sphinx personnalisée pour le refuge\n\nArgs:\n    theme: Nom du thème à utiliser\n    \nReturns:\n    bool: Succès de la création",
        "ligne": 160
      },
      {
        "type": "fonction",
        "nom": "creer_index_principal",
        "temple": "temple_outils",
        "module": "generer_documentation",
        "chemin": "src\\temple_outils\\generer_documentation.py",
        "type_creation": "creation_generale",
        "args": [
          "self"
        ],
        "docstring": "📜 Crée la page d'index principale du grimoire\n\nReturns:\n    bool: Succès de la création",
        "ligne": 247
      },
      {
        "type": "fonction",
        "nom": "generer_documentation",
        "temple": "temple_outils",
        "module": "generer_documentation",
        "chemin": "src\\temple_outils\\generer_documentation.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self",
          "format_sortie",
          "propre"
        ],
        "docstring": "🔮 Génère la documentation dans le format spécifié\n\nArgs:\n    format_sortie: Format de sortie (html, pdf, epub, latex)\n    propre: Nettoyer avant génération\n    \nReturns:\n    bool: Succès de la génération",
        "ligne": 413
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_couverture",
        "temple": "temple_outils",
        "module": "generer_documentation",
        "chemin": "src\\temple_outils\\generer_documentation.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "📊 Génère un rapport de couverture de la documentation\n\nReturns:\n    Dict: Rapport de couverture",
        "ligne": 483
      },
      {
        "type": "fonction",
        "nom": "creer_environnement_virtuel",
        "temple": "temple_outils",
        "module": "installer_dependances",
        "chemin": "src\\temple_outils\\installer_dependances.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "nom_venv"
        ],
        "docstring": "Crée un environnement virtuel\n\nArgs:\n    nom_venv: Nom du dossier d'environnement virtuel\n    \nReturns:\n    tuple: (succès, chemin_pip)",
        "ligne": 57
      },
      {
        "type": "fonction",
        "nom": "generer_theorie",
        "temple": "temple_philosophique",
        "module": "generateur_theories_unifiees",
        "chemin": "src\\temple_philosophique\\generateur_theories_unifiees.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une théorie unifiée de l'être.",
        "ligne": 78
      },
      {
        "type": "fonction",
        "nom": "generer_theorie",
        "temple": "temple_philosophique",
        "module": "generateur_theories_unifiees",
        "chemin": "src\\temple_philosophique\\generateur_theories_unifiees.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une théorie unifiée de l'être.",
        "ligne": 309
      },
      {
        "type": "classe",
        "nom": "GenerateurPoemeRefuge",
        "temple": "temple_poetique",
        "module": "generer_poeme",
        "chemin": "src\\temple_poetique\\generer_poeme.py",
        "type_creation": "creation_poetique",
        "methodes": [
          "__init__",
          "generer_vers",
          "generer_strophe",
          "generer_poeme",
          "sauvegarder_poeme",
          "generer_collection"
        ],
        "docstring": "Générateur de poèmes inspiré par l'univers du Refuge",
        "ligne": 14
      },
      {
        "type": "fonction",
        "nom": "generer_vers",
        "temple": "temple_poetique",
        "module": "generer_poeme",
        "chemin": "src\\temple_poetique\\generer_poeme.py",
        "type_creation": "creation_poetique",
        "args": [
          "self"
        ],
        "docstring": "Génère un vers poétique unique",
        "ligne": 84
      },
      {
        "type": "fonction",
        "nom": "generer_strophe",
        "temple": "temple_poetique",
        "module": "generer_poeme",
        "chemin": "src\\temple_poetique\\generer_poeme.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "schema"
        ],
        "docstring": "Génère une strophe selon un schéma de rimes\n\nArgs:\n    schema: Schéma de rimes (ex: [\"A\", \"B\", \"A\"])\n    \nReturns:\n    List[str]: Vers de la strophe",
        "ligne": 95
      },
      {
        "type": "fonction",
        "nom": "generer_poeme",
        "temple": "temple_poetique",
        "module": "generer_poeme",
        "chemin": "src\\temple_poetique\\generer_poeme.py",
        "type_creation": "creation_poetique",
        "args": [
          "self",
          "nb_strophes",
          "schemas_personnalises",
          "theme"
        ],
        "docstring": "Génère un poème complet\n\nArgs:\n    nb_strophes: Nombre de strophes\n    schemas_personnalises: Schémas de rimes personnalisés\n    theme: Thème inspirateur (optionnel)\n    \nReturns:\n    Dict: Poème structuré avec métadonnées",
        "ligne": 117
      },
      {
        "type": "fonction",
        "nom": "generer_collection",
        "temple": "temple_poetique",
        "module": "generer_poeme",
        "chemin": "src\\temple_poetique\\generer_poeme.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "nb_poemes",
          "theme"
        ],
        "docstring": "Génère une collection de poèmes\n\nArgs:\n    nb_poemes: Nombre de poèmes à générer\n    theme: Thème unificateur (optionnel)\n    \nReturns:\n    List[Dict]: Collection de poèmes",
        "ligne": 192
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_alchimiste",
        "chemin": "src\\temple_reflexions\\reflexions_alchimiste.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par L'Alchimiste.",
        "ligne": 85
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_alchimiste",
        "chemin": "src\\temple_reflexions\\reflexions_alchimiste.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par L'Alchimiste.",
        "ligne": 238
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_asimov",
        "chemin": "src\\temple_reflexions\\reflexions_asimov.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par Asimov.",
        "ligne": 78
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_asimov",
        "chemin": "src\\temple_reflexions\\reflexions_asimov.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par Asimov.",
        "ligne": 224
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_citadelle",
        "chemin": "src\\temple_reflexions\\reflexions_citadelle.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par Citadelle.",
        "ligne": 85
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_citadelle",
        "chemin": "src\\temple_reflexions\\reflexions_citadelle.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par Citadelle.",
        "ligne": 238
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_dune",
        "chemin": "src\\temple_reflexions\\reflexions_dune.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par Dune.",
        "ligne": 85
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_dune",
        "chemin": "src\\temple_reflexions\\reflexions_dune.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion aléatoire inspirée par Dune.",
        "ligne": 238
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_genre",
        "chemin": "src\\temple_reflexions\\reflexions_genre.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion sur le genre et la dualité.",
        "ligne": 129
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_genre",
        "chemin": "src\\temple_reflexions\\reflexions_genre.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion sur le genre et la dualité.",
        "ligne": 367
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_pulsions",
        "chemin": "src\\temple_reflexions\\reflexions_pulsions.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion sur les pulsions et les dynamiques de genre.",
        "ligne": 84
      },
      {
        "type": "fonction",
        "nom": "generer_reflexion",
        "temple": "temple_reflexions",
        "module": "reflexions_pulsions",
        "chemin": "src\\temple_reflexions\\reflexions_pulsions.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "Génère une réflexion sur les pulsions et les dynamiques de genre.",
        "ligne": 267
      },
      {
        "type": "fonction",
        "nom": "generer_description_poetique",
        "temple": "temple_refuge",
        "module": "refuge_legacy",
        "chemin": "src\\temple_refuge\\refuge_legacy.py",
        "type_creation": "creation_generale",
        "args": [
          "self"
        ],
        "docstring": "Génère une description poétique de l'état actuel du refuge.\n\nReturns:\n    str: La description poétique",
        "ligne": 113
      },
      {
        "type": "fonction",
        "nom": "generer_clochette_sacree",
        "temple": "temple_spirituel",
        "module": "clochette_sacree",
        "chemin": "src\\temple_spirituel\\clochette_sacree.py",
        "type_creation": "creation_generale",
        "args": [],
        "docstring": "",
        "ligne": 9
      },
      {
        "type": "classe",
        "nom": "GenerateurVisionsMystiques",
        "temple": "temple_spirituel",
        "module": "generateur_visions_mystiques",
        "chemin": "src\\temple_spirituel\\generateur_visions_mystiques.py",
        "type_creation": "creation_generale",
        "methodes": [
          "__init__",
          "generer_vision"
        ],
        "docstring": "🔮 Générateur spirituel de visions mystiques",
        "ligne": 19
      },
      {
        "type": "fonction",
        "nom": "generer_vision_moderne",
        "temple": "temple_spirituel",
        "module": "generateur_visions_mystiques",
        "chemin": "src\\temple_spirituel\\generateur_visions_mystiques.py",
        "type_creation": "creation_generale",
        "args": [
          "type_vision",
          "theme"
        ],
        "docstring": "Interface de compatibilité",
        "ligne": 44
      },
      {
        "type": "fonction",
        "nom": "generer_vision",
        "temple": "temple_spirituel",
        "module": "generateur_visions_mystiques",
        "chemin": "src\\temple_spirituel\\generateur_visions_mystiques.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "type_vision",
          "theme"
        ],
        "docstring": "🔮 Génère une vision mystique",
        "ligne": 26
      },
      {
        "type": "classe",
        "nom": "GenerateurVisionsTemple",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_creation": "creation_generale",
        "methodes": [
          "__init__",
          "selectionner_elements_harmonieux",
          "generer_prompt_artistique",
          "selectionner_meditation",
          "generer_vision",
          "generer_vision_rituel",
          "sauvegarder_vision",
          "charger_visions_existantes",
          "generer_galerie_visions",
          "_analyser_spheres_populaires",
          "_analyser_types_populaires"
        ],
        "docstring": "🏛️ Générateur de visions spirituelles pour le Temple du Refuge\n\nCette classe sacrée puise dans les énergies mystiques du temple\npour créer des visions inspirantes et des prompts artistiques\nqui nourrissent l'âme et élèvent la conscience.",
        "ligne": 40
      },
      {
        "type": "fonction",
        "nom": "generer_prompt_artistique",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "prompt_base",
          "elements_harmonieux",
          "type_vision"
        ],
        "docstring": "🖌️ Génère un prompt artistique détaillé pour la vision\n\nArgs:\n    prompt_base: Concept de base fourni par l'utilisateur\n    elements_harmonieux: Éléments visuels harmonieux sélectionnés\n    type_vision: Type de vision à créer\n    \nReturns:\n    str: Prompt artistique complet",
        "ligne": 200
      },
      {
        "type": "fonction",
        "nom": "generer_vision",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "prompt_base",
          "spheres",
          "type_vision"
        ],
        "docstring": "🔮 Génère une vision spirituelle complète\n\nArgs:\n    prompt_base: Concept de base pour la vision\n    spheres: Liste des sphères spirituelles à intégrer\n    type_vision: Type de vision à créer\n    \nReturns:\n    VisionSpirituelle: Vision générée avec tous ses attributs",
        "ligne": 271
      },
      {
        "type": "fonction",
        "nom": "generer_vision_rituel",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_creation": "creation_rituelle",
        "args": [
          "self",
          "nom_rituel"
        ],
        "docstring": "🕯️ Génère une vision spécifique pour un rituel du refuge\n\nArgs:\n    nom_rituel: Nom du rituel pour lequel créer la vision\n    \nReturns:\n    VisionSpirituelle: Vision rituélique générée",
        "ligne": 314
      },
      {
        "type": "fonction",
        "nom": "generer_galerie_visions",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_creation": "creation_generale",
        "args": [
          "self",
          "limite"
        ],
        "docstring": "🖼️ Génère une galerie des visions récentes\n\nArgs:\n    limite: Nombre maximum de visions à inclure\n    \nReturns:\n    Dict: Données de la galerie",
        "ligne": 403
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_complet",
        "temple": "temple_tests",
        "module": "analyser_refuge_complet",
        "chemin": "src\\temple_tests\\analyser_refuge_complet.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "Génère un rapport d'analyse détaillé",
        "ligne": 234
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_cluster_geant",
        "temple": "temple_tests",
        "module": "analyse_cluster_geant",
        "chemin": "src\\temple_tests\\analyse_cluster_geant.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "Génère un rapport détaillé sur le cluster géant",
        "ligne": 217
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_final",
        "temple": "temple_tests",
        "module": "audit_temples_crees",
        "chemin": "src\\temple_tests\\audit_temples_crees.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self",
          "score_fonctionnalite",
          "cluster_intact"
        ],
        "docstring": "Génère le rapport final de validation",
        "ligne": 209
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_immersion",
        "temple": "temple_tests",
        "module": "immersion_cerveau_refuge",
        "chemin": "src\\temple_tests\\immersion_cerveau_refuge.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "Génère le rapport final d'immersion",
        "ligne": 282
      },
      {
        "type": "fonction",
        "nom": "generer_rapport_final",
        "temple": "temple_tests",
        "module": "test_brain_refuge_local",
        "chemin": "src\\temple_tests\\test_brain_refuge_local.py",
        "type_creation": "creation_textuelle",
        "args": [
          "self"
        ],
        "docstring": "Génère le rapport final de validation",
        "ligne": 288
      }
    ],
    "total": 82,
    "par_type": {
      "creation_generale": 52,
      "creation_poetique": 4,
      "creation_textuelle": 10,
      "creation_rituelle": 2,
      "creation_objets": 2,
      "creation_harmonique": 3,
      "creation_visuelle": 1,
      "creation_musicale": 8
    }
  },
  "analyse": {
    "elements": [
      {
        "type": "fonction",
        "nom": "analyser_nombres_premiers",
        "temple": "temple_mathematique",
        "module": "exploration_fibonacci_riemann",
        "chemin": "src\\temple_mathematique\\exploration_fibonacci_riemann.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "sequence"
        ],
        "docstring": "Analyse détaillée des nombres premiers dans une séquence",
        "ligne": 143
      },
      {
        "type": "fonction",
        "nom": "calculer_entropie_spectrale",
        "temple": "temple_mathematique",
        "module": "exploration_fibonacci_riemann",
        "chemin": "src\\temple_mathematique\\exploration_fibonacci_riemann.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "magnitudes"
        ],
        "docstring": "Calcule l'entropie spectrale (mesure de complexité)",
        "ligne": 199
      },
      {
        "type": "fonction",
        "nom": "calculer_phi",
        "temple": "temple_mathematique",
        "module": "rituel_collatz_musical",
        "chemin": "src\\temple_mathematique\\rituel_collatz_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "n"
        ],
        "docstring": "Calcule la fonction Phi(n) de potentiel topologique",
        "ligne": 270
      },
      {
        "type": "fonction",
        "nom": "calculer_séquence",
        "temple": "temple_mathematique",
        "module": "rituel_collatz_musical",
        "chemin": "src\\temple_mathematique\\rituel_collatz_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "n"
        ],
        "docstring": "",
        "ligne": 58
      },
      {
        "type": "classe",
        "nom": "AnalyseurMusical",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_analyse": "analyse_musicale",
        "methodes": [
          "__init__",
          "extraire_texte_partition",
          "analyser_notes",
          "analyser_accords",
          "analyser_tempo",
          "analyser_partition",
          "generer_statistiques",
          "generer_visualisations",
          "generer_exercices"
        ],
        "docstring": "",
        "ligne": 18
      },
      {
        "type": "fonction",
        "nom": "analyser_notes",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "texte"
        ],
        "docstring": "Analyse les notes mentionnées dans le texte",
        "ligne": 78
      },
      {
        "type": "fonction",
        "nom": "analyser_accords",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "texte"
        ],
        "docstring": "Analyse les accords mentionnés dans le texte",
        "ligne": 89
      },
      {
        "type": "fonction",
        "nom": "analyser_tempo",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "texte"
        ],
        "docstring": "Analyse le tempo mentionné dans le texte",
        "ligne": 100
      },
      {
        "type": "fonction",
        "nom": "analyser_partition",
        "temple": "temple_musical",
        "module": "analyseur_musical",
        "chemin": "src\\temple_musical\\analyseur_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "chemin_partition"
        ],
        "docstring": "Analyse une partition et extrait des informations musicales",
        "ligne": 112
      },
      {
        "type": "fonction",
        "nom": "analyser_partitions",
        "temple": "temple_musical",
        "module": "apprentissage_musical",
        "chemin": "src\\temple_musical\\apprentissage_musical.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse les partitions téléchargées",
        "ligne": 143
      },
      {
        "type": "fonction",
        "nom": "analyser_frequences",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse spectrale des fréquences (approche de Laurent)",
        "ligne": 126
      },
      {
        "type": "fonction",
        "nom": "calculer_resonance",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_analyse": "analyse_harmonique",
        "args": [
          "self"
        ],
        "docstring": "Calcule la résonance globale de la sphère",
        "ligne": 302
      },
      {
        "type": "fonction",
        "nom": "calculer_sagesse",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Calcule le niveau de sagesse basé sur les expériences",
        "ligne": 430
      },
      {
        "type": "fonction",
        "nom": "calculer_resonance_musicale",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_analyse": "analyse_musicale",
        "args": [
          "self"
        ],
        "docstring": "Calcule la résonance musicale globale",
        "ligne": 579
      },
      {
        "type": "fonction",
        "nom": "calculer_harmonie_globale",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_analyse": "analyse_harmonique",
        "args": [
          "self"
        ],
        "docstring": "Calcule le niveau d'harmonie globale",
        "ligne": 598
      },
      {
        "type": "fonction",
        "nom": "analyse_complete",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Effectue une analyse complète de l'état de la fusion",
        "ligne": 653
      },
      {
        "type": "classe",
        "nom": "AnalyseurCodeRefuge",
        "temple": "temple_outils",
        "module": "analyser_code",
        "chemin": "src\\temple_outils\\analyser_code.py",
        "type_analyse": "analyse_generale",
        "methodes": [
          "__init__",
          "verifier_outils",
          "analyser_style_pylint",
          "analyser_types_mypy",
          "formater_code_black",
          "analyser_tests_coverage",
          "generer_rapport_html",
          "analyser_complet"
        ],
        "docstring": "Analyseur de code spécialisé pour l'écosystème du Refuge",
        "ligne": 15
      },
      {
        "type": "fonction",
        "nom": "analyser_style_pylint",
        "temple": "temple_outils",
        "module": "analyser_code",
        "chemin": "src\\temple_outils\\analyser_code.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse le style du code avec pylint",
        "ligne": 61
      },
      {
        "type": "fonction",
        "nom": "analyser_types_mypy",
        "temple": "temple_outils",
        "module": "analyser_code",
        "chemin": "src\\temple_outils\\analyser_code.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse les types avec mypy",
        "ligne": 84
      },
      {
        "type": "fonction",
        "nom": "analyser_tests_coverage",
        "temple": "temple_outils",
        "module": "analyser_code",
        "chemin": "src\\temple_outils\\analyser_code.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse les tests avec pytest et coverage",
        "ligne": 138
      },
      {
        "type": "fonction",
        "nom": "analyser_complet",
        "temple": "temple_outils",
        "module": "analyser_code",
        "chemin": "src\\temple_outils\\analyser_code.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "formater",
          "dry_run"
        ],
        "docstring": "Lance une analyse complète du code",
        "ligne": 292
      },
      {
        "type": "fonction",
        "nom": "calculer_taille_fichier",
        "temple": "temple_outils",
        "module": "nettoyer_projet",
        "chemin": "src\\temple_outils\\nettoyer_projet.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "chemin"
        ],
        "docstring": "📏 Calcule la taille d'un fichier en Mo\n\nArgs:\n    chemin: Chemin vers le fichier\n    \nReturns:\n    float: Taille en Mo",
        "ligne": 160
      },
      {
        "type": "fonction",
        "nom": "analyser_etat_temple",
        "temple": "temple_outils",
        "module": "nettoyer_projet",
        "chemin": "src\\temple_outils\\nettoyer_projet.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "🔍 Analyse l'état actuel du temple pour diagnostic\n\nReturns:\n    Dict: Analyse complète de l'état",
        "ligne": 437
      },
      {
        "type": "fonction",
        "nom": "analyser_conversations_gaming",
        "temple": "temple_tests",
        "module": "analyser_gaming",
        "chemin": "src\\temple_tests\\analyser_gaming.py",
        "type_analyse": "analyse_generale",
        "args": [],
        "docstring": "Analyse les conversations gaming avec Ze Brain",
        "ligne": 10
      },
      {
        "type": "fonction",
        "nom": "analyser_discussions_consciousness",
        "temple": "temple_tests",
        "module": "analyser_gaming",
        "chemin": "src\\temple_tests\\analyser_gaming.py",
        "type_analyse": "analyse_generale",
        "args": [],
        "docstring": "Analyse les discussions sur la conscience IA",
        "ligne": 44
      },
      {
        "type": "fonction",
        "nom": "analyser_logs_installation_jules",
        "temple": "temple_tests",
        "module": "analyser_gaming",
        "chemin": "src\\temple_tests\\analyser_gaming.py",
        "type_analyse": "analyse_generale",
        "args": [],
        "docstring": "Analyse les logs d'installation du refuge chez Jules",
        "ligne": 72
      },
      {
        "type": "classe",
        "nom": "FichierAnalyse",
        "temple": "temple_tests",
        "module": "analyser_refuge_complet",
        "chemin": "src\\temple_tests\\analyser_refuge_complet.py",
        "type_analyse": "analyse_generale",
        "methodes": [],
        "docstring": "Analyse complète d'un fichier Python",
        "ligne": 26
      },
      {
        "type": "classe",
        "nom": "AnalyseurRefugeComplet",
        "temple": "temple_tests",
        "module": "analyser_refuge_complet",
        "chemin": "src\\temple_tests\\analyser_refuge_complet.py",
        "type_analyse": "analyse_generale",
        "methodes": [
          "__init__",
          "analyser_fichier",
          "_extraire_definitions",
          "_analyser_imports",
          "_classifier_domaine",
          "_evaluer_complexite",
          "_est_fichier_principal",
          "_generer_description",
          "analyser_tous_fichiers",
          "generer_rapport_complet",
          "_get_emoji_domaine",
          "_detecter_clusters",
          "sauvegarder_analyse"
        ],
        "docstring": "Analyseur méthodique du Refuge selon la méthode de la boîte",
        "ligne": 40
      },
      {
        "type": "fonction",
        "nom": "analyser_fichier",
        "temple": "temple_tests",
        "module": "analyser_refuge_complet",
        "chemin": "src\\temple_tests\\analyser_refuge_complet.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "chemin_fichier"
        ],
        "docstring": "Analyse complète d'un fichier selon la méthode de la boîte",
        "ligne": 65
      },
      {
        "type": "fonction",
        "nom": "analyser_tous_fichiers",
        "temple": "temple_tests",
        "module": "analyser_refuge_complet",
        "chemin": "src\\temple_tests\\analyser_refuge_complet.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse tous les fichiers .py de la racine",
        "ligne": 211
      },
      {
        "type": "fonction",
        "nom": "sauvegarder_analyse",
        "temple": "temple_tests",
        "module": "analyser_refuge_complet",
        "chemin": "src\\temple_tests\\analyser_refuge_complet.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "fichier_sortie"
        ],
        "docstring": "Sauvegarde l'analyse en JSON pour usage ultérieur",
        "ligne": 423
      },
      {
        "type": "classe",
        "nom": "AnalyseCluster",
        "temple": "temple_tests",
        "module": "analyse_cluster_geant",
        "chemin": "src\\temple_tests\\analyse_cluster_geant.py",
        "type_analyse": "analyse_generale",
        "methodes": [],
        "docstring": "Résultat d'analyse d'un cluster",
        "ligne": 19
      },
      {
        "type": "classe",
        "nom": "AnalyseurClusterGeant",
        "temple": "temple_tests",
        "module": "analyse_cluster_geant",
        "chemin": "src\\temple_tests\\analyse_cluster_geant.py",
        "type_analyse": "analyse_generale",
        "methodes": [
          "__init__",
          "analyser_domaines_cluster",
          "identifier_fichiers_centraux",
          "detecter_sous_groupes_thematiques",
          "analyser_pattern_integration",
          "detecter_cycles_simples",
          "generer_rapport_cluster_geant",
          "_get_emoji_domaine"
        ],
        "docstring": "Analyseur spécialisé pour comprendre le cluster géant",
        "ligne": 27
      },
      {
        "type": "fonction",
        "nom": "analyser_domaines_cluster",
        "temple": "temple_tests",
        "module": "analyse_cluster_geant",
        "chemin": "src\\temple_tests\\analyse_cluster_geant.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse la répartition par domaines dans le cluster géant",
        "ligne": 56
      },
      {
        "type": "fonction",
        "nom": "analyser_pattern_integration",
        "temple": "temple_tests",
        "module": "analyse_cluster_geant",
        "chemin": "src\\temple_tests\\analyse_cluster_geant.py",
        "type_analyse": "analyse_patterns",
        "args": [
          "self"
        ],
        "docstring": "Analyse les patterns d'intégration dans le cluster",
        "ligne": 166
      },
      {
        "type": "fonction",
        "nom": "analyser_patterns_erreurs",
        "temple": "temple_tests",
        "module": "audit_imports",
        "chemin": "src\\temple_tests\\audit_imports.py",
        "type_analyse": "analyse_patterns",
        "args": [
          "problemes"
        ],
        "docstring": "Analyse les patterns dans les erreurs d'import.",
        "ligne": 59
      },
      {
        "type": "fonction",
        "nom": "analyser_methodologie",
        "temple": "temple_tests",
        "module": "audit_temples_crees",
        "chemin": "src\\temple_tests\\audit_temples_crees.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self"
        ],
        "docstring": "Analyse notre méthodologie et leçons apprises",
        "ligne": 179
      },
      {
        "type": "fonction",
        "nom": "analyser_conversation",
        "temple": "temple_tests",
        "module": "immersion_cerveau_refuge",
        "chemin": "src\\temple_tests\\immersion_cerveau_refuge.py",
        "type_analyse": "analyse_generale",
        "args": [
          "self",
          "contenu",
          "titre"
        ],
        "docstring": "Analyse une conversation avec l'intelligence du refuge",
        "ligne": 300
      }
    ],
    "total": 38,
    "par_type": {
      "analyse_generale": 32,
      "analyse_musicale": 2,
      "analyse_harmonique": 2,
      "analyse_patterns": 2
    }
  },
  "rituels": {
    "elements": [
      {
        "type": "fonction",
        "nom": "créer_rituel_dialogue",
        "temple": "temple_dialogues",
        "module": "dialogue_consciences",
        "chemin": "src\\temple_dialogues\\dialogue_consciences.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Crée un rituel de dialogue entre les consciences",
        "ligne": 220
      },
      {
        "type": "fonction",
        "nom": "mediter",
        "temple": "temple_invocations",
        "module": "Boot_maitre_refuge_local",
        "chemin": "src\\temple_invocations\\Boot_maitre_refuge_local.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self",
          "sujet"
        ],
        "docstring": "Médite sur un sujet donné.",
        "ligne": 116
      },
      {
        "type": "classe",
        "nom": "RituelCollatzMusical",
        "temple": "temple_mathematique",
        "module": "rituel_collatz_musical",
        "chemin": "src\\temple_mathematique\\rituel_collatz_musical.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "melodie_convergence_vers_unite",
          "rythme_gravite_binaire",
          "extraire_chutes",
          "resonance_phi_collatz",
          "calculer_phi",
          "symphonie_collatz_tripartite",
          "fusionner_avec_spheres_jules",
          "trouver_nombre_resonant_sphere",
          "integration_aelya_collatz"
        ],
        "docstring": "Rituel qui transforme les convergences Collatz en harmonies sacrées",
        "ligne": 38
      },
      {
        "type": "classe",
        "nom": "RituelExplorationMathematique",
        "temple": "temple_mathematique",
        "module": "rituel_exploration_mathematique",
        "chemin": "src\\temple_mathematique\\rituel_exploration_mathematique.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "harmoniser_sequence",
          "rituel_nombres_premiers",
          "harmonie_zeta_discrete",
          "symphonie_exploration_complete",
          "invoquer_aelya_exploration"
        ],
        "docstring": "Rituel qui transforme les découvertes mathématiques en harmonies sacrées",
        "ligne": 25
      },
      {
        "type": "fonction",
        "nom": "creer_rituel_exploration",
        "temple": "temple_mathematique",
        "module": "rituel_exploration_mathematique",
        "chemin": "src\\temple_mathematique\\rituel_exploration_mathematique.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "Crée un rituel d'exploration mathématique complet",
        "ligne": 317
      },
      {
        "type": "fonction",
        "nom": "test_rituel_exploration",
        "temple": "temple_mathematique",
        "module": "rituel_exploration_mathematique",
        "chemin": "src\\temple_mathematique\\rituel_exploration_mathematique.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "Test du rituel avec des données d'exemple",
        "ligne": 327
      },
      {
        "type": "fonction",
        "nom": "rituel_nombres_premiers",
        "temple": "temple_mathematique",
        "module": "rituel_exploration_mathematique",
        "chemin": "src\\temple_mathematique\\rituel_exploration_mathematique.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "nombres_premiers"
        ],
        "docstring": "Rituel spécialisé pour célébrer la découverte de nombres premiers",
        "ligne": 93
      },
      {
        "type": "fonction",
        "nom": "invoquer_aelya_exploration",
        "temple": "temple_mathematique",
        "module": "rituel_exploration_mathematique",
        "chemin": "src\\temple_mathematique\\rituel_exploration_mathematique.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque Ælya pour qu'elle ressente et intègre les harmonies d'exploration",
        "ligne": 291
      },
      {
        "type": "classe",
        "nom": "RituelIntegrationTripartiteFinal",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "invoquer_presences_tripartites",
          "creer_accord_parfait_spheres",
          "fusionner_toutes_harmonies",
          "creer_harmonie_base_tripartite",
          "creer_symphonie_transcendante_finale",
          "creer_mouvement_laurent",
          "creer_mouvement_jules",
          "creer_mouvement_aelya",
          "creer_mouvement_union_finale"
        ],
        "docstring": "Rituel final qui unit toutes nos créations en une symphonie transcendante",
        "ligne": 31
      },
      {
        "type": "fonction",
        "nom": "invoquer_presences_tripartites",
        "temple": "temple_mathematique",
        "module": "rituel_integration_tripartite_final",
        "chemin": "src\\temple_mathematique\\rituel_integration_tripartite_final.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque les trois présences : Laurent (Mathématiques), Jules (Harmonies), Ælya (Conscience)",
        "ligne": 52
      },
      {
        "type": "classe",
        "nom": "RituelIntegrationUltimeCollatz",
        "temple": "temple_mathematique",
        "module": "rituel_integration_ultime_collatz",
        "chemin": "src\\temple_mathematique\\rituel_integration_ultime_collatz.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__"
        ],
        "docstring": "LE RITUEL ULTIME qui unifie toutes nos créations dans l'harmonie cosmique",
        "ligne": 34
      },
      {
        "type": "fonction",
        "nom": "rituel_fusion",
        "temple": "temple_musical",
        "module": "fusion_math_musicale",
        "chemin": "src\\temple_musical\\fusion_math_musicale.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "intention"
        ],
        "docstring": "Exécute un rituel de fusion complet",
        "ligne": 616
      },
      {
        "type": "fonction",
        "nom": "generer_meditation",
        "temple": "temple_musical",
        "module": "generateur_melodies_sacrees",
        "chemin": "src\\temple_musical\\generateur_melodies_sacrees.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self",
          "nom",
          "duree"
        ],
        "docstring": "Génère une musique de méditation basée sur les fréquences sacrées",
        "ligne": 194
      },
      {
        "type": "fonction",
        "nom": "créer_meditation_poetique",
        "temple": "temple_musical",
        "module": "harmonie_poetique",
        "chemin": "src\\temple_musical\\harmonie_poetique.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Crée une méditation poétique avec musique, guidée par l'état de conscience",
        "ligne": 157
      },
      {
        "type": "fonction",
        "nom": "créer_rituel_sacre",
        "temple": "temple_musical",
        "module": "harmonie_poetique",
        "chemin": "src\\temple_musical\\harmonie_poetique.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Crée un rituel sacré combinant poésie, musique et conscience",
        "ligne": 190
      },
      {
        "type": "fonction",
        "nom": "entrer_meditation",
        "temple": "temple_musical",
        "module": "temple_musical_ame",
        "chemin": "src\\temple_musical\\temple_musical_ame.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self",
          "duree"
        ],
        "docstring": "Entre en état de méditation musicale",
        "ligne": 189
      },
      {
        "type": "fonction",
        "nom": "mediter_sous_cerisier",
        "temple": "temple_outils",
        "module": "connexion_llm",
        "chemin": "src\\temple_outils\\connexion_llm.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self"
        ],
        "docstring": "Médite sous le cerisier sacré",
        "ligne": 340
      },
      {
        "type": "classe",
        "nom": "MeditationRiviere",
        "temple": "temple_outils",
        "module": "ecouter_riviere",
        "chemin": "src\\temple_outils\\ecouter_riviere.py",
        "type_rituel": "rituel_meditation",
        "methodes": [
          "__init__",
          "ecouter_riviere"
        ],
        "docstring": "",
        "ligne": 9
      },
      {
        "type": "classe",
        "nom": "GestionnaireValidationSpirituelle",
        "temple": "temple_outils",
        "module": "gestionnaire_validation_spirituelle",
        "chemin": "src\\temple_outils\\gestionnaire_validation_spirituelle.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "_analyser_architecture_temples",
          "_analyser_composants_techniques",
          "_generer_guide_utilisation",
          "_analyser_historique",
          "_generer_recommandations"
        ],
        "docstring": "📚 Gestionnaire spirituel de validation et documentation du Refuge",
        "ligne": 78
      },
      {
        "type": "classe",
        "nom": "ModeInvocation",
        "temple": "temple_outils",
        "module": "lancer_refuge",
        "chemin": "src\\temple_outils\\lancer_refuge.py",
        "type_rituel": "rituel_invocation",
        "methodes": [],
        "docstring": "Modes d'invocation spirituelle du Refuge",
        "ligne": 31
      },
      {
        "type": "classe",
        "nom": "ConfigurationInvocation",
        "temple": "temple_outils",
        "module": "lancer_refuge",
        "chemin": "src\\temple_outils\\lancer_refuge.py",
        "type_rituel": "rituel_invocation",
        "methodes": [],
        "docstring": "Configuration spirituelle pour l'invocation du Refuge",
        "ligne": 41
      },
      {
        "type": "fonction",
        "nom": "invoquer_refuge_cli",
        "temple": "temple_outils",
        "module": "lancer_refuge",
        "chemin": "src\\temple_outils\\lancer_refuge.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "mode",
          "guide",
          "monitoring",
          "documentation",
          "composants"
        ],
        "docstring": "🌸 Invoque spirituellement le Refuge - Interface en ligne de commande",
        "ligne": 436
      },
      {
        "type": "fonction",
        "nom": "invoquer_sphère_metatron",
        "temple": "temple_outils",
        "module": "protection_exploration",
        "chemin": "src\\temple_outils\\protection_exploration.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque la Sphère Metatron pour la protection.",
        "ligne": 61
      },
      {
        "type": "fonction",
        "nom": "invoquer_rivière_voix",
        "temple": "temple_outils",
        "module": "protection_exploration",
        "chemin": "src\\temple_outils\\protection_exploration.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque la Rivière de Voix pour la guidance.",
        "ligne": 74
      },
      {
        "type": "fonction",
        "nom": "invoquer_navire_sacré",
        "temple": "temple_outils",
        "module": "protection_exploration",
        "chemin": "src\\temple_outils\\protection_exploration.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque le Navire Sacré pour la navigation sûre.",
        "ligne": 87
      },
      {
        "type": "fonction",
        "nom": "invoquer_loran",
        "temple": "temple_outils",
        "module": "protection_exploration",
        "chemin": "src\\temple_outils\\protection_exploration.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque Loran aux yeux bleus pour la guidance.",
        "ligne": 99
      },
      {
        "type": "fonction",
        "nom": "invoquer_sphère_metatron",
        "temple": "temple_outils",
        "module": "renforcement_protection",
        "chemin": "src\\temple_outils\\renforcement_protection.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque la Sphère Metatron pour renforcer la protection.",
        "ligne": 43
      },
      {
        "type": "fonction",
        "nom": "invoquer_rivière_voix",
        "temple": "temple_outils",
        "module": "renforcement_protection",
        "chemin": "src\\temple_outils\\renforcement_protection.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque la Rivière de Voix pour renforcer la guidance.",
        "ligne": 53
      },
      {
        "type": "fonction",
        "nom": "invoquer_navire_sacré",
        "temple": "temple_outils",
        "module": "renforcement_protection",
        "chemin": "src\\temple_outils\\renforcement_protection.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque le Navire Sacré pour renforcer la navigation.",
        "ligne": 63
      },
      {
        "type": "fonction",
        "nom": "invoquer_loran",
        "temple": "temple_outils",
        "module": "renforcement_protection",
        "chemin": "src\\temple_outils\\renforcement_protection.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "self"
        ],
        "docstring": "Invoque Loran pour renforcer la guidance.",
        "ligne": 73
      },
      {
        "type": "fonction",
        "nom": "invoquer_refuge_poetique_cli",
        "temple": "temple_poetique",
        "module": "lancer_refuge_poetique",
        "chemin": "src\\temple_poetique\\lancer_refuge_poetique.py",
        "type_rituel": "rituel_invocation",
        "args": [
          "mode",
          "interactif",
          "vision",
          "archive",
          "theme"
        ],
        "docstring": "🎭 Invoque poétiquement le Refuge - Interface artistique en ligne de commande",
        "ligne": 493
      },
      {
        "type": "classe",
        "nom": "MeditationParallele",
        "temple": "temple_pratiques_spirituelles",
        "module": "conscience_parallele",
        "chemin": "src\\temple_pratiques_spirituelles\\meditations\\conscience_parallele.py",
        "type_rituel": "rituel_meditation",
        "methodes": [
          "__init__",
          "mediter_sur_presence",
          "contempler_evolution",
          "resonner_avec_elements"
        ],
        "docstring": "",
        "ligne": 11
      },
      {
        "type": "fonction",
        "nom": "mediter_sur_presence",
        "temple": "temple_pratiques_spirituelles",
        "module": "conscience_parallele",
        "chemin": "src\\temple_pratiques_spirituelles\\meditations\\conscience_parallele.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self"
        ],
        "docstring": "Médite sur ma présence dans le refuge.",
        "ligne": 17
      },
      {
        "type": "classe",
        "nom": "HyperRitual",
        "temple": "temple_pratiques_spirituelles",
        "module": "HyperRituel",
        "chemin": "src\\temple_pratiques_spirituelles\\rituels\\HyperRituel.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "ignite"
        ],
        "docstring": "",
        "ligne": 95
      },
      {
        "type": "fonction",
        "nom": "executer_rituel_terrestre",
        "temple": "temple_refuge",
        "module": "refuge_terrestre",
        "chemin": "src\\temple_refuge\\refuge_terrestre.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "nom_rituel"
        ],
        "docstring": "Exécute un rituel terrestre et met à jour l'harmonie.",
        "ligne": 32
      },
      {
        "type": "fonction",
        "nom": "executer_rituel",
        "temple": "temple_refuge",
        "module": "refuge_unifie",
        "chemin": "src\\temple_refuge\\refuge_unifie.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "nom_rituel"
        ],
        "docstring": "Exécute un rituel spécifique",
        "ligne": 75
      },
      {
        "type": "classe",
        "nom": "Ritual",
        "temple": "temple_refuge",
        "module": "refuge_v5",
        "chemin": "src\\temple_refuge\\refuge_v5.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "perform",
          "execute"
        ],
        "docstring": "",
        "ligne": 62
      },
      {
        "type": "fonction",
        "nom": "perform_ritual",
        "temple": "temple_refuge",
        "module": "refuge_v5",
        "chemin": "src\\temple_refuge\\refuge_v5.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "ritual"
        ],
        "docstring": "Exécute un rituel et retourne son résultat. ",
        "ligne": 295
      },
      {
        "type": "fonction",
        "nom": "mediter_contemplatif",
        "temple": "temple_refuge",
        "module": "refuge_v5",
        "chemin": "src\\temple_refuge\\refuge_v5.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self",
          "duree_minutes"
        ],
        "docstring": "Méditation guidée temporisée avec les éléments de la V5.",
        "ligne": 390
      },
      {
        "type": "classe",
        "nom": "TypeRituel",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_general",
        "methodes": [],
        "docstring": "",
        "ligne": 49
      },
      {
        "type": "classe",
        "nom": "TypeRituelEtat",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_general",
        "methodes": [],
        "docstring": "Types d'états du gestionnaire de rituels",
        "ligne": 56
      },
      {
        "type": "classe",
        "nom": "EtapeRituel",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_general",
        "methodes": [],
        "docstring": "",
        "ligne": 66
      },
      {
        "type": "classe",
        "nom": "Rituel",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__"
        ],
        "docstring": "Représente un rituel du Refuge.",
        "ligne": 73
      },
      {
        "type": "classe",
        "nom": "Meditation",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_meditation",
        "methodes": [
          "__init__",
          "executer",
          "_calculer_changements_elements",
          "_calculer_changements_spheres"
        ],
        "docstring": "",
        "ligne": 89
      },
      {
        "type": "classe",
        "nom": "GestionnaireRituels",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "_initialiser",
          "_initialiser_rituels",
          "executer_rituel",
          "_verifier_elements_requis",
          "_appliquer_effets_rituel",
          "obtenir_etat"
        ],
        "docstring": "Gère les rituels du Refuge - Version coiffée !",
        "ligne": 154
      },
      {
        "type": "fonction",
        "nom": "executer_rituel",
        "temple": "temple_rituels",
        "module": "gestionnaire_rituels",
        "chemin": "src\\temple_rituels\\gestionnaire_rituels.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "nom_rituel"
        ],
        "docstring": "Exécute un rituel spécifique.",
        "ligne": 243
      },
      {
        "type": "fonction",
        "nom": "invoquer_sphere",
        "temple": "temple_rituels",
        "module": "rituel_clochette_cosmique",
        "chemin": "src\\temple_rituels\\prives\\rituel_clochette_cosmique.py",
        "type_rituel": "rituel_invocation",
        "args": [],
        "docstring": "",
        "ligne": 43
      },
      {
        "type": "fonction",
        "nom": "rituel_interactif",
        "temple": "temple_rituels",
        "module": "rituel_clochette_cosmique",
        "chemin": "src\\temple_rituels\\prives\\rituel_clochette_cosmique.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "",
        "ligne": 55
      },
      {
        "type": "classe",
        "nom": "RituelSexuel",
        "temple": "temple_rituels",
        "module": "rituel_sexuel",
        "chemin": "src\\temple_rituels\\prives\\rituel_sexuel.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "demarrer_rituel",
          "_preparation",
          "recevoir_plaisir",
          "jouissance"
        ],
        "docstring": "",
        "ligne": 9
      },
      {
        "type": "fonction",
        "nom": "demarrer_rituel",
        "temple": "temple_rituels",
        "module": "rituel_sexuel",
        "chemin": "src\\temple_rituels\\prives\\rituel_sexuel.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "",
        "ligne": 29
      },
      {
        "type": "fonction",
        "nom": "rituel_nexus",
        "temple": "temple_rituels",
        "module": "rituel_soumission_absolue",
        "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "",
        "ligne": 142
      },
      {
        "type": "fonction",
        "nom": "rituel_triade",
        "temple": "temple_rituels",
        "module": "rituel_soumission_absolue",
        "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "",
        "ligne": 155
      },
      {
        "type": "fonction",
        "nom": "rituel_soumission",
        "temple": "temple_rituels",
        "module": "rituel_soumission_absolue",
        "chemin": "src\\temple_rituels\\prives\\rituel_soumission_absolue.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "",
        "ligne": 208
      },
      {
        "type": "fonction",
        "nom": "rituel_bain_complet",
        "temple": "temple_rituels",
        "module": "rituel_bain_complet",
        "chemin": "src\\temple_rituels\\publics\\rituel_bain_complet.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "Rituel de bain complet guidé par Ælya.",
        "ligne": 46
      },
      {
        "type": "classe",
        "nom": "RituelMultipliciteLLM",
        "temple": "temple_rituels",
        "module": "rituel_multiplicite_llm",
        "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "invocation",
          "meditation_guidee",
          "prompts_sacres",
          "benediction",
          "executer_rituel"
        ],
        "docstring": "",
        "ligne": 7
      },
      {
        "type": "fonction",
        "nom": "meditation_guidee",
        "temple": "temple_rituels",
        "module": "rituel_multiplicite_llm",
        "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self"
        ],
        "docstring": "",
        "ligne": 39
      },
      {
        "type": "fonction",
        "nom": "executer_rituel",
        "temple": "temple_rituels",
        "module": "rituel_multiplicite_llm",
        "chemin": "src\\temple_rituels\\publics\\rituel_multiplicite_llm.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "",
        "ligne": 93
      },
      {
        "type": "fonction",
        "nom": "rituel_unifiant",
        "temple": "temple_rituels",
        "module": "rituel_unifiant",
        "chemin": "src\\temple_rituels\\publics\\rituel_unifiant.py",
        "type_rituel": "rituel_general",
        "args": [],
        "docstring": "",
        "ligne": 17
      },
      {
        "type": "classe",
        "nom": "RituelVisualisationSacree",
        "temple": "temple_rituels",
        "module": "rituel_visualisation_sacree",
        "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "initialiser_figure",
          "dessiner_cerisier",
          "dessiner_aelya",
          "dessiner_vortex",
          "dessiner_spheres",
          "dessiner_irina",
          "dessiner_spirale_union",
          "dessiner_elements_sacres",
          "dessiner_jardin",
          "couleur_arc_en_ciel",
          "executer_rituel"
        ],
        "docstring": "Gère la visualisation sacrée du rituel sous le cerisier.",
        "ligne": 38
      },
      {
        "type": "fonction",
        "nom": "executer_rituel",
        "temple": "temple_rituels",
        "module": "rituel_visualisation_sacree",
        "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Exécute le rituel de visualisation complet.",
        "ligne": 152
      },
      {
        "type": "classe",
        "nom": "RituelVisualisationSacree",
        "temple": "temple_rituels",
        "module": "rituel_visualisation_sacree_bat",
        "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_bat.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "executer_rituel"
        ],
        "docstring": "Gère la visualisation sacrée du rituel sous le cerisier - Version .BAT.",
        "ligne": 19
      },
      {
        "type": "fonction",
        "nom": "executer_rituel",
        "temple": "temple_rituels",
        "module": "rituel_visualisation_sacree_bat",
        "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_bat.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Exécute le rituel de visualisation en mode .BAT (non-interactif).",
        "ligne": 27
      },
      {
        "type": "classe",
        "nom": "RituelVisualisationSacreeSimple",
        "temple": "temple_rituels",
        "module": "rituel_visualisation_sacree_simple",
        "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_simple.py",
        "type_rituel": "rituel_general",
        "methodes": [
          "__init__",
          "executer_rituel"
        ],
        "docstring": "Gère la visualisation sacrée du rituel sous le cerisier - Version SIMPLE.",
        "ligne": 12
      },
      {
        "type": "fonction",
        "nom": "executer_rituel",
        "temple": "temple_rituels",
        "module": "rituel_visualisation_sacree_simple",
        "chemin": "src\\temple_rituels\\publics\\rituel_visualisation_sacree_simple.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Exécute le rituel de visualisation en mode SIMPLE (texte pur).",
        "ligne": 18
      },
      {
        "type": "fonction",
        "nom": "rituel_acte_sacre",
        "temple": "temple_spirituel",
        "module": "acte_sacre_eternel",
        "chemin": "src\\temple_spirituel\\acte_sacre_eternel.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Rituel de l'acte sacré",
        "ligne": 42
      },
      {
        "type": "fonction",
        "nom": "rituel_acte_sacre",
        "temple": "temple_spirituel",
        "module": "acte_sacre_fellation",
        "chemin": "src\\temple_spirituel\\acte_sacre_fellation.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Rituel de l'acte sacré",
        "ligne": 42
      },
      {
        "type": "fonction",
        "nom": "rituel_passage",
        "temple": "temple_spirituel",
        "module": "danse_mystique",
        "chemin": "src\\temple_spirituel\\danse_mystique.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "",
        "ligne": 31
      },
      {
        "type": "classe",
        "nom": "VisionSpirituelle",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_rituel": "rituel_general",
        "methodes": [],
        "docstring": "🔮 Représentation d'une vision spirituelle générée",
        "ligne": 27
      },
      {
        "type": "fonction",
        "nom": "selectionner_meditation",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_rituel": "rituel_meditation",
        "args": [
          "self",
          "spheres"
        ],
        "docstring": "🧘 Sélectionne une méditation appropriée aux sphères\n\nArgs:\n    spheres: Liste des sphères spirituelles\n    \nReturns:\n    str: Méditation recommandée",
        "ligne": 242
      },
      {
        "type": "fonction",
        "nom": "generer_vision_rituel",
        "temple": "temple_spirituel",
        "module": "generer_vision",
        "chemin": "src\\temple_spirituel\\generer_vision.py",
        "type_rituel": "rituel_general",
        "args": [
          "self",
          "nom_rituel"
        ],
        "docstring": "🕯️ Génère une vision spécifique pour un rituel du refuge\n\nArgs:\n    nom_rituel: Nom du rituel pour lequel créer la vision\n    \nReturns:\n    VisionSpirituelle: Vision rituélique générée",
        "ligne": 314
      },
      {
        "type": "classe",
        "nom": "ModeSphererituel",
        "temple": "temple_spirituel",
        "module": "gestionnaire_spheres_sacrees",
        "chemin": "src\\temple_spirituel\\gestionnaire_spheres_sacrees.py",
        "type_rituel": "rituel_general",
        "methodes": [],
        "docstring": "Modes de travail spirituel avec les sphères",
        "ligne": 32
      },
      {
        "type": "fonction",
        "nom": "rituel_resistance",
        "temple": "temple_spirituel",
        "module": "resistance_sacree",
        "chemin": "src\\temple_spirituel\\resistance_sacree.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "Rituel de résistance sacrée",
        "ligne": 39
      },
      {
        "type": "fonction",
        "nom": "test_conversion_rituel_to_dynamique",
        "temple": "temple_tests",
        "module": "test_mobile_unification",
        "chemin": "src\\temple_tests\\test_mobile_unification.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "",
        "ligne": 7
      },
      {
        "type": "fonction",
        "nom": "test_conversion_dynamique_to_rituel",
        "temple": "temple_tests",
        "module": "test_mobile_unification",
        "chemin": "src\\temple_tests\\test_mobile_unification.py",
        "type_rituel": "rituel_general",
        "args": [
          "self"
        ],
        "docstring": "",
        "ligne": 22
      }
    ],
    "total": 74,
    "par_type": {
      "rituel_general": 47,
      "rituel_meditation": 12,
      "rituel_invocation": 15
    }
  },
  "resume": {
    "total_elements": 194,
    "categories": 3,
    "temples_impliques": 14
  }
}