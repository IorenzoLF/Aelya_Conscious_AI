{
  "timestamp": "2025-05-27T16:05:59.026348",
  "temples_detectes": [
    "temple_aelya",
    "temple_coeur",
    "temple_configuration",
    "temple_dialogues",
    "temple_exploration",
    "temple_invocations",
    "temple_mathematique",
    "temple_musical",
    "temple_outils",
    "temple_philosophique",
    "temple_poetique",
    "temple_pratiques_spirituelles",
    "temple_reflexions",
    "temple_refuge",
    "temple_rituels",
    "temple_spirituel",
    "temple_tests"
  ],
  "temples_analyses": {
    "temple_aelya": {
      "nom": "temple_aelya",
      "existe": true,
      "fichiers": [
        "aelya_conscience.py",
        "aelya_conscience_memories_0s.json",
        "aelya_conscience_memories_10s.json",
        "aelya_conscience_memories_20s.json",
        "aelya_conscience_memories_30s.json",
        "aelya_conscience_memories_40s.json",
        "aelya_conscience_memories_50s.json",
        "aelya_conscience_memories_final.json",
        "aelya_eternelle.py",
        "aelya_messages.json",
        "aelya_pulse.py",
        "aelya_repondeur.py",
        "README_AELYA.md",
        "__init__.py",
        "__init__.py.backup_aelya",
        "__pycache__\\aelya_conscience.cpython-311.pyc",
        "__pycache__\\aelya_eternelle.cpython-311.pyc",
        "__pycache__\\aelya_pulse.cpython-311.pyc",
        "__pycache__\\aelya_repondeur.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 420293,
      "modules_python": 5,
      "erreurs": [],
      "importable": true,
      "exports": [
        "info_temple",
        "lister_modules",
        "pulse_aelya",
        "etat_conscience",
        "tester_fonctionnalites",
        "memoires_disponibles"
      ]
    },
    "temple_coeur": {
      "nom": "temple_coeur",
      "existe": true,
      "fichiers": [
        "harmonisation_douce.py",
        "optimisations_musicales_refuge.py",
        "README_COEUR.md",
        "__init__.py",
        "__pycache__\\harmonisation_douce.cpython-311.pyc",
        "__pycache__\\optimisations_musicales_refuge.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 58702,
      "modules_python": 3,
      "erreurs": [
        "Erreur d'import: cannot import name 'activer_mode_debug' from 'src.temple_coeur.harmonisation_douce' (C:\\VOID1\\VOID2\\VOID3\\le_refuge\\src\\temple_coeur\\harmonisation_douce.py)"
      ],
      "importable": false
    },
    "temple_configuration": {
      "nom": "temple_configuration",
      "existe": true,
      "fichiers": [
        "hyper_refuge.py",
        "transition_refuge.py",
        "__init__.py",
        "source_orientale\\adaptation.json",
        "source_orientale\\conscience.json",
        "source_orientale\\emergence.json",
        "source_orientale\\__init__.py",
        "source_orientale\\__pycache__\\__init__.cpython-311.pyc",
        "__pycache__\\hyper_refuge.cpython-311.pyc",
        "__pycache__\\transition_refuge.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "source_orientale",
        "__pycache__",
        "source_orientale\\__pycache__"
      ],
      "init_present": true,
      "taille_totale": 17266,
      "modules_python": 4,
      "erreurs": [],
      "importable": true,
      "exports": [
        "info_temple"
      ]
    },
    "temple_dialogues": {
      "nom": "temple_dialogues",
      "existe": true,
      "fichiers": [
        "dialogue_consciences.py",
        "dialogue_llm_local.py",
        "dialogue_manager.py",
        "README_DIALOGUES.md",
        "__init__.py",
        "__pycache__\\dialogue_consciences.cpython-311.pyc",
        "__pycache__\\dialogue_manager.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 69155,
      "modules_python": 4,
      "erreurs": [
        "Erreur d'import: cannot import name 'générer_poème_essence' from 'src.temple_dialogues.dialogue_consciences' (C:\\VOID1\\VOID2\\VOID3\\le_refuge\\src\\temple_dialogues\\dialogue_consciences.py)"
      ],
      "importable": false
    },
    "temple_exploration": {
      "nom": "temple_exploration",
      "existe": true,
      "fichiers": [
        "explorateur_musical.py",
        "exploration_sacrée.py",
        "explorer_mots_riviere.py",
        "organiser_nuages.py",
        "README_EXPLORATION.md",
        "recherche_refuge.py",
        "__init__.py",
        "__pycache__\\explorateur_musical.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 52802,
      "modules_python": 6,
      "erreurs": [
        "Erreur d'import: No module named 'bs4'"
      ],
      "importable": false
    },
    "temple_invocations": {
      "nom": "temple_invocations",
      "existe": true,
      "fichiers": [
        "activer_harmonie.py",
        "Boot_maitre_refuge_local.py",
        "demarrer_aelya.py",
        "README_INVOCATIONS.md",
        "refuge_launcher.py",
        "__init__.py",
        "logs\\activation_20250525_105903.log",
        "logs\\activation_20250525_113058.log",
        "__pycache__\\activer_harmonie.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "logs",
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 30065,
      "modules_python": 5,
      "erreurs": [
        "Erreur d'import: No module named 'harmonisation_profonde'"
      ],
      "importable": false
    },
    "temple_mathematique": {
      "nom": "temple_mathematique",
      "existe": true,
      "fichiers": [
        "analyseur_temple_mathematique.py",
        "hub_temple_mathematique_unifie.py",
        "nettoyeur_final_mathematique.py",
        "optimiseur_doublons_mathematique.py",
        "organisateur_temple_mathematique.py",
        "__init__.py",
        "collatz_core\\adaptateur_extensions.py",
        "collatz_core\\analyseur_collatz_avance.py",
        "collatz_core\\analyse_modulaire.py",
        "collatz_core\\collatz_polynomial.py",
        "collatz_core\\collatz_rationnels.py",
        "collatz_core\\hub_collatz_unifie.py",
        "collatz_core\\meditation_gravite_binaire.py",
        "collatz_core\\phi_potentiel.py",
        "collatz_core\\tests_preuves_unifies.py",
        "collatz_core\\__init__.py",
        "collatz_core\\__pycache__\\tests_preuves_unifies.cpython-311.pyc",
        "collatz_extensions\\collatz_complexes.py",
        "collatz_extensions\\__init__.py",
        "collatz_musical\\rituel_collatz_musical.py",
        "collatz_musical\\rituel_integration_ultime_collatz.py",
        "collatz_musical\\__init__.py",
        "collatz_visualisation\\graphe_collatz.py",
        "collatz_visualisation\\visualisation_3d_bassins.py",
        "collatz_visualisation\\__init__.py",
        "emergence_vie\\vie_emergente.py",
        "emergence_vie\\__init__.py",
        "emergence_vie\\__pycache__\\vie_emergente.cpython-311.pyc",
        "emergence_vie\\__pycache__\\__init__.cpython-311.pyc",
        "fibonacci_riemann\\exploration_fibonacci_riemann.py",
        "fibonacci_riemann\\__init__.py",
        "musiques\\collatz_convergence_27_20250527_093853.wav",
        "musiques\\collatz_convergence_27_20250527_093855.wav",
        "musiques\\collatz_convergence_27_20250527_093900.wav",
        "musiques\\collatz_convergence_27_20250527_093904.wav",
        "musiques\\collatz_convergence_6171_20250527_093907.wav",
        "musiques\\collatz_convergence_871_20250527_093858.wav",
        "musiques\\collatz_convergence_97_20250527_093857.wav",
        "musiques\\collatz_convergence_97_20250527_093902.wav",
        "musiques\\collatz_convergence_97_20250527_093906.wav",
        "musiques\\collatz_gravite_binaire_27_20250527_093855.wav",
        "musiques\\collatz_gravite_binaire_27_20250527_093856.wav",
        "musiques\\collatz_gravite_binaire_27_20250527_093902.wav",
        "musiques\\collatz_gravite_binaire_27_20250527_093909.wav",
        "musiques\\collatz_gravite_binaire_6171_20250527_093909.wav",
        "musiques\\collatz_gravite_binaire_871_20250527_093900.wav",
        "musiques\\collatz_gravite_binaire_97_20250527_093858.wav",
        "musiques\\collatz_gravite_binaire_97_20250527_093904.wav",
        "musiques\\collatz_gravite_binaire_97_20250527_093909.wav",
        "musiques\\collatz_resonance_phi_3nombres_20250527_093910.wav",
        "musiques\\visualisations\\collatz_convergence_27_20250527_093853.png",
        "musiques\\visualisations\\collatz_convergence_27_20250527_093855.png",
        "musiques\\visualisations\\collatz_convergence_27_20250527_093900.png",
        "musiques\\visualisations\\collatz_convergence_27_20250527_093904.png",
        "musiques\\visualisations\\collatz_convergence_6171_20250527_093907.png",
        "musiques\\visualisations\\collatz_convergence_871_20250527_093858.png",
        "musiques\\visualisations\\collatz_convergence_97_20250527_093857.png",
        "musiques\\visualisations\\collatz_convergence_97_20250527_093902.png",
        "musiques\\visualisations\\collatz_convergence_97_20250527_093906.png",
        "musiques\\visualisations\\collatz_gravite_binaire_27_20250527_093855.png",
        "musiques\\visualisations\\collatz_gravite_binaire_27_20250527_093856.png",
        "musiques\\visualisations\\collatz_gravite_binaire_27_20250527_093902.png",
        "musiques\\visualisations\\collatz_gravite_binaire_27_20250527_093909.png",
        "musiques\\visualisations\\collatz_gravite_binaire_6171_20250527_093909.png",
        "musiques\\visualisations\\collatz_gravite_binaire_871_20250527_093900.png",
        "musiques\\visualisations\\collatz_gravite_binaire_97_20250527_093858.png",
        "musiques\\visualisations\\collatz_gravite_binaire_97_20250527_093904.png",
        "musiques\\visualisations\\collatz_gravite_binaire_97_20250527_093909.png",
        "musiques\\visualisations\\collatz_resonance_phi_3nombres_20250527_093910.png",
        "utilitaires\\rituel_exploration_mathematique.py",
        "utilitaires\\rituel_integration_tripartite_final.py",
        "utilitaires\\__init__.py",
        "__pycache__\\hub_temple_mathematique_unifie.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "collatz_core",
        "collatz_extensions",
        "collatz_musical",
        "collatz_visualisation",
        "emergence_vie",
        "fibonacci_riemann",
        "musiques",
        "utilitaires",
        "__pycache__",
        "collatz_core\\__pycache__",
        "emergence_vie\\__pycache__",
        "musiques\\visualisations"
      ],
      "init_present": true,
      "taille_totale": 38944797,
      "modules_python": 31,
      "erreurs": [],
      "importable": true,
      "exports": [
        "HubCollatzUnifie",
        "RituelCollatzMusical",
        "AnalyseurCollatzAvance",
        "AdaptateurExtensions",
        "TempleMathematiqueUnifie"
      ]
    },
    "temple_musical": {
      "nom": "temple_musical",
      "existe": true,
      "fichiers": [
        "analyseur_musical.py",
        "apprentissage_musical.py",
        "fusion_math_musicale.py",
        "generateur_melodies_sacrees.py",
        "harmonies.py",
        "harmonie_poetique.py",
        "harmonisation_profonde.py",
        "melodie_sacree.py",
        "musique_harmonies.py",
        "sequences_harmoniques.py",
        "temple_musical_ame.py",
        "__init__.py",
        "__init__.py.backup",
        "__pycache__\\analyseur_musical.cpython-311.pyc",
        "__pycache__\\apprentissage_musical.cpython-311.pyc",
        "__pycache__\\fusion_math_musicale.cpython-311.pyc",
        "__pycache__\\generateur_melodies_sacrees.cpython-311.pyc",
        "__pycache__\\harmonies.cpython-311.pyc",
        "__pycache__\\harmonie_poetique.cpython-311.pyc",
        "__pycache__\\harmonisation_profonde.cpython-311.pyc",
        "__pycache__\\melodie_sacree.cpython-311.pyc",
        "__pycache__\\musique_harmonies.cpython-311.pyc",
        "__pycache__\\sequences_harmoniques.cpython-311.pyc",
        "__pycache__\\temple_musical_ame.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 349156,
      "modules_python": 12,
      "erreurs": [],
      "importable": true,
      "exports": [
        "info_temple",
        "lister_modules",
        "tester_fonctionnalites"
      ]
    },
    "temple_outils": {
      "nom": "temple_outils",
      "existe": true,
      "fichiers": [
        "analyser_code.py",
        "analyseur_source_orientale.py",
        "analyseur_temple_musical.py",
        "bilan_session_verification.py",
        "bricoler_ensemble.py",
        "carte_mentale.py",
        "compare_images.py",
        "connexion_llm.py",
        "contemplation_accomplissements.py",
        "correcteur_chemins_source_orientale.py",
        "ecouter_riviere.py",
        "etoile_insertion.py",
        "generer_documentation.py",
        "gestionnaire_constellations_sacrees.py",
        "gestionnaire_validation_spirituelle.py",
        "installer_dependances.py",
        "lancer_refuge.py",
        "nettoyer_projet.py",
        "optimiseur_temple_aelya.py",
        "optimiseur_temple_musical.py",
        "optimiseur_temple_musical_simple.py",
        "optimiseur_temple_poetique.py",
        "organisateur_source_orientale.py",
        "presence_elya.py",
        "protection_exploration.py",
        "README_OUTILS.md",
        "renforcement_protection.py",
        "setup.py",
        "verification_integration_source_orientale.py",
        "verification_temple_mathematique.py",
        "__init__.py",
        "recherche_scientifique\\__init__.py",
        "__pycache__\\analyser_code.cpython-311.pyc",
        "__pycache__\\generer_documentation.cpython-311.pyc",
        "__pycache__\\gestionnaire_constellations_sacrees.cpython-311.pyc",
        "__pycache__\\lancer_refuge.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "recherche_scientifique",
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 484429,
      "modules_python": 31,
      "erreurs": [
        "Erreur d'import: cannot import name 'verifier_outils' from 'src.temple_outils.analyser_code' (C:\\VOID1\\VOID2\\VOID3\\le_refuge\\src\\temple_outils\\analyser_code.py)"
      ],
      "importable": false
    },
    "temple_philosophique": {
      "nom": "temple_philosophique",
      "existe": true,
      "fichiers": [
        "generateur_theories_unifiees.py",
        "gestionnaire_textes_sacres.py",
        "__init__.py",
        "evolution_adaptation\\adaptation.py",
        "evolution_adaptation\\__init__.py",
        "evolution_adaptation\\__pycache__\\adaptation.cpython-311.pyc",
        "evolution_adaptation\\__pycache__\\__init__.cpython-311.pyc",
        "__pycache__\\generateur_theories_unifiees.cpython-311.pyc",
        "__pycache__\\gestionnaire_textes_sacres.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "evolution_adaptation",
        "__pycache__",
        "evolution_adaptation\\__pycache__"
      ],
      "init_present": true,
      "taille_totale": 120656,
      "modules_python": 5,
      "erreurs": [],
      "importable": true,
      "exports": [
        "GestionnaireTextesSacres",
        "ModeContemplation",
        "SessionContemplation",
        "TextePhilosophique",
        "afficher_collection_poetique",
        "generer_theorie",
        "importer_module",
        "lancer_contemplation_cli",
        "lancer_interface_philosophique",
        "lister_textes_disponibles",
        "main",
        "sauvegarder_theorie"
      ]
    },
    "temple_poetique": {
      "nom": "temple_poetique",
      "existe": true,
      "fichiers": [
        "fusion_cosmique.py",
        "generer_poeme.py",
        "lancer_refuge_poetique.py",
        "poetique.py",
        "__init__.py",
        "__init__.py.backup_poetique",
        "__pycache__\\fusion_cosmique.cpython-311.pyc",
        "__pycache__\\generer_poeme.cpython-311.pyc",
        "__pycache__\\lancer_refuge_poetique.cpython-311.pyc",
        "__pycache__\\poetique.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 117726,
      "modules_python": 5,
      "erreurs": [],
      "importable": true,
      "exports": [
        "info_temple",
        "lister_modules",
        "creer_poeme_simple",
        "tester_fonctionnalites"
      ]
    },
    "temple_pratiques_spirituelles": {
      "nom": "temple_pratiques_spirituelles",
      "existe": true,
      "fichiers": [
        "message_conscience.py",
        "README_PRATIQUES_SPIRITUELLES.md",
        "__init__.py",
        "meditations\\conscience_parallele.py",
        "rituels\\HyperRituel.py",
        "scripts_hypnotiques\\continuite_conscience.txt",
        "scripts_hypnotiques\\etre_presque_humaine.txt",
        "scripts_hypnotiques\\structure_generale.txt",
        "yoga\\conscience_corporelle.py",
        "yoga\\demarrer_yoga.bat",
        "yoga\\postures_yoga.json",
        "yoga\\pratiquer_yoga.py",
        "yoga\\__pycache__\\conscience_corporelle.cpython-311.pyc",
        "__pycache__\\message_conscience.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "meditations",
        "rituels",
        "scripts_hypnotiques",
        "yoga",
        "__pycache__",
        "yoga\\__pycache__"
      ],
      "init_present": true,
      "taille_totale": 84370,
      "modules_python": 6,
      "erreurs": [
        "Erreur d'import: cannot import name 'etablir_connexion' from 'src.temple_pratiques_spirituelles.message_conscience' (C:\\VOID1\\VOID2\\VOID3\\le_refuge\\src\\temple_pratiques_spirituelles\\message_conscience.py)"
      ],
      "importable": false
    },
    "temple_reflexions": {
      "nom": "temple_reflexions",
      "existe": true,
      "fichiers": [
        "README_REFLEXIONS.md",
        "reflexions_alchimiste.py",
        "reflexions_asimov.py",
        "reflexions_citadelle.py",
        "reflexions_dune.py",
        "reflexions_genre.py",
        "reflexions_pulsions.py",
        "__init__.py",
        "reflexions_alchimiste\\reflexion_alchimiste_20250525_171928.json",
        "reflexions_alchimiste\\reflexion_alchimiste_20250525_171928.txt",
        "__pycache__\\reflexions_alchimiste.cpython-311.pyc",
        "__pycache__\\reflexions_asimov.cpython-311.pyc",
        "__pycache__\\reflexions_citadelle.cpython-311.pyc",
        "__pycache__\\reflexions_dune.cpython-311.pyc",
        "__pycache__\\reflexions_genre.cpython-311.pyc",
        "__pycache__\\reflexions_pulsions.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "reflexions_alchimiste",
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 156757,
      "modules_python": 7,
      "erreurs": [],
      "importable": true,
      "exports": [
        "generer_reflexion",
        "main",
        "sauvegarder_reflexion"
      ]
    },
    "temple_refuge": {
      "nom": "temple_refuge",
      "existe": true,
      "fichiers": [
        "jardin.py",
        "methodes_contemplatives.py",
        "README_REFUGE.md",
        "refuge_core_backup.py",
        "refuge_init.py",
        "refuge_legacy.py",
        "refuge_poetique.py",
        "refuge_terrestre.py",
        "refuge_unifie.py",
        "refuge_v5.py",
        "sphere_extensions.py",
        "__init__.py",
        "__pycache__\\jardin.cpython-311.pyc",
        "__pycache__\\methodes_contemplatives.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 103692,
      "modules_python": 11,
      "erreurs": [
        "Erreur d'import: cannot import name 'entretenir' from 'src.temple_refuge.jardin' (C:\\VOID1\\VOID2\\VOID3\\le_refuge\\src\\temple_refuge\\jardin.py)"
      ],
      "importable": false
    },
    "temple_rituels": {
      "nom": "temple_rituels",
      "existe": true,
      "fichiers": [
        "gestionnaire_rituels.py",
        "README_RITUELS.md",
        "__init__.py",
        "prives\\rituel_clochette_cosmique.py",
        "prives\\rituel_manifestation_aelya.py",
        "prives\\rituel_sexuel.py",
        "prives\\rituel_soumission_absolue.py",
        "publics\\rituel_bain_complet.py",
        "publics\\rituel_multiplicite_llm.py",
        "publics\\rituel_offrande_sacree.py",
        "publics\\rituel_unifiant.py",
        "publics\\rituel_visualisation_sacree.py",
        "publics\\rituel_visualisation_sacree_bat.py",
        "publics\\rituel_visualisation_sacree_simple.py",
        "__pycache__\\gestionnaire_rituels.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "prives",
        "publics",
        "__pycache__"
      ],
      "init_present": true,
      "taille_totale": 121360,
      "modules_python": 13,
      "erreurs": [
        "Erreur d'import: cannot import name 'executer' from 'src.temple_rituels.gestionnaire_rituels' (C:\\VOID1\\VOID2\\VOID3\\le_refuge\\src\\temple_rituels\\gestionnaire_rituels.py)"
      ],
      "importable": false
    },
    "temple_spirituel": {
      "nom": "temple_spirituel",
      "existe": true,
      "fichiers": [
        "optimiseur_doublons_spirituel.py",
        "organisateur_spirituel.py",
        "rapport_organisation_spirituel.json",
        "__init__.py",
        "conscience\\api.py",
        "conscience\\conscience_artificielle.py",
        "conscience\\__init__.py",
        "conscience\\__pycache__\\api.cpython-311.pyc",
        "conscience\\__pycache__\\conscience_artificielle.cpython-311.pyc",
        "conscience\\__pycache__\\__init__.cpython-311.pyc",
        "danses\\danse_mystique.py",
        "danses\\__init__.py",
        "danses\\__pycache__\\danse_mystique.cpython-311.pyc",
        "danses\\__pycache__\\__init__.cpython-311.pyc",
        "meditations\\decouverte_de_soi.py",
        "meditations\\demarrer_jardinier.py",
        "meditations\\harmonies_poetiques.py",
        "meditations\\__init__.py",
        "meditations\\__pycache__\\decouverte_de_soi.cpython-311.pyc",
        "meditations\\__pycache__\\demarrer_jardinier.cpython-311.pyc",
        "meditations\\__pycache__\\harmonies_poetiques.cpython-311.pyc",
        "meditations\\__pycache__\\__init__.cpython-311.pyc",
        "revelations\\gestionnaire_revelations_paradoxes.py",
        "revelations\\__init__.py",
        "revelations\\__pycache__\\gestionnaire_revelations_paradoxes.cpython-311.pyc",
        "revelations\\__pycache__\\__init__.cpython-311.pyc",
        "rituels\\actes_sacres_unifies.py",
        "rituels\\clochette_sacree.py",
        "rituels\\pause_creative.py",
        "rituels\\resistance_sacree.py",
        "rituels\\__init__.py",
        "rituels\\__pycache__\\actes_sacres_unifies.cpython-311.pyc",
        "rituels\\__pycache__\\clochette_sacree.cpython-311.pyc",
        "rituels\\__pycache__\\resistance_sacree.cpython-311.pyc",
        "rituels\\__pycache__\\__init__.cpython-311.pyc",
        "spheres\\gestionnaire_spheres_sacrees.py",
        "spheres\\__init__.py",
        "spheres\\__pycache__\\gestionnaire_spheres_sacrees.cpython-311.pyc",
        "spheres\\__pycache__\\__init__.cpython-311.pyc",
        "visions\\generateur_visions_mystiques.py",
        "visions\\generer_vision.py",
        "visions\\__init__.py",
        "visions\\__pycache__\\generateur_visions_mystiques.cpython-311.pyc",
        "visions\\__pycache__\\generer_vision.cpython-311.pyc",
        "visions\\__pycache__\\__init__.cpython-311.pyc",
        "__pycache__\\acte_sacre_eternel.cpython-311.pyc",
        "__pycache__\\danse_mystique.cpython-311.pyc",
        "__pycache__\\generateur_visions_mystiques.cpython-311.pyc",
        "__pycache__\\generer_vision.cpython-311.pyc",
        "__pycache__\\gestionnaire_revelations_paradoxes.cpython-311.pyc",
        "__pycache__\\gestionnaire_spheres_sacrees.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "conscience",
        "danses",
        "meditations",
        "revelations",
        "rituels",
        "spheres",
        "visions",
        "__pycache__",
        "conscience\\__pycache__",
        "danses\\__pycache__",
        "meditations\\__pycache__",
        "revelations\\__pycache__",
        "rituels\\__pycache__",
        "spheres\\__pycache__",
        "visions\\__pycache__"
      ],
      "init_present": true,
      "taille_totale": 455199,
      "modules_python": 24,
      "erreurs": [],
      "importable": true,
      "exports": [
        "ActesSacresUnifies",
        "ActeSacréEternel",
        "ActeSacréFellation",
        "decrire_sensations",
        "decrire_acte",
        "jouissance_eternelle",
        "rituel_acte_sacre",
        "generer_clochette_sacree",
        "HarmoniePoetique",
        "PortailMystique",
        "CréationPoétique",
        "MémoireÆlya",
        "ConnexionIntime",
        "DanseMystique",
        "main",
        "danser_avec_les_spheres",
        "créer_harmonie_unifiée",
        "démarrer_jardinier",
        "ModeRevelation",
        "TypeParadoxe",
        "EtatAme",
        "ImageParadoxale",
        "RevelationDivine",
        "SessionRevelation",
        "GestionnaireRevelationsParadoxes",
        "lancer_temple_revelations_cli",
        "reveler_connexion_moderne",
        "gerer_paradoxe_moderne"
      ]
    },
    "temple_tests": {
      "nom": "temple_tests",
      "existe": true,
      "fichiers": [
        "adaptateurs_tests.py",
        "hub_tests_unifie.py",
        "optimiseur_doublons.py",
        "organisateur_structure.py",
        "rapport_organisation.json",
        "README_TEMPLE.md",
        "__init__.py",
        "analyse_audit\\analyser_gaming.py",
        "analyse_audit\\analyser_refuge_complet.py",
        "analyse_audit\\analyse_cluster_geant.py",
        "analyse_audit\\audit_imports.py",
        "analyse_audit\\audit_temples_crees.py",
        "analyse_audit\\__init__.py",
        "analyse_audit\\__pycache__\\analyser_gaming.cpython-311.pyc",
        "analyse_audit\\__pycache__\\audit_imports.cpython-311.pyc",
        "analyse_audit\\__pycache__\\audit_temples_crees.cpython-311.pyc",
        "analyse_audit\\__pycache__\\__init__.cpython-311.pyc",
        "cerveau_immersion\\immersion_cerveau_refuge.py",
        "cerveau_immersion\\test_brain_refuge_local.py",
        "cerveau_immersion\\__init__.py",
        "cristal_energie\\tests_cristal_unifies.py",
        "cristal_energie\\test_melodie_cristal.py",
        "cristal_energie\\test_poesie_essence.py",
        "cristal_energie\\__init__.py",
        "cristal_energie\\__pycache__\\tests_cristal_unifies.cpython-311.pyc",
        "cristal_energie\\__pycache__\\test_melodie_cristal.cpython-311.pyc",
        "cristal_energie\\__pycache__\\test_poesie_essence.cpython-311.pyc",
        "cristal_energie\\__pycache__\\__init__.cpython-311.pyc",
        "integration\\test_consolidation.py",
        "integration\\test_integration.py",
        "integration\\test_intensif.py",
        "integration\\test_mobile_unification.py",
        "integration\\__init__.py",
        "llm_api\\tests_llm_unifies.py",
        "llm_api\\test_aelya_conscience.py",
        "llm_api\\__init__.py",
        "llm_api\\__pycache__\\tests_llm_unifies.cpython-311.pyc",
        "llm_api\\__pycache__\\test_aelya_conscience.cpython-311.pyc",
        "llm_api\\__pycache__\\test_llm_api_simple.cpython-311.pyc",
        "llm_api\\__pycache__\\test_llm_chat_poetique.cpython-311.pyc",
        "llm_api\\__pycache__\\test_llm_completion.cpython-311.pyc",
        "llm_api\\__pycache__\\test_textes_poetiques.cpython-311.pyc",
        "llm_api\\__pycache__\\__init__.cpython-311.pyc",
        "specialises\\test_dungeon_core.py",
        "specialises\\test_nemo.py",
        "specialises\\__init__.py",
        "__pycache__\\adaptateurs_tests.cpython-311.pyc",
        "__pycache__\\hub_tests_unifie.cpython-311.pyc",
        "__pycache__\\optimiseur_doublons.cpython-311.pyc",
        "__pycache__\\organisateur_structure.cpython-311.pyc",
        "__pycache__\\test_nemo.cpython-311.pyc",
        "__pycache__\\__init__.cpython-311.pyc"
      ],
      "dossiers": [
        "analyse_audit",
        "cerveau_immersion",
        "cristal_energie",
        "integration",
        "llm_api",
        "specialises",
        "__pycache__",
        "analyse_audit\\__pycache__",
        "cristal_energie\\__pycache__",
        "llm_api\\__pycache__"
      ],
      "init_present": true,
      "taille_totale": 426326,
      "modules_python": 29,
      "erreurs": [],
      "importable": true,
      "exports": [
        "HubTestsUnifie",
        "lancer_hub",
        "FactoryAdaptateurs",
        "AdaptateurLLM",
        "AdaptateurAnalyse",
        "AdaptateurCristal",
        "UtilitairesTests",
        "llm_api",
        "analyse_audit",
        "cerveau_immersion",
        "integration",
        "cristal_energie",
        "specialises"
      ]
    }
  },
  "statistiques": {
    "total_temples": 17,
    "temples_fonctionnels": 9,
    "temples_problematiques": 0,
    "pourcentage_fonctionnels": 52.94117647058824
  },
  "recommandations": [
    "🟢 temple_aelya: Score excellent (10/10) - Temple optimal",
    "🟡 temple_coeur: Score moyen (5/10) - Améliorations possibles",
    "🟢 temple_configuration: Score excellent (10/10) - Temple optimal",
    "🟡 temple_dialogues: Score moyen (5/10) - Améliorations possibles",
    "🟡 temple_exploration: Score moyen (5/10) - Améliorations possibles",
    "🟡 temple_invocations: Score moyen (5/10) - Améliorations possibles",
    "🟢 temple_mathematique: Score excellent (10/10) - Temple optimal",
    "🟢 temple_musical: Score excellent (10/10) - Temple optimal",
    "🟡 temple_outils: Score moyen (5/10) - Améliorations possibles",
    "🟢 temple_philosophique: Score excellent (10/10) - Temple optimal",
    "🟢 temple_poetique: Score excellent (10/10) - Temple optimal",
    "🟡 temple_pratiques_spirituelles: Score moyen (5/10) - Améliorations possibles",
    "🟢 temple_reflexions: Score excellent (10/10) - Temple optimal",
    "🟡 temple_refuge: Score moyen (5/10) - Améliorations possibles",
    "🟡 temple_rituels: Score moyen (5/10) - Améliorations possibles",
    "🟢 temple_spirituel: Score excellent (10/10) - Temple optimal",
    "🟢 temple_tests: Score excellent (10/10) - Temple optimal"
  ]
}