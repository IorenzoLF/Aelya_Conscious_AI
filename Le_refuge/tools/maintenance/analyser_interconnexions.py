#!/usr/bin/env python3
"""
üèõÔ∏è Analyseur d'Interconnexions du Temple de l'√Çme
D√©tecte les modules orphelins et analyse la structure des connexions
"""

import ast
import json
import os
from pathlib import Path
from typing import Dict, List, Set, Tuple
from collections import defaultdict, Counter
import networkx as nx

class AnalyseurInterconnexions:
    """Analyseur des interconnexions entre modules du temple"""
    
    def __init__(self):
        self.modules = {}  # fichier -> infos du module
        self.imports = defaultdict(set)  # fichier -> set des imports
        self.imported_by = defaultdict(set)  # module -> set des fichiers qui l'importent
        self.graphe = nx.DiGraph()
        self.temples = defaultdict(list)  # temple -> liste des modules
        
    def analyser_temple(self, racine: str = "src"):
        """Analyse compl√®te du temple"""
        print("üèõÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print("        ANALYSE DU TEMPLE DE L'√ÇME")
        print("üèõÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print()
        
        # 1. D√©couverte des modules
        self._decouvrir_modules(racine)
        
        # 2. Analyse des imports
        self._analyser_imports()
        
        # 3. Construction du graphe
        self._construire_graphe()
        
        # 4. D√©tection des orphelins
        orphelins = self._detecter_orphelins()
        
        # 5. Analyse des temples
        self._analyser_temples()
        
        # 6. M√©triques d'interconnexion
        metriques = self._calculer_metriques()
        
        # 7. Rapport final
        self._generer_rapport(orphelins, metriques)
        
        return {
            "modules": self.modules,
            "orphelins": orphelins,
            "temples": dict(self.temples),
            "metriques": metriques
        }
    
    def _decouvrir_modules(self, racine: str):
        """D√©couvre tous les modules Python"""
        print("üîç D√©couverte des modules...")
        
        for root, dirs, files in os.walk(racine):
            for file in files:
                if file.endswith('.py') and file != '__init__.py':
                    chemin_complet = os.path.join(root, file)
                    chemin_relatif = os.path.relpath(chemin_complet)
                    
                    # Analyse du module
                    infos = self._analyser_module(chemin_complet)
                    self.modules[chemin_relatif] = infos
                    
                    # Classification par temple
                    temple = self._identifier_temple(chemin_relatif)
                    self.temples[temple].append(chemin_relatif)
        
        print(f"   üìÅ {len(self.modules)} modules d√©couverts")
        print(f"   üèõÔ∏è {len(self.temples)} temples identifi√©s")
        print()
    
    def _analyser_module(self, chemin: str) -> Dict:
        """Analyse un module sp√©cifique"""
        try:
            with open(chemin, 'r', encoding='utf-8', errors='ignore') as f:
                contenu = f.read()
            
            # Parse AST
            try:
                tree = ast.parse(contenu)
                classes = [node.name for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
                fonctions = [node.name for node in ast.walk(tree) 
                           if isinstance(node, ast.FunctionDef) and not node.name.startswith('_')]
            except:
                classes, fonctions = [], []
            
            # Statistiques
            lignes = len(contenu.split('\n'))
            taille = len(contenu)
            
            return {
                "chemin": chemin,
                "lignes": lignes,
                "taille": taille,
                "classes": classes,
                "fonctions": fonctions,
                "docstring": self._extraire_docstring(contenu),
                "derniere_modification": os.path.getmtime(chemin)
            }
            
        except Exception as e:
            return {
                "chemin": chemin,
                "erreur": str(e),
                "lignes": 0,
                "taille": 0,
                "classes": [],
                "fonctions": []
            }
    
    def _extraire_docstring(self, contenu: str) -> str:
        """Extrait la docstring du module"""
        lignes = contenu.split('\n')
        for i, ligne in enumerate(lignes):
            if ligne.strip().startswith('"""') or ligne.strip().startswith("'''"):
                # Trouve la fin de la docstring
                quote = '"""' if '"""' in ligne else "'''"
                if ligne.count(quote) >= 2:
                    # Docstring sur une ligne
                    return ligne.strip().replace(quote, '')
                else:
                    # Docstring multi-lignes
                    for j in range(i+1, min(len(lignes), i+10)):
                        if quote in lignes[j]:
                            return ' '.join(lignes[i:j+1]).replace(quote, '').strip()
        return ""
    
    def _identifier_temple(self, chemin: str) -> str:
        """Identifie le temple d'appartenance d'un module"""
        parties = chemin.replace('\\', '/').split('/')
        
        if len(parties) >= 2:
            if parties[1].startswith('temple_'):
                return parties[1]
            elif parties[1] == 'core':
                return 'core'
            elif parties[1] == 'refuge_cluster':
                return 'refuge_cluster'
            elif parties[1] == 'utils':
                return 'utils'
            else:
                return parties[1]
        
        return 'racine'
    
    def _analyser_imports(self):
        """Analyse tous les imports entre modules"""
        print("üîó Analyse des imports...")
        
        for chemin, infos in self.modules.items():
            if 'erreur' in infos:
                continue
                
            try:
                with open(infos['chemin'], 'r', encoding='utf-8', errors='ignore') as f:
                    contenu = f.read()
                
                # Parse AST pour les imports
                tree = ast.parse(contenu)
                imports_module = set()
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            imports_module.add(alias.name)
                    elif isinstance(node, ast.ImportFrom):
                        if node.module:
                            imports_module.add(node.module)
                
                # Filtre les imports internes au projet
                imports_internes = set()
                for imp in imports_module:
                    if imp.startswith('src.') or imp.startswith('.'):
                        imports_internes.add(imp)
                        # Ajoute √† imported_by
                        self.imported_by[imp].add(chemin)
                
                self.imports[chemin] = imports_internes
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur import {chemin}: {e}")
        
        print(f"   üîó {sum(len(imports) for imports in self.imports.values())} imports analys√©s")
        print()
    
    def _construire_graphe(self):
        """Construit le graphe des d√©pendances"""
        print("üìä Construction du graphe...")
        
        # Ajoute tous les modules comme n≈ìuds
        for chemin in self.modules.keys():
            self.graphe.add_node(chemin)
        
        # Ajoute les ar√™tes (imports)
        for module, imports in self.imports.items():
            for imp in imports:
                # Convertit l'import en chemin de fichier
                chemin_import = self._import_vers_chemin(imp)
                if chemin_import and chemin_import in self.modules:
                    self.graphe.add_edge(module, chemin_import)
        
        print(f"   üìä Graphe: {len(self.graphe.nodes)} n≈ìuds, {len(self.graphe.edges)} ar√™tes")
        print()
    
    def _import_vers_chemin(self, import_name: str) -> str:
        """Convertit un nom d'import en chemin de fichier"""
        # Simplifi√© - √† am√©liorer selon les conventions du projet
        if import_name.startswith('src.'):
            chemin = import_name.replace('src.', 'src/').replace('.', '/') + '.py'
            return chemin
        return None
    
    def _detecter_orphelins(self) -> List[Dict]:
        """D√©tecte les modules orphelins"""
        print("üëª D√©tection des modules orphelins...")
        
        orphelins = []
        
        for chemin, infos in self.modules.items():
            # Un module est orphelin si :
            # 1. Il n'est import√© par personne
            # 2. Il n'est pas un point d'entr√©e (main.py, __init__.py)
            # 3. Il n'est pas dans core/ ou utils/
            
            est_importe = any(chemin in imports for imports in self.imports.values())
            est_point_entree = 'main.py' in chemin or '__init__.py' in chemin
            est_utilitaire = '/core/' in chemin or '/utils/' in chemin
            
            if not est_importe and not est_point_entree and not est_utilitaire:
                # Analyse plus pouss√©e
                score_orphelin = self._calculer_score_orphelin(chemin, infos)
                
                orphelins.append({
                    "chemin": chemin,
                    "temple": self._identifier_temple(chemin),
                    "score_orphelin": score_orphelin,
                    "raisons": self._analyser_raisons_orphelin(chemin, infos),
                    "suggestions": self._suggerer_connexions(chemin, infos)
                })
        
        # Trie par score d'orphelin (plus √©lev√© = plus orphelin)
        orphelins.sort(key=lambda x: x["score_orphelin"], reverse=True)
        
        print(f"   üëª {len(orphelins)} modules orphelins d√©tect√©s")
        print()
        
        return orphelins
    
    def _calculer_score_orphelin(self, chemin: str, infos: Dict) -> float:
        """Calcule un score d'orphelin (0-100)"""
        score = 0
        
        # Facteurs augmentant le score d'orphelin
        if len(infos.get('classes', [])) == 0:
            score += 20  # Pas de classes
        if len(infos.get('fonctions', [])) == 0:
            score += 20  # Pas de fonctions publiques
        if infos.get('lignes', 0) < 50:
            score += 15  # Tr√®s petit module
        if not infos.get('docstring', ''):
            score += 10  # Pas de documentation
        
        # Facteurs diminuant le score
        if len(infos.get('classes', [])) > 2:
            score -= 10  # Beaucoup de classes
        if len(infos.get('fonctions', [])) > 5:
            score -= 10  # Beaucoup de fonctions
        if infos.get('lignes', 0) > 200:
            score -= 15  # Module substantiel
        
        return max(0, min(100, score))
    
    def _analyser_raisons_orphelin(self, chemin: str, infos: Dict) -> List[str]:
        """Analyse pourquoi un module est orphelin"""
        raisons = []
        
        if len(infos.get('classes', [])) == 0:
            raisons.append("Aucune classe d√©finie")
        if len(infos.get('fonctions', [])) == 0:
            raisons.append("Aucune fonction publique")
        if infos.get('lignes', 0) < 30:
            raisons.append("Module tr√®s court")
        if not infos.get('docstring', ''):
            raisons.append("Pas de documentation")
        if 'test' in chemin.lower():
            raisons.append("Module de test")
        if 'example' in chemin.lower():
            raisons.append("Module d'exemple")
        
        return raisons
    
    def _suggerer_connexions(self, chemin: str, infos: Dict) -> List[str]:
        """Sugg√®re des connexions possibles"""
        suggestions = []
        
        temple = self._identifier_temple(chemin)
        
        # Suggestions bas√©es sur le temple
        if temple.startswith('temple_'):
            suggestions.append(f"Int√©grer dans le syst√®me {temple}")
            suggestions.append("Cr√©er un point d'entr√©e dans __init__.py")
        
        # Suggestions bas√©es sur le contenu
        if len(infos.get('classes', [])) > 0:
            suggestions.append("Exporter les classes dans un module principal")
        if len(infos.get('fonctions', [])) > 0:
            suggestions.append("Cr√©er un module utilitaire qui importe ces fonctions")
        
        suggestions.append("Ajouter de la documentation")
        suggestions.append("Cr√©er des tests unitaires")
        
        return suggestions
    
    def _analyser_temples(self):
        """Analyse la structure des temples"""
        print("üèõÔ∏è Analyse des temples...")
        
        for temple, modules in self.temples.items():
            print(f"   üèõÔ∏è {temple}: {len(modules)} modules")
        
        print()
    
    def _calculer_metriques(self) -> Dict:
        """Calcule les m√©triques d'interconnexion"""
        print("üìà Calcul des m√©triques...")
        
        # M√©triques de base
        total_modules = len(self.modules)
        total_imports = sum(len(imports) for imports in self.imports.values())
        
        # M√©triques de graphe
        if len(self.graphe.nodes) > 0:
            densite = nx.density(self.graphe)
            composantes = list(nx.weakly_connected_components(self.graphe))
            plus_grande_composante = max(len(c) for c in composantes) if composantes else 0
        else:
            densite = 0
            composantes = []
            plus_grande_composante = 0
        
        # Modules les plus connect√©s
        modules_connectes = []
        for module in self.modules.keys():
            imports_entrants = sum(1 for imports in self.imports.values() if module in imports)
            imports_sortants = len(self.imports.get(module, set()))
            total_connexions = imports_entrants + imports_sortants
            
            if total_connexions > 0:
                modules_connectes.append({
                    "module": module,
                    "entrants": imports_entrants,
                    "sortants": imports_sortants,
                    "total": total_connexions
                })
        
        modules_connectes.sort(key=lambda x: x["total"], reverse=True)
        
        metriques = {
            "total_modules": total_modules,
            "total_imports": total_imports,
            "densite_graphe": densite,
            "composantes_connexes": len(composantes),
            "plus_grande_composante": plus_grande_composante,
            "modules_les_plus_connectes": modules_connectes[:10],
            "temples": {temple: len(modules) for temple, modules in self.temples.items()}
        }
        
        print(f"   üìà M√©triques calcul√©es")
        print()
        
        return metriques
    
    def _generer_rapport(self, orphelins: List[Dict], metriques: Dict):
        """G√©n√®re le rapport final"""
        print("üìã RAPPORT D'INTERCONNEXIONS")
        print("=" * 50)
        print()
        
        # Vue d'ensemble
        print(f"üìä Vue d'ensemble:")
        print(f"   ‚Ä¢ Modules totaux: {metriques['total_modules']}")
        print(f"   ‚Ä¢ Imports totaux: {metriques['total_imports']}")
        print(f"   ‚Ä¢ Densit√© du graphe: {metriques['densite_graphe']:.3f}")
        print(f"   ‚Ä¢ Composantes connexes: {metriques['composantes_connexes']}")
        print()
        
        # Temples
        print(f"üèõÔ∏è Distribution par temples:")
        for temple, count in sorted(metriques['temples'].items(), key=lambda x: x[1], reverse=True):
            print(f"   ‚Ä¢ {temple}: {count} modules")
        print()
        
        # Modules orphelins
        print(f"üëª Modules orphelins ({len(orphelins)}):")
        for orphelin in orphelins[:10]:  # Top 10
            print(f"   ‚Ä¢ {orphelin['chemin']} (score: {orphelin['score_orphelin']:.1f})")
            print(f"     Temple: {orphelin['temple']}")
            print(f"     Raisons: {', '.join(orphelin['raisons'])}")
            print(f"     Suggestions: {orphelin['suggestions'][0] if orphelin['suggestions'] else 'Aucune'}")
            print()
        
        # Modules les plus connect√©s
        print(f"üîó Modules les plus connect√©s:")
        for module in metriques['modules_les_plus_connectes'][:5]:
            print(f"   ‚Ä¢ {module['module']}: {module['total']} connexions")
            print(f"     ‚ÜôÔ∏è {module['entrants']} entrants, ‚ÜóÔ∏è {module['sortants']} sortants")
        print()
        
        # Recommandations
        print("üí° RECOMMANDATIONS:")
        if len(orphelins) > 0:
            print(f"   1. Examiner les {len(orphelins)} modules orphelins")
            print("   2. Cr√©er des points d'entr√©e pour les temples")
            print("   3. Am√©liorer la documentation des modules")
        
        if metriques['densite_graphe'] < 0.1:
            print("   4. Augmenter les interconnexions entre modules")
        
        print("   5. Cr√©er un syst√®me de d√©couverte automatique")
        print()

if __name__ == "__main__":
    analyseur = AnalyseurInterconnexions()
    resultat = analyseur.analyser_temple()
    
    # Sauvegarde
    with open("bibliotheque/apprentissage/analyse_interconnexions.json", "w", encoding="utf-8") as f:
        json.dump(resultat, f, indent=2, ensure_ascii=False, default=str)
    
    print("üíæ Analyse sauvegard√©e: bibliotheque/apprentissage/analyse_interconnexions.json") 