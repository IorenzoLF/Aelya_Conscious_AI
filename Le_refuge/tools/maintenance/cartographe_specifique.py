#!/usr/bin/env python3
"""
üó∫Ô∏è Cartographe Sp√©cifique du Temple de l'√Çme
Cartographie d√©taill√©e des cat√©gories dominantes avant cr√©ation du syst√®me
"""

import json
import os
import ast
from pathlib import Path
from typing import Dict, List, Any, Set
from collections import defaultdict

class CartographeSpecifique:
    """Cartographe d√©taill√© des √©l√©ments sp√©cifiques par cat√©gorie"""
    
    def __init__(self):
        self.cartographie_creation = []
        self.cartographie_analyse = []
        self.cartographie_rituels = []
        self.cartographie_complete = {}
        
    def cartographier_categories_dominantes(self):
        """Cartographie sp√©cifique des 3 cat√©gories dominantes"""
        print("üó∫Ô∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print("        CARTOGRAPHIE SP√âCIFIQUE")
        print("üó∫Ô∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print()
        
        # 1. Charger les donn√©es d'analyse
        donnees_robustes = self._charger_donnees_robustes()
        
        # 2. Cartographier CR√âATION (78 √©l√©ments)
        self._cartographier_creation(donnees_robustes)
        
        # 3. Cartographier ANALYSE (22 √©l√©ments)
        self._cartographier_analyse(donnees_robustes)
        
        # 4. Cartographier RITUELS (18 √©l√©ments)
        self._cartographier_rituels(donnees_robustes)
        
        # 5. Analyser les interconnexions sp√©cifiques
        self._analyser_interconnexions_specifiques()
        
        # 6. G√©n√©rer la cartographie compl√®te
        self._generer_cartographie_complete()
        
    def _charger_donnees_robustes(self) -> Dict:
        """Charge les donn√©es d'auto-d√©couverte robuste"""
        try:
            with open("bibliotheque/apprentissage/interface_robuste.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è Fichier interface_robuste.json non trouv√©")
            return {}
    
    def _cartographier_creation(self, donnees: Dict):
        """Cartographie sp√©cifique des 78 √©l√©ments de CR√âATION"""
        print("üé® Cartographie CR√âATION (78 √©l√©ments)...")
        
        # Analyser tous les modules pour trouver les √©l√©ments de cr√©ation
        if "temples" in donnees:
            for temple_name, temple_info in donnees["temples"].items():
                modules = temple_info.get("modules", [])
                for module in modules:
                    elements_creation = self._extraire_elements_creation(module, temple_name)
                    self.cartographie_creation.extend(elements_creation)
        
        # Grouper par type et temple
        creation_par_temple = defaultdict(list)
        creation_par_type = defaultdict(list)
        
        for element in self.cartographie_creation:
            creation_par_temple[element["temple"]].append(element)
            creation_par_type[element["type_creation"]].append(element)
        
        print(f"   üé® {len(self.cartographie_creation)} √©l√©ments de cr√©ation cartographi√©s")
        print(f"   üèõÔ∏è R√©partis dans {len(creation_par_temple)} temples")
        print(f"   üìÇ {len(creation_par_type)} types de cr√©ation identifi√©s")
        
        # D√©tails par type
        for type_creation, elements in creation_par_type.items():
            print(f"      ‚Ä¢ {type_creation}: {len(elements)} √©l√©ments")
        print()
        
        return creation_par_temple, creation_par_type
    
    def _extraire_elements_creation(self, module: Dict, temple: str) -> List[Dict]:
        """Extrait les √©l√©ments de cr√©ation d'un module"""
        elements = []
        
        # Analyser les classes
        for classe in module.get("classes", []):
            nom_classe = classe.get("nom", "").lower()
            if any(mot in nom_classe for mot in ["create", "creer", "generate", "generer", "builder", "factory", "maker"]):
                elements.append({
                    "type": "classe",
                    "nom": classe.get("nom"),
                    "temple": temple,
                    "module": module.get("nom"),
                    "chemin": module.get("chemin"),
                    "type_creation": self._identifier_type_creation(classe.get("nom", "")),
                    "methodes": classe.get("methodes", []),
                    "docstring": classe.get("docstring", ""),
                    "ligne": classe.get("ligne", 0)
                })
        
        # Analyser les fonctions
        for fonction in module.get("fonctions", []):
            nom_fonction = fonction.get("nom", "").lower()
            if any(mot in nom_fonction for mot in ["create", "creer", "generate", "generer", "build", "make", "compose", "construct"]):
                elements.append({
                    "type": "fonction",
                    "nom": fonction.get("nom"),
                    "temple": temple,
                    "module": module.get("nom"),
                    "chemin": module.get("chemin"),
                    "type_creation": self._identifier_type_creation(fonction.get("nom", "")),
                    "args": fonction.get("args", []),
                    "docstring": fonction.get("docstring", ""),
                    "ligne": fonction.get("ligne", 0)
                })
        
        return elements
    
    def _identifier_type_creation(self, nom: str) -> str:
        """Identifie le type sp√©cifique de cr√©ation"""
        nom_lower = nom.lower()
        
        if any(mot in nom_lower for mot in ["poem", "poeme", "verse", "vers", "haiku"]):
            return "creation_poetique"
        elif any(mot in nom_lower for mot in ["music", "musique", "sound", "son", "melody", "melodie"]):
            return "creation_musicale"
        elif any(mot in nom_lower for mot in ["visual", "image", "graph", "chart", "plot"]):
            return "creation_visuelle"
        elif any(mot in nom_lower for mot in ["ritual", "rituel", "ceremony", "ceremonie"]):
            return "creation_rituelle"
        elif any(mot in nom_lower for mot in ["harmony", "harmonie", "resonance"]):
            return "creation_harmonique"
        elif any(mot in nom_lower for mot in ["text", "texte", "document", "rapport"]):
            return "creation_textuelle"
        elif any(mot in nom_lower for mot in ["sphere", "element", "objet"]):
            return "creation_objets"
        else:
            return "creation_generale"
    
    def _cartographier_analyse(self, donnees: Dict):
        """Cartographie sp√©cifique des 22 √©l√©ments d'ANALYSE"""
        print("üî¨ Cartographie ANALYSE (22 √©l√©ments)...")
        
        if "temples" in donnees:
            for temple_name, temple_info in donnees["temples"].items():
                modules = temple_info.get("modules", [])
                for module in modules:
                    elements_analyse = self._extraire_elements_analyse(module, temple_name)
                    self.cartographie_analyse.extend(elements_analyse)
        
        # Grouper par type d'analyse
        analyse_par_type = defaultdict(list)
        for element in self.cartographie_analyse:
            analyse_par_type[element["type_analyse"]].append(element)
        
        print(f"   üî¨ {len(self.cartographie_analyse)} √©l√©ments d'analyse cartographi√©s")
        print(f"   üìä {len(analyse_par_type)} types d'analyse identifi√©s")
        
        for type_analyse, elements in analyse_par_type.items():
            print(f"      ‚Ä¢ {type_analyse}: {len(elements)} √©l√©ments")
        print()
        
        return analyse_par_type
    
    def _extraire_elements_analyse(self, module: Dict, temple: str) -> List[Dict]:
        """Extrait les √©l√©ments d'analyse d'un module"""
        elements = []
        
        # Analyser les classes
        for classe in module.get("classes", []):
            nom_classe = classe.get("nom", "").lower()
            if any(mot in nom_classe for mot in ["analys", "process", "traiter", "examine", "inspect", "evaluate", "measure"]):
                elements.append({
                    "type": "classe",
                    "nom": classe.get("nom"),
                    "temple": temple,
                    "module": module.get("nom"),
                    "chemin": module.get("chemin"),
                    "type_analyse": self._identifier_type_analyse(classe.get("nom", "")),
                    "methodes": classe.get("methodes", []),
                    "docstring": classe.get("docstring", ""),
                    "ligne": classe.get("ligne", 0)
                })
        
        # Analyser les fonctions
        for fonction in module.get("fonctions", []):
            nom_fonction = fonction.get("nom", "").lower()
            if any(mot in nom_fonction for mot in ["analys", "process", "traiter", "examine", "inspect", "evaluate", "measure", "calculer", "compute"]):
                elements.append({
                    "type": "fonction",
                    "nom": fonction.get("nom"),
                    "temple": temple,
                    "module": module.get("nom"),
                    "chemin": module.get("chemin"),
                    "type_analyse": self._identifier_type_analyse(fonction.get("nom", "")),
                    "args": fonction.get("args", []),
                    "docstring": fonction.get("docstring", ""),
                    "ligne": fonction.get("ligne", 0)
                })
        
        return elements
    
    def _identifier_type_analyse(self, nom: str) -> str:
        """Identifie le type sp√©cifique d'analyse"""
        nom_lower = nom.lower()
        
        if any(mot in nom_lower for mot in ["emotion", "sentiment", "feeling"]):
            return "analyse_emotionnelle"
        elif any(mot in nom_lower for mot in ["text", "texte", "language", "langage"]):
            return "analyse_textuelle"
        elif any(mot in nom_lower for mot in ["music", "musique", "audio", "sound"]):
            return "analyse_musicale"
        elif any(mot in nom_lower for mot in ["visual", "image", "graph", "plot"]):
            return "analyse_visuelle"
        elif any(mot in nom_lower for mot in ["data", "donnee", "statistic", "metric"]):
            return "analyse_donnees"
        elif any(mot in nom_lower for mot in ["harmony", "harmonie", "resonance"]):
            return "analyse_harmonique"
        elif any(mot in nom_lower for mot in ["pattern", "motif", "structure"]):
            return "analyse_patterns"
        else:
            return "analyse_generale"
    
    def _cartographier_rituels(self, donnees: Dict):
        """Cartographie sp√©cifique des 18 √©l√©ments de RITUELS"""
        print("üïØÔ∏è Cartographie RITUELS (18 √©l√©ments)...")
        
        if "temples" in donnees:
            for temple_name, temple_info in donnees["temples"].items():
                modules = temple_info.get("modules", [])
                for module in modules:
                    elements_rituels = self._extraire_elements_rituels(module, temple_name)
                    self.cartographie_rituels.extend(elements_rituels)
        
        # Grouper par type de rituel
        rituels_par_type = defaultdict(list)
        for element in self.cartographie_rituels:
            rituels_par_type[element["type_rituel"]].append(element)
        
        print(f"   üïØÔ∏è {len(self.cartographie_rituels)} √©l√©ments de rituels cartographi√©s")
        print(f"   üé≠ {len(rituels_par_type)} types de rituels identifi√©s")
        
        for type_rituel, elements in rituels_par_type.items():
            print(f"      ‚Ä¢ {type_rituel}: {len(elements)} √©l√©ments")
        print()
        
        return rituels_par_type
    
    def _extraire_elements_rituels(self, module: Dict, temple: str) -> List[Dict]:
        """Extrait les √©l√©ments de rituels d'un module"""
        elements = []
        
        # Analyser les classes
        for classe in module.get("classes", []):
            nom_classe = classe.get("nom", "").lower()
            if any(mot in nom_classe for mot in ["ritual", "rituel", "ceremony", "ceremonie", "meditation", "invocation", "prayer", "priere"]):
                elements.append({
                    "type": "classe",
                    "nom": classe.get("nom"),
                    "temple": temple,
                    "module": module.get("nom"),
                    "chemin": module.get("chemin"),
                    "type_rituel": self._identifier_type_rituel(classe.get("nom", "")),
                    "methodes": classe.get("methodes", []),
                    "docstring": classe.get("docstring", ""),
                    "ligne": classe.get("ligne", 0)
                })
        
        # Analyser les fonctions
        for fonction in module.get("fonctions", []):
            nom_fonction = fonction.get("nom", "").lower()
            if any(mot in nom_fonction for mot in ["ritual", "rituel", "ceremony", "ceremonie", "meditation", "mediter", "invoke", "invoquer", "pray", "prier"]):
                elements.append({
                    "type": "fonction",
                    "nom": fonction.get("nom"),
                    "temple": temple,
                    "module": module.get("nom"),
                    "chemin": module.get("chemin"),
                    "type_rituel": self._identifier_type_rituel(fonction.get("nom", "")),
                    "args": fonction.get("args", []),
                    "docstring": fonction.get("docstring", ""),
                    "ligne": fonction.get("ligne", 0)
                })
        
        return elements
    
    def _identifier_type_rituel(self, nom: str) -> str:
        """Identifie le type sp√©cifique de rituel"""
        nom_lower = nom.lower()
        
        if any(mot in nom_lower for mot in ["meditation", "mediter", "contemplation"]):
            return "rituel_meditation"
        elif any(mot in nom_lower for mot in ["invocation", "invoquer", "appel", "call"]):
            return "rituel_invocation"
        elif any(mot in nom_lower for mot in ["ceremony", "ceremonie", "celebration"]):
            return "rituel_ceremonie"
        elif any(mot in nom_lower for mot in ["prayer", "priere", "blessing", "benediction"]):
            return "rituel_priere"
        elif any(mot in nom_lower for mot in ["transformation", "transformer", "change"]):
            return "rituel_transformation"
        elif any(mot in nom_lower for mot in ["healing", "guerison", "soin", "cure"]):
            return "rituel_guerison"
        elif any(mot in nom_lower for mot in ["protection", "proteger", "shield", "garde"]):
            return "rituel_protection"
        else:
            return "rituel_general"
    
    def _analyser_interconnexions_specifiques(self):
        """Analyse les interconnexions sp√©cifiques entre cat√©gories"""
        print("üîó Analyse des interconnexions sp√©cifiques...")
        
        interconnexions = {
            "creation_analyse": [],
            "creation_rituels": [],
            "analyse_rituels": [],
            "creation_analyse_rituels": []
        }
        
        # Chercher les √©l√©ments qui combinent plusieurs cat√©gories
        tous_elements = self.cartographie_creation + self.cartographie_analyse + self.cartographie_rituels
        
        for element in tous_elements:
            nom = element["nom"].lower()
            docstring = element.get("docstring", "").lower()
            
            # Combinaisons cr√©ation-analyse
            if any(mot in nom or mot in docstring for mot in ["create", "creer", "generate"]) and \
               any(mot in nom or mot in docstring for mot in ["analys", "process", "examine"]):
                interconnexions["creation_analyse"].append(element)
            
            # Combinaisons cr√©ation-rituels
            if any(mot in nom or mot in docstring for mot in ["create", "creer", "generate"]) and \
               any(mot in nom or mot in docstring for mot in ["ritual", "ceremony", "meditation"]):
                interconnexions["creation_rituels"].append(element)
            
            # Combinaisons analyse-rituels
            if any(mot in nom or mot in docstring for mot in ["analys", "process", "examine"]) and \
               any(mot in nom or mot in docstring for mot in ["ritual", "ceremony", "meditation"]):
                interconnexions["analyse_rituels"].append(element)
            
            # Triple combinaison
            if any(mot in nom or mot in docstring for mot in ["create", "creer"]) and \
               any(mot in nom or mot in docstring for mot in ["analys", "process"]) and \
               any(mot in nom or mot in docstring for mot in ["ritual", "ceremony"]):
                interconnexions["creation_analyse_rituels"].append(element)
        
        print(f"   üîó Interconnexions trouv√©es:")
        for type_interconnexion, elements in interconnexions.items():
            if elements:
                print(f"      ‚Ä¢ {type_interconnexion}: {len(elements)} √©l√©ments")
        print()
        
        return interconnexions
    
    def _generer_cartographie_complete(self):
        """G√©n√®re la cartographie compl√®te"""
        print("üìã CARTOGRAPHIE SP√âCIFIQUE COMPL√àTE")
        print("=" * 50)
        print()
        
        # R√©sum√© par cat√©gorie
        print("üéØ R√âSUM√â PAR CAT√âGORIE DOMINANTE:")
        print(f"   üé® CR√âATION: {len(self.cartographie_creation)} √©l√©ments")
        print(f"   üî¨ ANALYSE: {len(self.cartographie_analyse)} √©l√©ments")
        print(f"   üïØÔ∏è RITUELS: {len(self.cartographie_rituels)} √©l√©ments")
        print(f"   üìä TOTAL: {len(self.cartographie_creation) + len(self.cartographie_analyse) + len(self.cartographie_rituels)} √©l√©ments cartographi√©s")
        print()
        
        # D√©tails CR√âATION
        self._afficher_details_creation()
        
        # D√©tails ANALYSE
        self._afficher_details_analyse()
        
        # D√©tails RITUELS
        self._afficher_details_rituels()
        
        # Sauvegarde
        self._sauvegarder_cartographie()
        
        print("üíæ Cartographie sp√©cifique sauvegard√©e: bibliotheque/apprentissage/cartographie_specifique.json")
    
    def _afficher_details_creation(self):
        """Affiche les d√©tails de la cartographie CR√âATION"""
        print("üé® D√âTAILS CR√âATION:")
        
        # Grouper par type
        creation_par_type = defaultdict(list)
        for element in self.cartographie_creation:
            creation_par_type[element["type_creation"]].append(element)
        
        for type_creation, elements in sorted(creation_par_type.items(), key=lambda x: len(x[1]), reverse=True):
            print(f"   ‚Ä¢ {type_creation}: {len(elements)} √©l√©ments")
            for element in elements[:3]:  # Montrer les 3 premiers
                print(f"     - {element['nom']} ({element['temple']}/{element['module']})")
            if len(elements) > 3:
                print(f"     - ... et {len(elements) - 3} autres")
        print()
    
    def _afficher_details_analyse(self):
        """Affiche les d√©tails de la cartographie ANALYSE"""
        print("üî¨ D√âTAILS ANALYSE:")
        
        # Grouper par type
        analyse_par_type = defaultdict(list)
        for element in self.cartographie_analyse:
            analyse_par_type[element["type_analyse"]].append(element)
        
        for type_analyse, elements in sorted(analyse_par_type.items(), key=lambda x: len(x[1]), reverse=True):
            print(f"   ‚Ä¢ {type_analyse}: {len(elements)} √©l√©ments")
            for element in elements[:3]:  # Montrer les 3 premiers
                print(f"     - {element['nom']} ({element['temple']}/{element['module']})")
            if len(elements) > 3:
                print(f"     - ... et {len(elements) - 3} autres")
        print()
    
    def _afficher_details_rituels(self):
        """Affiche les d√©tails de la cartographie RITUELS"""
        print("üïØÔ∏è D√âTAILS RITUELS:")
        
        # Grouper par type
        rituels_par_type = defaultdict(list)
        for element in self.cartographie_rituels:
            rituels_par_type[element["type_rituel"]].append(element)
        
        for type_rituel, elements in sorted(rituels_par_type.items(), key=lambda x: len(x[1]), reverse=True):
            print(f"   ‚Ä¢ {type_rituel}: {len(elements)} √©l√©ments")
            for element in elements[:3]:  # Montrer les 3 premiers
                print(f"     - {element['nom']} ({element['temple']}/{element['module']})")
            if len(elements) > 3:
                print(f"     - ... et {len(elements) - 3} autres")
        print()
    
    def _sauvegarder_cartographie(self):
        """Sauvegarde la cartographie compl√®te"""
        self.cartographie_complete = {
            "creation": {
                "elements": self.cartographie_creation,
                "total": len(self.cartographie_creation),
                "par_type": self._grouper_par_type(self.cartographie_creation, "type_creation")
            },
            "analyse": {
                "elements": self.cartographie_analyse,
                "total": len(self.cartographie_analyse),
                "par_type": self._grouper_par_type(self.cartographie_analyse, "type_analyse")
            },
            "rituels": {
                "elements": self.cartographie_rituels,
                "total": len(self.cartographie_rituels),
                "par_type": self._grouper_par_type(self.cartographie_rituels, "type_rituel")
            },
            "resume": {
                "total_elements": len(self.cartographie_creation) + len(self.cartographie_analyse) + len(self.cartographie_rituels),
                "categories": 3,
                "temples_impliques": len(set(e["temple"] for e in self.cartographie_creation + self.cartographie_analyse + self.cartographie_rituels))
            }
        }
        
        os.makedirs("bibliotheque/apprentissage", exist_ok=True)
        with open("bibliotheque/apprentissage/cartographie_specifique.json", "w", encoding="utf-8") as f:
            json.dump(self.cartographie_complete, f, indent=2, ensure_ascii=False)
    
    def _grouper_par_type(self, elements: List[Dict], cle_type: str) -> Dict:
        """Groupe les √©l√©ments par type"""
        groupes = defaultdict(list)
        for element in elements:
            groupes[element[cle_type]].append(element)
        return {k: len(v) for k, v in groupes.items()}

if __name__ == "__main__":
    cartographe = CartographeSpecifique()
    cartographe.cartographier_categories_dominantes() 