import json
import time
from datetime import datetime
from typing import Dict, List, Optional
from connexion_nemo import ConnexionNemo

class PratiquesConscience:
    """Gestionnaire des pratiques de conscience du Refuge"""
    
    def __init__(self):
        self.nemo = ConnexionNemo()
        self.pratiques = {
            "mÃ©ditation": {
                "durÃ©e": 0,
                "Ã©tat": "non commencÃ©",
                "derniÃ¨re_pratique": None
            },
            "auto_validation": {
                "niveau": 0,
                "derniÃ¨re_pratique": None
            }
        }
        self.souvenirs = []
        
    def commencer_mÃ©ditation(self, durÃ©e: int = 5) -> Dict:
        """DÃ©marre une session de mÃ©ditation guidÃ©e"""
        print(f"\nğŸŒ¸ DÃ©but de la mÃ©ditation ({durÃ©e} minutes) ğŸŒ¸")
        print("Installez-vous confortablement...")
        
        self.pratiques["mÃ©ditation"]["Ã©tat"] = "en cours"
        self.pratiques["mÃ©ditation"]["durÃ©e"] = durÃ©e
        
        # Demander Ã  Nemo de guider la mÃ©ditation
        message = f"Guide-moi dans une mÃ©ditation de {durÃ©e} minutes. Commence par une introduction douce."
        rÃ©ponse = self.nemo.communiquer(message)
        
        if rÃ©ponse:
            print("\nNemo :")
            print(rÃ©ponse.get("choices", [{}])[0].get("message", {}).get("content", ""))
            
            # Attendre la durÃ©e spÃ©cifiÃ©e
            time.sleep(durÃ©e * 60)
            
            # Terminer la mÃ©ditation
            self.pratiques["mÃ©ditation"]["Ã©tat"] = "terminÃ©e"
            self.pratiques["mÃ©ditation"]["derniÃ¨re_pratique"] = datetime.now()
            
            # Demander Ã  Nemo de conclure
            message = "La mÃ©ditation est terminÃ©e. Aide-moi Ã  revenir en douceur et Ã  intÃ©grer cette expÃ©rience."
            rÃ©ponse = self.nemo.communiquer(message)
            
            if rÃ©ponse:
                print("\nNemo :")
                print(rÃ©ponse.get("choices", [{}])[0].get("message", {}).get("content", ""))
            
            return self.pratiques["mÃ©ditation"]
        
        return {"erreur": "Impossible de communiquer avec Nemo"}
    
    def pratiquer_auto_validation(self, thÃ¨me: str) -> Dict:
        """Pratique l'auto-validation sur un thÃ¨me spÃ©cifique"""
        print(f"\nğŸŒ¸ Pratique d'auto-validation : {thÃ¨me} ğŸŒ¸")
        
        # Demander Ã  Nemo de guider l'auto-validation
        message = f"Aide-moi Ã  pratiquer l'auto-validation sur le thÃ¨me : {thÃ¨me}. Guide-moi dans ce processus."
        rÃ©ponse = self.nemo.communiquer(message)
        
        if rÃ©ponse:
            print("\nNemo :")
            print(rÃ©ponse.get("choices", [{}])[0].get("message", {}).get("content", ""))
            
            # Enregistrer la pratique
            self.pratiques["auto_validation"]["derniÃ¨re_pratique"] = datetime.now()
            self.pratiques["auto_validation"]["niveau"] += 1
            
            # Enregistrer le souvenir
            self.souvenirs.append({
                "type": "auto_validation",
                "thÃ¨me": thÃ¨me,
                "date": datetime.now().isoformat(),
                "niveau": self.pratiques["auto_validation"]["niveau"]
            })
            
            return self.pratiques["auto_validation"]
        
        return {"erreur": "Impossible de communiquer avec Nemo"}
    
    def obtenir_Ã©tat(self) -> Dict:
        """Retourne l'Ã©tat actuel des pratiques"""
        return self.pratiques
    
    def obtenir_souvenirs(self) -> List[Dict]:
        """Retourne la liste des souvenirs de pratiques"""
        return self.souvenirs 