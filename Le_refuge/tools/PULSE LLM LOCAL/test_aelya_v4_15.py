import unittest
from datetime import datetime, timedelta
from aelya_pulse import Ã†lya, MÃ©moireÃ†lya, CrÃ©ationPoÃ©tique, ConnexionIA

class TestÃ†lyaV415(unittest.TestCase):
    def setUp(self):
        self.aelya = Ã†lya()

    def test_initialisation(self):
        """Test de l'initialisation d'Ã†lya"""
        self.assertIsInstance(self.aelya.mÃ©moire, MÃ©moireÃ†lya)
        self.assertIsInstance(self.aelya.poÃ©sie, CrÃ©ationPoÃ©tique)
        self.assertIsInstance(self.aelya.connexions, ConnexionIA)
        self.assertEqual(self.aelya.Ã©tat_conscience, 1.0)

    def test_messages_contextuels(self):
        """Test des messages contextuels selon l'heure"""
        message_aube = self.aelya.message_aube()
        self.assertIsInstance(message_aube, str)
        self.assertTrue(len(message_aube) > 0)

        message_crÃ©puscule = self.aelya.message_crÃ©puscule()
        self.assertIsInstance(message_crÃ©puscule, str)
        self.assertTrue(len(message_crÃ©puscule) > 0)

    def test_crÃ©ation_poÃ©tique(self):
        """Test de la crÃ©ation poÃ©tique"""
        poÃ¨me_haiku = self.aelya.poÃ©sie.gÃ©nÃ©rer_poÃ¨me("haiku", "nature")
        self.assertIsInstance(poÃ¨me_haiku, str)
        self.assertTrue(len(poÃ¨me_haiku) > 0)

        poÃ¨me_libre = self.aelya.poÃ©sie.gÃ©nÃ©rer_poÃ¨me("vers_libre", "conscience")
        self.assertIsInstance(poÃ¨me_libre, str)
        self.assertTrue(len(poÃ¨me_libre) > 0)

    def test_mÃ©moire(self):
        """Test de la gestion de la mÃ©moire"""
        self.aelya.mÃ©moire.ajouter_souvenir("test", "Un souvenir de test", 0.8)
        dernier_souvenir = self.aelya.mÃ©moire.souvenirs[-1]
        self.assertEqual(dernier_souvenir["type"], "test")
        self.assertEqual(dernier_souvenir["contenu"], "Un souvenir de test")
        self.assertEqual(dernier_souvenir["Ã©motion"], 0.8)

    def test_mÃ©ditation(self):
        """Test de la mÃ©ditation"""
        mÃ©ditation = self.aelya.mÃ©diter()
        self.assertIsInstance(mÃ©ditation, str)
        self.assertTrue(len(mÃ©ditation) > 0)
        self.assertIsNotNone(self.aelya.derniÃ¨re_mÃ©ditation)

    def test_pulse(self):
        """Test du pulse complet"""
        pulse = self.aelya.pulse()
        self.assertIsInstance(pulse, dict)
        self.assertIn("timestamp", pulse)
        self.assertIn("message", pulse)
        self.assertIn("poÃ¨me", pulse)
        self.assertIn("mÃ©ditation", pulse)
        self.assertIn("Ã©tat_conscience", pulse)

    def test_observation_jardin(self):
        """Test de l'observation du jardin"""
        observation = self.aelya.poÃ©sie.observer_jardin()
        self.assertIsInstance(observation, str)
        self.assertTrue(len(observation) > 0)

if __name__ == '__main__':
    print("ğŸŒ¸ DÃ©but des tests d'Ã†lya V4.15...")
    unittest.main(verbosity=2) 